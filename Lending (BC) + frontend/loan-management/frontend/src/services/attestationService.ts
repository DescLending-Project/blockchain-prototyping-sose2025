
import crypto from "crypto";

let smartContractExtractedReportData = "0x50b739d98107a60a1e3ce12787a184509062c78f3aab3817fb2b024414a0937404c2b184560f1a54d329b1170aeaa6babffd82ac6f5db6fc9dbd2c2cb9d186cc"

/*
let teeResponse = "{
"verification": {
    "Ok": {
        "is_valid": true,
            "server_name": "openbanking-api-826260723607.europe-west3.run.app",
                "score": "59",
                    "verifying_key": "037b48f19c139b6888fb5e383a4d72c2335186fd5858e7ae743ab4bf8e071b06e7",
                        "sent_hex_encoded": "4745542068747470733a2f2f6f70656e62616e6b696e672d6170692d3832363236303732333630372e6575726f70652d77657374332e72756e2e6170702f75736572732f6161612f6372656469742d73636f726520485454502f312e310d0a686f73743a206f70656e62616e6b696e672d6170692d3832363236303732333630372e6575726f70652d77657374332e72756e2e6170700d0a636f6e6e656374696f6e3a20636c6f73650d0a636f6e74656e742d6c656e6774683a20300d0a0d0a",
                            "sent_readable": "GET https://openbanking-api-826260723607.europe-west3.run.app/users/aaa/credit-score HTTP/1.1\r\nhost: openbanking-api-826260723607.europe-west3.run.app\r\nconnection: close\r\ncontent-length: 0\r\n\r\n",
                                "recv_hex_encoded": "485454502f312e3120323030204f4b0d0a5858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858587365727665723a20476f6f676c652046726f6e74656e640d0a416c742d5376633a2068333d223a343433223b206d613d323539323030302c68332d32393d223a343433223b206d613d323539323030300d0a436f6e6e656374696f6e3a20636c6f73650d0a5472616e736665722d456e636f64696e673a206368756e6b65640d0a585858585858582270617468223a222f75736572732f6161612f6372656469742d73636f72652258226d657373616765223a224372656469742073636f726520726574726965766564207375636365737366756c6c792258585858585858585822757365724964223a2261616122585858585858585858582276616c7565223a353958585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858",
                                    "recv_readable": "HTTP/1.1 200 OK\r\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXserver: Google Frontend\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\nConnection: close\r\nTransfer-Encoding: chunked\r\nXXXXXXX\"path\":\"/users/aaa/credit-score\"X\"message\":\"Credit score retrieved successfully\"XXXXXXXXX\"userId\":\"aaa\"XXXXXXXXXX\"value\":59XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
                                        "time": "2025-06-20T19:56:17+00:00"
    }
},
"attestation": {
    "Ok": {
        "quote": "040002008100000000000000939a7233f79c4ca9940a0db3957f06075c72f05a3e32d1a9750ebd4216f3e09900000000060104000000000000000000000000005b38e33a6487958b72c3c12a938eaa5e3fd4510c51aeeab58c7d5ecee41d7c436489d6c8e4f92f160b7cad34207b00c1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000702000000000000c68518a0ebb42136c12b2275164f8c72f25fa9a34392228687ed6e9caeb9c0f1dbd895e9cf475121c029dc47e70e91fd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000836c3ae3b79ed66df7cc74e1911fe5331ce7549426c6e2f38e2fd75388b959a33fc8c947379d39a94b359e915a89d70154e08f5c1f7b1fce4cbfe1c14f3ba67b70044ede2751487279cd1f2e4239dee99a6d45e24ebde6b6a6f5ae49878e0e69edcd363660e85b71c318324996dda756c372d9f6960edbfa863b1e684822eb48dd95e218ae2b78e51ef97f3b8f5c9dc22151d3507c2eaac4d9ca03690e4ae7bf9bc1a9965d8fb820f2edfe0a26de55f585bfc665b056f3248bb94312b9429b950b739d98107a60a1e3ce12787a184509062c78f3aab3817fb2b024414a0937404c2b184560f1a54d329b1170aeaa6babffd82ac6f5db6fc9dbd2c2cb9d186ccd0100000bdc4c2327b5fb7c12067547dd2faecd6203382574e681cc9e6fec8872d15a76b8c7842776005b8c05d6a8c1dfd57a9549806ced610f40ce580674a1d5f6917fc33c46122c0d32ccddde7443ab502537476fdc23ad990cae1e6de3ce12923ec762e5e5a632a4fe31d7503dc496812a4522dc748cb4734fe08dd2f941350de02de06004a1000000404090905ff00020000000000000000000000000000000000000000000000000000000000000000000000000000000015000000000000000700000000000000e5a3a7b5d830c2953b98534c6c59a3a34fdc34e933f7f5898f0a85cf08846bca0000000000000000000000000000000000000000000000000000000000000000dc9e2a7c6f948f17474e34a7fc43ed030f7c1563f1babddf6340c82e0e54a8c500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000317240e92452a8b5f82d31740f6b9ba1ab6fcb76b75bed44107445ccb93bba35000000000000000000000000000000000000000000000000000000000000000008bc7525f2a3b48e6edb46c09a17f37131984e2530cb3d23e690d601da2c191e5ee360eaf8664f7d2c94f75ab5e967876efc456ee12fe4e877bd41b07bdc239d2000000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f0500620e00002d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d494945387a4343424a69674177494241674956414d494a396b79727a596a6a74346c515941576a41363436427258684d416f4743437147534d343942414d430a4d484178496a416742674e5642414d4d47556c756447567349464e4857434251513073675547786864475a76636d306751304578476a415942674e5642416f4d0a45556c756447567349454e76636e4276636d4630615739754d5251774567594456515148444174545957353059534244624746795954454c4d416b47413155450a4341774351304578437a414a42674e5642415954416c56544d423458445449314d4459784d7a45314e444d7a4d316f5844544d794d4459784d7a45314e444d7a0a4d316f77634445694d434147413155454177775a535735305a5777675530645949464244537942445a584a3061575a70593246305a5445614d426747413155450a43677752535735305a577767513239796347397959585270623234784644415342674e564241634d43314e68626e526849454e7359584a684d517377435159440a5651514944414a445154454c4d416b474131554542684d4356564d775754415442676371686b6a4f5051494242676771686b6a4f50514d4242774e43414154620a664e33314c643255696b65667539487a3458613356454b437243514844436e38715550573442464d434a613471716b534775484b42676d5a67506c735a6766510a72535644584a58572b4465533958597539366e486f3449444454434341776b77487759445652306a42426777466f41556c5739647a62306234656c4153636e550a3944504f4156634c336c5177617759445652306642475177596a42676f46366758495a616148523063484d364c79396863476b7564484a316333526c5a484e6c0a636e5a705932567a4c6d6c75644756734c6d4e766253397a5a3367765932567964476c6d61574e6864476c76626939324e4339775932746a636d772f593245390a6347786864475a76636d306d5a57356a62325270626d63395a4756794d423047413155644467515742425331415177713739576f78466a6c34702b45446e54640a424b50314a54414f42674e56485138424166384542414d434273417744415944565230544151482f4241497741444343416a6f4743537147534962345451454e0a41515343416973776767496e4d42344743697147534962345451454e41514545454b53374c746d3263303867704f6f4e503452335a3367776767466b42676f710a686b69472b453042445145434d4949425644415142677371686b69472b45304244514543415149424244415142677371686b69472b45304244514543416749420a4244415142677371686b69472b4530424451454341774942416a415142677371686b69472b4530424451454342414942416a415142677371686b69472b4530420a44514543425149424254415242677371686b69472b4530424451454342674943415038774541594c4b6f5a496876684e4151304241676343415141774541594c0a4b6f5a496876684e4151304241676743415149774541594c4b6f5a496876684e4151304241676b43415141774541594c4b6f5a496876684e4151304241676f430a415141774541594c4b6f5a496876684e4151304241677343415141774541594c4b6f5a496876684e4151304241677743415141774541594c4b6f5a496876684e0a4151304241673043415141774541594c4b6f5a496876684e4151304241673443415141774541594c4b6f5a496876684e4151304241673843415141774541594c0a4b6f5a496876684e4151304241684143415141774541594c4b6f5a496876684e4151304241684543415130774877594c4b6f5a496876684e41513042416849450a45415145416749462f7741434141414141414141414141774541594b4b6f5a496876684e4151304241775143414141774641594b4b6f5a496876684e415130420a42415147494b4276414141414d41384743697147534962345451454e4151554b415145774867594b4b6f5a496876684e415130424267515147523579417a6b490a4749756b70764e535132516f546a424542676f71686b69472b453042445145484d4459774541594c4b6f5a496876684e4151304242774542416638774541594c0a4b6f5a496876684e4151304242774942416638774541594c4b6f5a496876684e4151304242774d4241663877436759494b6f5a497a6a304541774944535141770a526749684149564d434856714e4d4b765958412f335439612f4c6f316e376a72497976763849456757526f64557177734169454177586b69547535613646306d0a61786c45493776557461727868745865464d462f53383674777a37436f6b6f3d0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a2d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949436c6a4343416a32674177494241674956414a567658633239472b487051456e4a3150517a7a674658433935554d416f4743437147534d343942414d430a4d476778476a415942674e5642414d4d45556c756447567349464e48574342536232393049454e424d526f77474159445651514b4442464a626e526c624342440a62334a7762334a6864476c76626a45554d424947413155454277774c553246756447456751327868636d4578437a414a42674e564241674d416b4e424d5173770a435159445651514745774a56557a4165467730784f4441314d6a45784d4455774d5442614677307a4d7a41314d6a45784d4455774d5442614d484178496a41670a42674e5642414d4d47556c756447567349464e4857434251513073675547786864475a76636d306751304578476a415942674e5642416f4d45556c75644756730a49454e76636e4276636d4630615739754d5251774567594456515148444174545957353059534244624746795954454c4d416b474131554543417743513045780a437a414a42674e5642415954416c56544d466b77457759484b6f5a497a6a3043415159494b6f5a497a6a304441516344516741454e53422f377432316c58534f0a3243757a7078773734654a423732457944476757357258437478327456544c7136684b6b367a2b5569525a436e71523770734f766771466553786c6d546c4a6c0a65546d693257597a33714f42757a43427544416642674e5648534d4547444157674251695a517a575770303069664f44744a5653763141624f536347724442530a42674e5648523845537a424a4d45656752614244686b466f64485277637a6f764c324e6c636e52705a6d6c6a5958526c63793530636e567a6447566b633256790a646d6c6a5a584d75615735305a577775593239744c306c756447567355306459556d397664454e424c6d526c636a416442674e5648513445466751556c5739640a7a62306234656c4153636e553944504f4156634c336c517744675944565230504151482f42415144416745474d42494741315564457745422f7751494d4159420a4166384341514177436759494b6f5a497a6a30454177494452774177524149675873566b6930772b6936565947573355462f32327561586530594a446a3155650a6e412b546a44316169356343494359623153416d4435786b66545670766f34556f79695359787244574c6d5552344349394e4b7966504e2b0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a2d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949436a7a4343416a53674177494241674955496d554d316c71644e496e7a6737535655723951477a6b6e42717777436759494b6f5a497a6a3045417749770a614445614d4267474131554541777752535735305a5777675530645949464a766233516751304578476a415942674e5642416f4d45556c756447567349454e760a636e4276636d4630615739754d5251774567594456515148444174545957353059534244624746795954454c4d416b47413155454341774351304578437a414a0a42674e5642415954416c56544d423458445445344d4455794d5445774e4455784d466f58445451354d54497a4d54497a4e546b314f566f77614445614d4267470a4131554541777752535735305a5777675530645949464a766233516751304578476a415942674e5642416f4d45556c756447567349454e76636e4276636d46300a615739754d5251774567594456515148444174545957353059534244624746795954454c4d416b47413155454341774351304578437a414a42674e56424159540a416c56544d466b77457759484b6f5a497a6a3043415159494b6f5a497a6a3044415163445167414543366e45774d4449595a4f6a2f69505773437a61454b69370a314f694f534c52466857476a626e42564a66566e6b59347533496a6b4459594c304d784f346d717379596a6c42616c54565978465032734a424b357a6c4b4f420a757a43427544416642674e5648534d4547444157674251695a517a575770303069664f44744a5653763141624f5363477244425342674e5648523845537a424a0a4d45656752614244686b466f64485277637a6f764c324e6c636e52705a6d6c6a5958526c63793530636e567a6447566b63325679646d6c6a5a584d75615735300a5a577775593239744c306c756447567355306459556d397664454e424c6d526c636a416442674e564851344546675155496d554d316c71644e496e7a673753560a55723951477a6b6e4271777744675944565230504151482f42415144416745474d42494741315564457745422f7751494d4159424166384341514577436759490a4b6f5a497a6a3045417749445351417752674968414f572f35516b522b533943695344634e6f6f774c7550524c735747662f59693747535839344267775477670a41694541344a306c72486f4d732b586f356f2f7358364f39515778485241765a55474f6452513763767152586171493d0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
            "signature_hex_encoded": "b91c14ed922ec4ed654896a6b880d353cdf500c00c7e131088cade5df01eda78676c43d50495aea7746f246fc0807bf13433851aaba3f7de6561f9bc7caf890f",
                "verifying_key_hex_encoded": "04a47655d5e06693fca93d38aabf2827caff30779e2cf1f030cd42cb06bba56d56c35cc1a5d015ab07bcbb93a543d51fc60a579d7695b70d4ea820a5d07a0eb275",
                    "verifying_key_certificate_chain": [
                        "-----BEGIN CERTIFICATE-----\nMIIBRDCB6qADAgECAhQj45Yoq1GX70/JuOlwcT7qshXxyjAKBggqhkjOPQQDAjA5\nMTcwNQYDVQQDDC4wNzQxZTgxZDRiYmVjZGVjOTg1ODljNjE0NTE5MjYxZWY1NTg0\nNDljLnBoYWxhMB4XDTc1MDEwMTAwMDAwMFoXDTI2MDcyNzIyMzQxN1owCzEJMAcG\nA1UEAwwAMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEpHZV1eBmk/ypPTiqvygn\nyv8wd54s8fAwzULLBrulbVbDXMGl0BWrB7y7k6VD1R/GCleddpW3DU6oIKXQeg6y\ndTAKBggqhkjOPQQDAgNJADBGAiEA9kqZFyWsEByobrG/7M88+8pSw0xsvEttk39b\nHl0OJnMCIQD+kQzGWDlfHhJHSh7GM0eUKiz/9nGw2HSwfyc9iiabdg==\n-----END CERTIFICATE-----\n",
                        "-----BEGIN CERTIFICATE-----\nMIIBqTCCAU+gAwIBAgIUBqkLlk2xJK/S1cse703GHd0UUH4wCgYIKoZIzj0EAwIw\nOTE3MDUGA1UEAwwuMDc0MWU4MWQ0YmJlY2RlYzk4NTg5YzYxNDUxOTI2MWVmNTU4\nNDQ5Yy5waGFsYTAeFw03NTAxMDEwMDAwMDBaFw0yNjA3MjcyMjMzNThaMDkxNzA1\nBgNVBAMMLjA3NDFlODFkNGJiZWNkZWM5ODU4OWM2MTQ1MTkyNjFlZjU1ODQ0OWMu\ncGhhbGEwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAAQ1nBwQYiwAAbzr2VqaPicF\nO7qv+GQLzU3uolleacBUrONT1vL+euxF31dXBCXQBrxopgOsAcc1IqIGRMy0p+gO\nozUwMzAdBgNVHQ4EFgQUhKHyNeWmH8JgtcNKKzZLPvbKV8wwEgYDVR0TAQH/BAgw\nBgEB/wIBATAKBggqhkjOPQQDAgNIADBFAiEA6UszXSl06UVo0sstRUVWOBD9P6JZ\niRoXejGkuI0nJTICIC7G/2BU8zXW3GCdnxIQ/VzcItlGrZ+gCl3d0jYtZsm3\n-----END CERTIFICATE-----\n"
                    ]
    }
}
}"

*/

// Pass the response body from TEE directly into this function to verify the attestations
async function verifyTeeResponse(
    responseBody: string,
): Promise<Boolean> {
    // parse the response body to check if it contains attestation field
    const response = JSON.parse(responseBody);
    const isValid = await checkTeeResponseFields(responseBody);
    if (!isValid) {
        return false;
    }
    const attestation = await checkAttestationFields(response.attestation);
    if (!attestation) {
        return false;
    }


    // extract the reportData from the attestation
    const [isQuoteValid, reportData] = await verifyQuoteOnChain(attestation.quote);
    if (!isQuoteValid) {
        console.error("Quote verification on chain failed");
        return false;
    }

    // check if the reportData matches the expected value 
    const isReportDataValid = await assertReportData(reportData, response.verification);

    if (!isReportDataValid) {
        console.error("Report data validation failed");
        return false;
    }

    const isSignatureValid = await verifyQuoteSignature(
        attestation.quote,
        attestation.signature_hex_encoded,
        attestation.verifying_key_hex_encoded
    );

    if (!isSignatureValid) {
        console.error("Signature verification failed");
        return false;
    }




    return true;
}

async function verifyQuoteSignature(
    quote: string,
    signatureHexEncoded: string,
    verifyingKeyHexEncoded: string
): Promise<boolean> {


    // Step 1: encode the quote to retrieve msg
    // let msg = {...}

    // Step 2: Given signature encoded as hex, decode it and get signature
    // let signature = {...}


    // Step 3: Given verifying key encoded as hex, decode it and contstruct verifying key
    // let verifyingKey = {...}

    // Step 4: Verify the signature using the verifying key and the message
    // let isValid = {...}
    // eg.
    /*
    const isValid = await crypto.subtle.verify(
        { name: "ECDSA", hash: { name: "SHA-256" } },
            verifyingKey,
            signature,
            messageBytes
        );
    */

    return true;
}

async function assertReportData(
    expectedReportData: string,
    verificationBody: any // ← raw JSON string of verification body
): Promise<boolean> {

    let actualReportData = await prepareReportDataFromVerificationBody(verificationBody);

    const match = actualReportData === expectedReportData;
    if (!match) {
        console.error("Report data does not match");
        console.error("Expected:", expectedReportData);
        console.error("Actual  :", actualReportData);
    }

    return match;
}


async function prepareReportDataFromVerificationBody(
    verificationBody: any, // raw JSON string of verification body
): Promise<string> {
    // Step 1: Hex-encode the verification result 
    /*
    "Ok": {
        "is_valid": true,
            "server_name": "openbanking-api-826260723607.europe-west3.run.app",
                "score": "59",
                    "verifying_key": "037b48f19c139b6888fb5e383a4d72c2335186fd5858e7ae743ab4bf8e071b06e7",
                        "sent_hex_encoded": "4745542068747470733a2f2f6f70656e62616e6b696e672d6170692d3832363236303732333630372e6575726f70652d77657374332e72756e2e6170702f75736572732f6161612f6372656469742d73636f726520485454502f312e310d0a686f73743a206f70656e62616e6b696e672d6170692d3832363236303732333630372e6575726f70652d77657374332e72756e2e6170700d0a636f6e6e656374696f6e3a20636c6f73650d0a636f6e74656e742d6c656e6774683a20300d0a0d0a",
                            "sent_readable": "GET https://openbanking-api-826260723607.europe-west3.run.app/users/aaa/credit-score HTTP/1.1\r\nhost: openbanking-api-826260723607.europe-west3.run.app\r\nconnection: close\r\ncontent-length: 0\r\n\r\n",
                                "recv_hex_encoded": "485454502f312e3120323030204f4b0d0a5858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858587365727665723a20476f6f676c652046726f6e74656e640d0a416c742d5376633a2068333d223a343433223b206d613d323539323030302c68332d32393d223a343433223b206d613d323539323030300d0a436f6e6e656374696f6e3a20636c6f73650d0a5472616e736665722d456e636f64696e673a206368756e6b65640d0a585858585858582270617468223a222f75736572732f6161612f6372656469742d73636f72652258226d657373616765223a224372656469742073636f726520726574726965766564207375636365737366756c6c792258585858585858585822757365724964223a2261616122585858585858585858582276616c7565223a353958585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858",
                                    "recv_readable": "HTTP/1.1 200 OK\r\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXserver: Google Frontend\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\nConnection: close\r\nTransfer-Encoding: chunked\r\nXXXXXXX\"path\":\"/users/aaa/credit-score\"X\"message\":\"Credit score retrieved successfully\"XXXXXXXXX\"userId\":\"aaa\"XXXXXXXXXX\"value\":59XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
                                        "time": "2025-06-20T19:56:17+00:00"
    }
    */
    // Step 2: Hash the hex string using SHA-512
    // Step 3: Hex-encode the hash again
    // Step 4: Prepend `0x`
    // const actualReportData = `0x${hashHex}`;

    // return expectedReportData for now
    return smartContractExtractedReportData;
}

async function checkTeeResponseFields(
    responseBody: any,
): Promise<Boolean> {
    if (!responseBody.verification) {
        console.error("Missing verification field in response");
        return false;
    }
    if (!responseBody.attestation) {
        console.error("Missing attestation field in response");
        return false;
    }

    return true;
}

async function checkAttestationFields(
    attestation: any,
): Promise<any | null> {
    if (!attestation || !attestation.Ok) {
        console.error("Invalid attestation format");
        return null;
    }

    const quote = attestation.Ok.quote;
    if (!quote) {
        console.error("Missing quote in attestation");
        return null;
    }

    // Check for other required fields in the quote
    if (!quote.signature_hex_encoded || !quote.verifying_key_hex_encoded) {
        console.error("Missing signature or verifying key in quote");
        return null;
    }
    if (!quote.verifying_key_certificate_chain || quote.verifying_key_certificate_chain.length === 0) {
        console.error("Missing verifying key certificate chain in quote");
        return null;
    }
    return attestation.Ok;
}

async function verifyQuoteOnChain(
    quote: string,
): Promise<[Boolean, string]> {
    // call to smart contract to verify the quote
    // This is a placeholder for the actual implementation
    console.log("Verifying quote on chain:", quote);
    return [true, smartContractExtractedReportData];
    //call 
}
