
import crypto from "crypto";

let smartContractExtractedReportData = "0x19636e6b9fb118f5379ee2090309c550a172f8e4ecadef646bb958f9e7442b830c6324560ac28100e588507475a73ccefb05c1b3d3b0f5970f08c70fcc33e008"

/*
let teeResponse = {
    "verification": {
        "Ok": {
            "is_valid": true,
            "server_name": "openbanking-api-826260723607.europe-west3.run.app",
            "score": "59",
            "verifying_key": "037b48f19c139b6888fb5e383a4d72c2335186fd5858e7ae743ab4bf8e071b06e7",
            "sent_hex_encoded": "4745542068747470733a2f2f6f70656e62616e6b696e672d6170692d3832363236303732333630372e6575726f70652d77657374332e72756e2e6170702f75736572732f6161612f6372656469742d73636f726520485454502f312e310d0a686f73743a206f70656e62616e6b696e672d6170692d3832363236303732333630372e6575726f70652d77657374332e72756e2e6170700d0a636f6e6e656374696f6e3a20636c6f73650d0a636f6e74656e742d6c656e6774683a20300d0a0d0a",
            "sent_readable": "GET https://openbanking-api-826260723607.europe-west3.run.app/users/aaa/credit-score HTTP/1.1\r\nhost: openbanking-api-826260723607.europe-west3.run.app\r\nconnection: close\r\ncontent-length: 0\r\n\r\n",
            "recv_hex_encoded": "485454502f312e3120323030204f4b0d0a5858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858587365727665723a20476f6f676c652046726f6e74656e640d0a416c742d5376633a2068333d223a343433223b206d613d323539323030302c68332d32393d223a343433223b206d613d323539323030300d0a436f6e6e656374696f6e3a20636c6f73650d0a5472616e736665722d456e636f64696e673a206368756e6b65640d0a585858585858582270617468223a222f75736572732f6161612f6372656469742d73636f72652258226d657373616765223a224372656469742073636f726520726574726965766564207375636365737366756c6c792258585858585858585822757365724964223a2261616122585858585858585858582276616c7565223a353958585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858",
            "recv_readable": "HTTP/1.1 200 OK\r\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXserver: Google Frontend\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\nConnection: close\r\nTransfer-Encoding: chunked\r\nXXXXXXX\"path\":\"/users/aaa/credit-score\"X\"message\":\"Credit score retrieved successfully\"XXXXXXXXX\"userId\":\"aaa\"XXXXXXXXXX\"value\":59XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
            "time": "2025-06-20T19:56:17+00:00"
        }
    },
    "attestation": {
        "Ok": {
            "quote": "",
            "signature_hex_encoded": "3b756c4adfce4063cd58b65bbe6e6fe605b9f36f8b1b526d205d6c8b0913ab5f1a88abe837fdf0113340a165b105d860281dd1edcd658b2243739ac5f027f028",
            "verifying_key_hex_encoded": "04d0c782aecac89df1e29481de5f9616811ad2280c6f997a9ed089045560b2150f0b7549cb12ff3717e3be745d1fc290191864b39220dc563c8cd0c995ea70f6c0",
            "verifying_key_certificate_chain": [
                "-----BEGIN CERTIFICATE-----\nMIIBRDCB6qADAgECAhRsaQOJEMb2qWgKdGFyQE0AmGzwYTAKBggqhkjOPQQDAjA5\nMTcwNQYDVQQDDC41YmM3MTFkMjYxMDU2NWNiYzk2MDk1MjdhYmExYTc4NDZjNmYy\nMjM3LnBoYWxhMB4XDTc1MDEwMTAwMDAwMFoXDTI2MDgwNjE2NDQwOFowCzEJMAcG\nA1UEAwwAMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE0MeCrsrInfHilIHeX5YW\ngRrSKAxvmXqe0IkEVWCyFQ8LdUnLEv83F+O+dF0fwpAZGGSzkiDcVjyM0MmV6nD2\nwDAKBggqhkjOPQQDAgNJADBGAiEAnYL0TLQBE7ubziKj+C64+RFAwIgfbhhkIuZ8\nP6z9oGQCIQDlGQFkKt8IvrS4+dCoXMkjM3p8TymAgX1OyfsTH8pIUg==\n-----END CERTIFICATE-----\n",
                "-----BEGIN CERTIFICATE-----\nMIIBqTCCAU+gAwIBAgIUVkiV8KC1QgYZ2DzqGkGwTMX0d/gwCgYIKoZIzj0EAwIw\nOTE3MDUGA1UEAwwuNWJjNzExZDI2MTA1NjVjYmM5NjA5NTI3YWJhMWE3ODQ2YzZm\nMjIzNy5waGFsYTAeFw03NTAxMDEwMDAwMDBaFw0yNjA4MDYxNjQzNDhaMDkxNzA1\nBgNVBAMMLjViYzcxMWQyNjEwNTY1Y2JjOTYwOTUyN2FiYTFhNzg0NmM2ZjIyMzcu\ncGhhbGEwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAAT9HIonjZ12d+Hn1Bifgm2b\nzjv/LxfbCvE9jpbMOFp+si8yQy0Zd5gTiXQcvlAK7Vx92vBkGefg+OaQ6+F9PQcz\nozUwMzAdBgNVHQ4EFgQUKu2SfbCvsKHcPVfU4Q6sVbkbRakwEgYDVR0TAQH/BAgw\nBgEB/wIBATAKBggqhkjOPQQDAgNIADBFAiBPxB3pfGD5vtzjg0S1HNTbalcQWV3U\njnk0cLlPPpi29QIhAJhHljqK7X1f5EEP+LwHBn+7AsHSGE/hV292GGvZ1aJI\n-----END CERTIFICATE-----\n"
            ]
        }
    }
}
*/

// Pass the response body from TEE directly into this function to verify the attestations
async function verifyTeeResponse(
    responseBody: string,
): Promise<Boolean> {
    // parse the response body to check if it contains attestation field
    const response = JSON.parse(responseBody);
    const isValid = await checkTeeResponseFields(responseBody);
    if (!isValid) {
        return false;
    }
    const attestation = await checkAttestationFields(response.attestation);
    if (!attestation) {
        return false;
    }


    // extract the reportData from the attestation
    const [isQuoteValid, reportData] = await verifyQuoteOnChain(attestation.quote);
    if (!isQuoteValid) {
        console.error("Quote verification on chain failed");
        return false;
    }

    // check if the reportData matches the expected value 
    const isReportDataValid = await assertReportData(reportData, response.verification);

    if (!isReportDataValid) {
        console.error("Report data validation failed");
        return false;
    }

    const isSignatureValid = await verifyQuoteSignature(
        attestation.quote,
        attestation.signature_hex_encoded,
        attestation.verifying_key_hex_encoded
    );

    if (!isSignatureValid) {
        console.error("Signature verification failed");
        return false;
    }




    return true;
}

async function verifyQuoteSignature(
    quote: string,
    signatureHexEncoded: string,
    verifyingKeyHexEncoded: string
): Promise<boolean> {


    // Step 1: encode the quote to retrieve msg
    // let msg = {...}

    // Step 2: Given signature encoded as hex, decode it and get signature
    // let signature = {...}


    // Step 3: Given verifying key encoded as hex, decode it and contstruct verifying key
    // let verifyingKey = {...}

    // Step 4: Verify the signature using the verifying key and the message
    // let isValid = {...}
    // eg.
    /*
    const isValid = await crypto.subtle.verify(
        { name: "ECDSA", hash: { name: "SHA-256" } },
            verifyingKey,
            signature,
            messageBytes
        );
    */

    return true;
}

async function assertReportData(
    expectedReportData: string,
    verificationBody: any // ← raw JSON string of verification body
): Promise<boolean> {

    let actualReportData = await prepareReportDataFromVerificationBody(verificationBody);

    const match = actualReportData === expectedReportData;
    if (!match) {
        console.error("Report data does not match");
        console.error("Expected:", expectedReportData);
        console.error("Actual  :", actualReportData);
    }

    return match;
}


async function prepareReportDataFromVerificationBody(
    verificationBody: any, // raw JSON string of verification body
): Promise<string> {
    // Step 1: Hex-encode the verification result 
    /*
    "Ok": {
            "is_valid": true,
            "server_name": "openbanking-api-826260723607.europe-west3.run.app",
            "score": "59",
            "verifying_key": "037b48f19c139b6888fb5e383a4d72c2335186fd5858e7ae743ab4bf8e071b06e7",
            "sent_hex_encoded": "4745542068747470733a2f2f6f70656e62616e6b696e672d6170692d3832363236303732333630372e6575726f70652d77657374332e72756e2e6170702f75736572732f6161612f6372656469742d73636f726520485454502f312e310d0a686f73743a206f70656e62616e6b696e672d6170692d3832363236303732333630372e6575726f70652d77657374332e72756e2e6170700d0a636f6e6e656374696f6e3a20636c6f73650d0a636f6e74656e742d6c656e6774683a20300d0a0d0a",
            "sent_readable": "GET https://openbanking-api-826260723607.europe-west3.run.app/users/aaa/credit-score HTTP/1.1\r\nhost: openbanking-api-826260723607.europe-west3.run.app\r\nconnection: close\r\ncontent-length: 0\r\n\r\n",
            "recv_hex_encoded": "485454502f312e3120323030204f4b0d0a5858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858587365727665723a20476f6f676c652046726f6e74656e640d0a416c742d5376633a2068333d223a343433223b206d613d323539323030302c68332d32393d223a343433223b206d613d323539323030300d0a436f6e6e656374696f6e3a20636c6f73650d0a5472616e736665722d456e636f64696e673a206368756e6b65640d0a585858585858582270617468223a222f75736572732f6161612f6372656469742d73636f72652258226d657373616765223a224372656469742073636f726520726574726965766564207375636365737366756c6c792258585858585858585822757365724964223a2261616122585858585858585858582276616c7565223a353958585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858",
            "recv_readable": "HTTP/1.1 200 OK\r\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXserver: Google Frontend\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\nConnection: close\r\nTransfer-Encoding: chunked\r\nXXXXXXX\"path\":\"/users/aaa/credit-score\"X\"message\":\"Credit score retrieved successfully\"XXXXXXXXX\"userId\":\"aaa\"XXXXXXXXXX\"value\":59XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
            "time": "2025-06-20T19:56:17+00:00"
        }
    */
    // Step 2: Hash the hex string using SHA-512
    // Step 3: Hex-encode the hash again
    // Step 4: Prepend `0x`
    // const actualReportData = `0x${hashHex}`;

    // return expectedReportData for now
    return smartContractExtractedReportData;
}

async function checkTeeResponseFields(
    responseBody: any,
): Promise<Boolean> {
    if (!responseBody.verification) {
        console.error("Missing verification field in response");
        return false;
    }
    if (!responseBody.attestation) {
        console.error("Missing attestation field in response");
        return false;
    }

    return true;
}

async function checkAttestationFields(
    attestation: any,
): Promise<any | null> {
    if (!attestation || !attestation.Ok) {
        console.error("Invalid attestation format");
        return null;
    }

    const quote = attestation.Ok.quote;
    if (!quote) {
        console.error("Missing quote in attestation");
        return null;
    }

    // Check for other required fields in the quote
    if (!quote.signature_hex_encoded || !quote.verifying_key_hex_encoded) {
        console.error("Missing signature or verifying key in quote");
        return null;
    }
    if (!quote.verifying_key_certificate_chain || quote.verifying_key_certificate_chain.length === 0) {
        console.error("Missing verifying key certificate chain in quote");
        return null;
    }
    return attestation.Ok;
}

async function verifyQuoteOnChain(
    quote: string,
): Promise<[Boolean, string]> {
    // call to smart contract to verify the quote
    // This is a placeholder for the actual implementation
    console.log("Verifying quote on chain:", quote);
    // Do not forget to add prefix "0x" to the quote before passing to contract
    // eg. 04000200810 -> 0x04000200810
    return [true, smartContractExtractedReportData];
    //call 
}
