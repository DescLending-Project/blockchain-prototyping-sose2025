diff --git a/Lending (BC) + frontend/loan-management/BLOCK_TAG_ERROR_SOLUTION.md b/Lending (BC) + frontend/loan-management/BLOCK_TAG_ERROR_SOLUTION.md
deleted file mode 100644
index 0bb99f1..0000000
--- a/Lending (BC) + frontend/loan-management/BLOCK_TAG_ERROR_SOLUTION.md	
+++ /dev/null
@@ -1,159 +0,0 @@
-# Block Tag Error - Complete Solution
-
-## Error Description
-```
-Contract initialization error: Error: Contract call failed. Please check if contracts are properly deployed and network is correct. Details: could not coalesce error (error={ "code": -32603, "data": { "cause": null, "code": -32000, "data": { "data": null, "message": "Received invalid block tag 98. Latest block number is 29" }, "message": "Received invalid block tag 98. Latest block number is 29" }, "message": "Internal JSON-RPC error." }
-```
-
-## Root Cause
-This error occurs when:
-1. **Hardhat node was restarted** ‚Üí All deployed contracts are destroyed
-2. **Frontend has cached addresses** from previous deployment (block 98)
-3. **Current node only has 29 blocks** ‚Üí Address references invalid blocks
-4. **Frontend tries to query old contract addresses** ‚Üí Block tag mismatch error
-
-## ‚úÖ Complete Solution Applied
-
-### 1. **Enhanced Error Detection**
-- Added specific detection for block tag errors
-- Clear error messages explaining the issue
-- Automatic identification of network state mismatches
-
-### 2. **Automatic State Recovery**
-- Frontend automatically clears cached state when block errors detected
-- Provides clear instructions for resolution
-- Added "Clear Cache & Reload" button for manual recovery
-
-### 3. **Deployment Verification Script**
-Created `scripts/check-deployment.js` to verify deployment status:
-```bash
-node scripts/check-deployment.js
-```
-
-### 4. **Improved User Experience**
-- Better error messages with specific solutions
-- Automatic cache clearing when issues detected
-- Clear next steps provided to user
-
-## üîß How to Fix This Error
-
-### **Step 1: Redeploy Contracts**
-```bash
-# Make sure Hardhat node is running
-cd "Lending (BC) + frontend/loan-management/backend"
-npx hardhat node
-
-# In new terminal - Deploy contracts
-npx hardhat run scripts/deployAll2.js --network localhost
-```
-
-### **Step 2: Verify Deployment**
-```bash
-# Check if contracts are properly deployed
-node scripts/check-deployment.js
-```
-
-### **Step 3: Refresh Frontend**
-```bash
-# Start/refresh frontend
-cd "Lending (BC) + frontend/loan-management/frontend"
-npm run dev
-
-# In browser:
-# 1. Refresh page (F5)
-# 2. Reconnect wallet
-# 3. If error persists, click "Clear Cache & Reload" button
-```
-
-## üõ†Ô∏è New Tools Added
-
-### 1. **Deployment Checker Script**
-`backend/scripts/check-deployment.js`:
-- ‚úÖ Verifies all contracts are deployed
-- ‚úÖ Checks address file synchronization
-- ‚úÖ Provides clear status report
-- ‚úÖ Shows next steps if issues found
-
-### 2. **Enhanced Frontend Error Handling**
-- ‚úÖ Detects block tag errors specifically
-- ‚úÖ Provides "Clear Cache & Reload" button
-- ‚úÖ Shows deployment command in error message
-- ‚úÖ Automatically clears invalid cached state
-
-### 3. **Improved Deployment Script**
-- ‚úÖ Clear success message with next steps
-- ‚úÖ Automatic frontend address updates
-- ‚úÖ Better error reporting
-
-## üîç Error Prevention
-
-### **Always Follow This Sequence:**
-1. **Start Hardhat node** ‚Üí `npx hardhat node`
-2. **Deploy contracts** ‚Üí `npx hardhat run scripts/deployAll2.js --network localhost`
-3. **Verify deployment** ‚Üí `node scripts/check-deployment.js`
-4. **Start frontend** ‚Üí `cd ../frontend && npm run dev`
-5. **Connect wallet** ‚Üí Refresh browser and reconnect
-
-### **When Hardhat Node Restarts:**
-- ‚ö†Ô∏è **Always redeploy contracts** - Node is stateless
-- ‚ö†Ô∏è **Don't just restart frontend** - Addresses will be invalid
-- ‚ö†Ô∏è **Check deployment status** before connecting wallet
-
-## üìã Verification Checklist
-
-### ‚úÖ **Successful Deployment Should Show:**
-```
-üéâ DEPLOYMENT COMPLETED SUCCESSFULLY!
-üìã Next Steps:
-   1. Frontend addresses have been automatically updated
-   2. Start/refresh your frontend: cd ../frontend && npm run dev
-   3. Refresh your browser and reconnect your wallet
-   4. Test the UserHistory functionality in the Dashboard
-```
-
-### ‚úÖ **Frontend Should Connect Without Errors:**
-```
-Initializing contracts for network: localhost (chainId: 31337)
-‚úÖ Contracts initialized successfully
-```
-
-### ‚úÖ **Deployment Check Should Show:**
-```
-üéâ All contracts are properly deployed!
-‚úÖ Frontend should be able to connect successfully.
-‚úÖ Address files are in sync.
-```
-
-## üö® Troubleshooting
-
-### **If Error Persists:**
-1. **Clear browser cache completely**
-2. **Clear localStorage**: Open DevTools ‚Üí Application ‚Üí Storage ‚Üí Clear All
-3. **Restart browser**
-4. **Verify Hardhat node is running**: Check terminal for active node
-5. **Redeploy contracts**: Run deployment script again
-
-### **If Deployment Fails:**
-1. **Check Hardhat node is running**
-2. **Verify no other processes using port 8545**
-3. **Clear Hardhat cache**: `npx hardhat clean`
-4. **Recompile contracts**: `npx hardhat compile`
-
-## üìä Current Status: ‚úÖ RESOLVED
-
-The system now:
-- ‚úÖ **Detects block tag errors** and provides clear solutions
-- ‚úÖ **Automatically clears invalid cached state**
-- ‚úÖ **Provides deployment verification tools**
-- ‚úÖ **Shows clear error messages with next steps**
-- ‚úÖ **Includes UserHistory functionality**
-- ‚úÖ **Handles network state mismatches gracefully**
-
-## üéØ Next Steps
-
-1. **Follow the fix steps above** to resolve current error
-2. **Test UserHistory functionality** in Dashboard
-3. **Verify borrow/repay operations** update history correctly
-4. **Use deployment checker** before connecting frontend
-
-The implementation is now robust and provides clear guidance for resolving deployment sync issues!
diff --git a/Lending (BC) + frontend/loan-management/DEPLOYMENT_SYNC_ISSUE.md b/Lending (BC) + frontend/loan-management/DEPLOYMENT_SYNC_ISSUE.md
deleted file mode 100644
index 647df6d..0000000
--- a/Lending (BC) + frontend/loan-management/DEPLOYMENT_SYNC_ISSUE.md	
+++ /dev/null
@@ -1,121 +0,0 @@
-# Frontend Contract Deployment Sync Issue - SOLVED
-
-## Problem
-The frontend was showing this error:
-```
-MetaMask - RPC Error: Internal JSON-RPC error.
-Contract initialization error: Error: missing revert data
-```
-
-## Root Cause
-The error occurs when:
-1. **Hardhat node is restarted** - This destroys all deployed contracts
-2. **Frontend still has old contract addresses** - Cached in `addresses.json` and `contractAddresses.js`
-3. **Frontend tries to call functions on non-existent contracts** - Results in "missing revert data" error
-
-## Solution Applied
-
-### 1. **Enhanced Error Handling**
-- Added contract deployment verification before function calls
-- Better error messages to identify the specific issue
-- Automatic cache clearing when deployment mismatch is detected
-
-### 2. **Contract Existence Check**
-```javascript
-// Check if there's code at the contract address
-const code = await provider.getCode(addresses.liquidityPool);
-if (code === '0x') {
-  throw new Error(`No contract deployed at LiquidityPool address ${addresses.liquidityPool}. Please redeploy contracts.`);
-}
-```
-
-### 3. **Automatic State Clearing**
-When deployment issues are detected, the frontend now automatically:
-- Clears localStorage cache
-- Resets all contract instances
-- Provides clear instructions to the user
-
-## How to Fix When This Happens
-
-### **Step 1: Restart and Redeploy**
-```bash
-# 1. Stop the current Hardhat node (Ctrl+C)
-
-# 2. Start fresh Hardhat node
-cd "Lending (BC) + frontend/loan-management/backend"
-npx hardhat node
-
-# 3. Deploy contracts (in new terminal)
-npx hardhat run scripts/deployAll2.js --network localhost
-```
-
-### **Step 2: Refresh Frontend**
-```bash
-# 4. The deployment script automatically updates frontend addresses
-# 5. Refresh the browser page (F5 or Ctrl+R)
-# 6. Reconnect your wallet
-```
-
-## Prevention
-
-### **Always Redeploy After Node Restart**
-- Hardhat node is **stateless** - restarting destroys all contracts
-- **Always run deployment script** after restarting the node
-- The deployment script automatically updates frontend addresses
-
-### **Check for Updated Addresses**
-After deployment, verify these files are updated:
-- `frontend/src/addresses.json`
-- `frontend/src/contractAddresses.js`
-
-## Verification
-
-### **Successful Deployment Should Show:**
-```bash
-‚úÖ LiquidityPool deployed at: 0x...
-‚úÖ LendingManager deployed at: 0x...
-‚úÖ All contracts initialized successfully
-Wrote addresses to frontend/src/addresses.json
-Copied TimelockController ABI from OpenZeppelin
-copy-artifacts.js finished
-```
-
-### **Frontend Should Connect Without Errors:**
-```
-Initializing contracts for network: localhost (chainId: 31337)
-‚úÖ Contracts initialized successfully
-```
-
-## Additional Improvements Made
-
-### 1. **Fixed TimelockController ABI Issue**
-- Updated copy-artifacts script to handle OpenZeppelin contracts
-- TimelockController ABI now properly copied to frontend
-
-### 2. **Better Error Messages**
-- Clear indication when contracts aren't deployed
-- Specific instructions for resolution
-- Automatic cache clearing to prevent stuck states
-
-### 3. **Robust Contract Initialization**
-- Pre-flight checks before contract calls
-- Graceful handling of network mismatches
-- Better user feedback during connection process
-
-## Current Status: ‚úÖ RESOLVED
-
-The frontend now:
-- ‚úÖ Properly detects when contracts aren't deployed
-- ‚úÖ Provides clear error messages with solutions
-- ‚úÖ Automatically clears cached state when needed
-- ‚úÖ Handles OpenZeppelin contract ABIs correctly
-- ‚úÖ Includes UserHistory functionality
-
-## Next Steps
-
-1. **Test the fix** by following the deployment steps above
-2. **Verify UserHistory tab** works in the frontend Dashboard
-3. **Test borrow/repay operations** to ensure history tracking works
-4. **Check that all contract interactions** work properly
-
-The implementation is now robust and should handle deployment sync issues gracefully!
diff --git a/Lending (BC) + frontend/loan-management/FINAL_MOCK_TRANSACTIONS_FIX.md b/Lending (BC) + frontend/loan-management/FINAL_MOCK_TRANSACTIONS_FIX.md
deleted file mode 100644
index 2f72f76..0000000
--- a/Lending (BC) + frontend/loan-management/FINAL_MOCK_TRANSACTIONS_FIX.md	
+++ /dev/null
@@ -1,215 +0,0 @@
-# Final Mock Transactions Fix - Complete Solution
-
-## Issues Fixed
-
-### 1. **SyntaxError: Identifier 'glintTokenAddress' already declared**
-**Fixed**: Removed duplicate declaration at line 220
-
-### 2. **Transaction reverted without a reason string**
-**Root Causes & Fixes**:
-
-#### A. **Timelock Gas Issue**
-- **Problem**: Timelock contract had no ETH for gas fees
-- **Fix**: Added ETH funding to timelock OR use deployer for setup operations
-
-#### B. **Missing Prerequisites**
-- **Problem**: Price feed, collateral allowance, credit scores not properly set
-- **Fix**: Enhanced prerequisites setup section
-
-#### C. **Insufficient Error Handling**
-- **Problem**: No debugging information for failed transactions
-- **Fix**: Added comprehensive error handling and static call fallbacks
-
-## Complete Fixes Applied
-
-### 1. **Fixed Variable Declaration**
-```javascript
-// BEFORE (line 220):
-const glintTokenAddress = addresses.GlintToken; // ‚ùå Duplicate declaration
-
-// AFTER:
-// glintTokenAddress already declared above ‚úÖ
-```
-
-### 2. **Enhanced Prerequisites Setup**
-```javascript
-// Added comprehensive setup section:
-console.log('üîß Setting up borrowing prerequisites...');
-
-// Ensure pool has sufficient funds
-const poolBalance = await LiquidityPool.getBalance();
-if (poolBalance < ethers.parseEther('5')) {
-    await deployer.sendTransaction({
-        to: await LiquidityPool.getAddress(),
-        value: ethers.parseEther('10')
-    });
-}
-
-// Setup credit scores for all borrowers
-const borrowersToSetup = [borrower1, borrower2, liquidationBorrower];
-for (const borrower of borrowersToSetup) {
-    const currentScore = await LiquidityPool.creditScore(borrower.address);
-    if (currentScore === 0n) {
-        await LiquidityPool.connect(deployer).setCreditScore(borrower.address, 85);
-    }
-}
-
-// Ensure GLINT token is set up as collateral
-const isAllowed = await LiquidityPool.isAllowedCollateral(glintTokenAddress);
-if (!isAllowed) {
-    await LiquidityPool.connect(deployer).setAllowedCollateral(glintTokenAddress, true);
-}
-```
-
-### 3. **Simplified Admin Operations**
-```javascript
-// BEFORE: Using timelock for all operations (gas issues)
-await LiquidityPool.connect(timelockSigner).setCreditScore(borrower1.address, 80);
-
-// AFTER: Using deployer for setup operations
-await LiquidityPool.connect(deployer).setCreditScore(borrower1.address, 80);
-```
-
-### 4. **Enhanced Error Handling**
-```javascript
-try {
-    // Check prerequisites before borrow
-    const existingDebt = await LiquidityPool.userDebt(borrower1.address);
-    const creditScore = await LiquidityPool.creditScore(borrower1.address);
-    const collateralValue = await LiquidityPool.getTotalCollateralValue(borrower1.address);
-    const borrowTerms = await LiquidityPool.getBorrowTerms(borrower1.address);
-    
-    console.log(`  Existing debt: ${ethers.formatEther(existingDebt)} ETH`);
-    console.log(`  Credit score: ${creditScore}`);
-    console.log(`  Collateral value: ${ethers.formatEther(collateralValue)} ETH`);
-    console.log(`  Max loan amount: ${ethers.formatEther(borrowTerms[2])} ETH`);
-    
-    await LiquidityPool.connect(borrower1).borrow(borrowAmount1, nullifier1);
-    console.log('  ‚úÖ Borrow successful');
-    
-} catch (error) {
-    console.log(`  ‚ùå Borrow failed: ${error.message}`);
-    
-    // Try static call for better error info
-    try {
-        await LiquidityPool.connect(borrower1).borrow.staticCall(borrowAmount1, nullifier1);
-    } catch (staticError) {
-        console.log(`  Static call error: ${staticError.message}`);
-    }
-    throw error;
-}
-```
-
-## Testing Tools Created
-
-### 1. **Simple Borrow Test** (`scripts/simple-borrow-test.js`)
-- Minimal test focusing only on borrow operation
-- Step-by-step setup and execution
-- Clear success/failure reporting
-
-### 2. **Diagnostic Script** (`scripts/diagnose-borrow-issue.js`)
-- Comprehensive diagnosis of borrow issues
-- Tests multiple borrow amounts
-- Detailed prerequisite checking
-
-## How to Run the Fixed Scripts
-
-### **Option 1: Run Fixed Mock Transactions**
-```bash
-cd "Lending (BC) + frontend/loan-management/backend"
-
-# Ensure contracts are deployed
-npx hardhat run scripts/deployAll2.js --network localhost
-
-# Run the fixed mock transactions
-npx hardhat run scripts/mockTransactions.js --network localhost
-```
-
-### **Option 2: Run Simple Test First**
-```bash
-# Test just the borrow operation
-npx hardhat run scripts/simple-borrow-test.js --network localhost
-
-# If successful, then run full mock transactions
-npx hardhat run scripts/mockTransactions.js --network localhost
-```
-
-### **Option 3: Run Diagnostic Script**
-```bash
-# If issues persist, run diagnosis
-npx hardhat run scripts/diagnose-borrow-issue.js --network localhost
-```
-
-## Expected Output
-
-### **Successful Prerequisites Setup:**
-```
-üîß Setting up borrowing prerequisites...
-Current pool balance: 10.0 ETH
-Setting credit score for 0x70997970C51812dc3A010C7d01b50e0d17dc79C8
-‚úÖ Borrowing prerequisites setup complete
-
-üîß Setting up NullifierRegistry accounts...
-Setting up nullifier account for 0x70997970C51812dc3A010C7d01b50e0d17dc79C8
-‚úÖ NullifierRegistry accounts setup complete
-```
-
-### **Successful Borrow Operation:**
-```
-Mock: Borrower1 deposits 500 GlintToken as collateral
-  Deposited 500.0 GLINT tokens
-
-Mock: Borrower1 borrows 1 ETH
-  Borrow amount: 1.0 ETH
-  Existing debt: 0.0 ETH
-  Credit score: 80
-  Collateral value: 1000.0 ETH
-  Max loan amount: 800.0 ETH
-  Required collateral ratio: 150%
-  ‚úÖ Borrow successful
-
-üìä Borrower1 History: First interaction: 1234567890, Payments: 0, Liquidations: 0
-```
-
-## Troubleshooting
-
-### **If "Transaction reverted" Still Occurs:**
-
-1. **Check Prerequisites:**
-   ```bash
-   npx hardhat run scripts/simple-borrow-test.js --network localhost
-   ```
-
-2. **Run Diagnosis:**
-   ```bash
-   npx hardhat run scripts/diagnose-borrow-issue.js --network localhost
-   ```
-
-3. **Common Issues:**
-   - Pool has insufficient funds
-   - Credit score not set
-   - GLINT not allowed as collateral
-   - Price feed not set
-   - Nullifier registry not setup
-
-### **If Syntax Errors Occur:**
-- The duplicate `glintTokenAddress` declaration has been fixed
-- Make sure you're using the updated script
-
-## Current Status: ‚úÖ FULLY FIXED
-
-The mockTransactions.js script now:
-- ‚úÖ **No syntax errors** (duplicate declarations removed)
-- ‚úÖ **Proper prerequisites setup** (pool funds, credit scores, collateral allowance)
-- ‚úÖ **Enhanced error handling** (detailed debugging and static call fallbacks)
-- ‚úÖ **Simplified admin operations** (using deployer instead of timelock for setup)
-- ‚úÖ **Comprehensive testing tools** (simple test and diagnostic scripts)
-
-## Next Steps
-
-1. **Run the simple test first** to verify basic functionality
-2. **If successful, run the full mock transactions** to see complete UserHistory demo
-3. **Use diagnostic script** if any issues persist
-4. **Test the frontend** to verify UserHistory panel works correctly
-
-The implementation should now work correctly and demonstrate the complete UserHistory functionality!
diff --git a/Lending (BC) + frontend/loan-management/MOCK_TRANSACTIONS_DEBUG_COMPLETE.md b/Lending (BC) + frontend/loan-management/MOCK_TRANSACTIONS_DEBUG_COMPLETE.md
deleted file mode 100644
index 08f0808..0000000
--- a/Lending (BC) + frontend/loan-management/MOCK_TRANSACTIONS_DEBUG_COMPLETE.md	
+++ /dev/null
@@ -1,212 +0,0 @@
-# Mock Transactions Debug - Complete Fix
-
-## Issues Identified and Fixed
-
-### 1. **"Transaction reverted without a reason string"**
-**Root Cause**: Multiple setup issues preventing successful borrowing
-**Solutions Applied**:
-
-#### A. **Insufficient Prerequisites Setup**
-- ‚úÖ Added pool funding check and setup
-- ‚úÖ Added credit score setup for all borrowers
-- ‚úÖ Added GLINT token collateral allowance setup
-- ‚úÖ Enhanced NullifierRegistry account selection
-
-#### B. **Inadequate Collateral Amounts**
-- ‚úÖ Increased Borrower1 collateral: 100 ‚Üí 500 GLINT tokens
-- ‚úÖ Increased Borrower2 collateral: 80 ‚Üí 200 GLINT tokens  
-- ‚úÖ Increased Liquidation borrower collateral: 30 ‚Üí 60 GLINT tokens
-
-#### C. **Better Loan Amounts**
-- ‚úÖ Increased Borrower1 loan: 0.5 ‚Üí 1.0 ETH
-- ‚úÖ Kept Borrower2 loan: 0.3 ‚Üí 0.5 ETH
-- ‚úÖ Increased Liquidation borrower loan: 0.2 ‚Üí 0.3 ETH
-
-#### D. **Enhanced Error Handling**
-- ‚úÖ Added detailed debugging around borrow operations
-- ‚úÖ Added prerequisite checks before borrowing
-- ‚úÖ Added static call fallback for better error messages
-
-## Key Fixes Applied
-
-### 1. **Prerequisites Setup Section**
-```javascript
-// --- Setup Prerequisites for Borrowing ---
-console.log('üîß Setting up borrowing prerequisites...');
-
-// Ensure pool has sufficient funds
-const poolBalance = await LiquidityPool.getBalance();
-if (poolBalance < ethers.parseEther('5')) {
-    await deployer.sendTransaction({
-        to: await LiquidityPool.getAddress(),
-        value: ethers.parseEther('10')
-    });
-}
-
-// Setup credit scores for borrowers
-const borrowersToSetup = [borrower1, borrower2, liquidationBorrower];
-for (const borrower of borrowersToSetup) {
-    const currentScore = await LiquidityPool.creditScore(borrower.address);
-    if (currentScore === 0n) {
-        await LiquidityPool.connect(deployer).setCreditScore(borrower.address, 85);
-    }
-}
-
-// Ensure GLINT token is set up as collateral
-const isAllowed = await LiquidityPool.isAllowedCollateral(glintTokenAddress);
-if (!isAllowed) {
-    await LiquidityPool.connect(deployer).setAllowedCollateral(glintTokenAddress, true);
-}
-```
-
-### 2. **Enhanced Borrow Operation with Debugging**
-```javascript
-console.log('Mock: Borrower1 borrows 1 ETH');
-const borrowAmount1 = ethers.parseEther('1');
-const nullifier1 = generateNullifier(1);
-
-try {
-    // Check prerequisites
-    const existingDebt = await LiquidityPool.userDebt(borrower1.address);
-    const creditScore = await LiquidityPool.creditScore(borrower1.address);
-    const collateralValue = await LiquidityPool.getTotalCollateralValue(borrower1.address);
-    const borrowTerms = await LiquidityPool.getBorrowTerms(borrower1.address);
-    
-    console.log(`  Existing debt: ${ethers.formatEther(existingDebt)} ETH`);
-    console.log(`  Credit score: ${creditScore}`);
-    console.log(`  Collateral value: ${ethers.formatEther(collateralValue)} ETH`);
-    console.log(`  Max loan amount: ${ethers.formatEther(borrowTerms[2])} ETH`);
-    
-    await LiquidityPool.connect(borrower1).borrow(borrowAmount1, nullifier1);
-    console.log('  ‚úÖ Borrow successful');
-    
-} catch (error) {
-    console.log(`  ‚ùå Borrow failed: ${error.message}`);
-    // Try static call for better error info
-    try {
-        await LiquidityPool.connect(borrower1).borrow.staticCall(borrowAmount1, nullifier1);
-    } catch (staticError) {
-        console.log(`  Static call error: ${staticError.message}`);
-    }
-    throw error;
-}
-```
-
-### 3. **Updated Collateral and Loan Amounts**
-- **Borrower1**: 500 GLINT collateral ‚Üí 1.0 ETH loan
-- **Borrower2**: 200 GLINT collateral ‚Üí 0.5 ETH loan  
-- **Liquidation Borrower**: 60 GLINT collateral ‚Üí 0.3 ETH loan
-
-### 4. **NullifierRegistry Setup**
-```javascript
-// Setup NullifierRegistry accounts
-const borrowers = [borrower1, borrower2];
-const liquidationBorrower = others[0];
-const allBorrowers = [...borrowers, liquidationBorrower, deployer];
-
-for (const borrower of allBorrowers) {
-    try {
-        await NullifierRegistry.connect(borrower).selectAccounts([borrower.address]);
-    } catch (error) {
-        console.log(`Warning: Failed to setup nullifier for ${borrower.address}: ${error.message}`);
-    }
-}
-```
-
-## Testing Tools Created
-
-### 1. **Debug Script** (`scripts/debug-borrow.js`)
-- Comprehensive debugging of borrow operation
-- Step-by-step prerequisite checking
-- Detailed error reporting
-
-### 2. **Setup Test Script** (`scripts/test-mock-setup.js`)
-- Verifies all prerequisites are met
-- Automatically fixes common setup issues
-- Provides clear status reporting
-
-## How to Run the Fixed Script
-
-### **Step 1: Ensure Contracts are Deployed**
-```bash
-cd "Lending (BC) + frontend/loan-management/backend"
-npx hardhat run scripts/deployAll2.js --network localhost
-```
-
-### **Step 2: Test Setup (Optional)**
-```bash
-npx hardhat run scripts/test-mock-setup.js --network localhost
-```
-
-### **Step 3: Run Mock Transactions**
-```bash
-npx hardhat run scripts/mockTransactions.js --network localhost
-```
-
-## Expected Output
-
-### **Successful Setup Phase:**
-```
-üîß Setting up borrowing prerequisites...
-Current pool balance: 10.0 ETH
-Setting credit score for 0x70997970C51812dc3A010C7d01b50e0d17dc79C8
-‚úÖ Borrowing prerequisites setup complete
-
-üîß Setting up NullifierRegistry accounts...
-Setting up nullifier account for 0x70997970C51812dc3A010C7d01b50e0d17dc79C8
-‚úÖ NullifierRegistry accounts setup complete
-```
-
-### **Successful Borrow Operations:**
-```
-Mock: Borrower1 deposits 500 GlintToken as collateral
-  Deposited 500.0 GLINT tokens
-
-Mock: Borrower1 borrows 1 ETH
-  Borrow amount: 1.0 ETH
-  Existing debt: 0.0 ETH
-  Credit score: 85
-  Collateral value: 1000.0 ETH
-  Max loan amount: 800.0 ETH
-  ‚úÖ Borrow successful
-
-üìä Borrower1 History: First interaction: 1234567890, Payments: 0, Liquidations: 0
-```
-
-### **UserHistory Summary:**
-```
-============================================================
-üìä USER HISTORY SUMMARY
-============================================================
-
-üë§ Borrower1 (0x...):
-   First Interaction: 12/8/2024, 10:30:45 AM
-   Successful Payments: 2
-   Liquidations: 0
-   Performance Score: 100.0% (2/2)
-```
-
-## Common Issues and Solutions
-
-### **If Still Getting "Transaction reverted":**
-1. **Run setup test**: `npx hardhat run scripts/test-mock-setup.js --network localhost`
-2. **Check pool balance**: Must have at least 5 ETH
-3. **Verify credit scores**: All borrowers need credit score > 0
-4. **Check collateral setup**: GLINT must be allowed as collateral
-5. **Verify nullifier registry**: All accounts must be selected
-
-### **If "Select accounts first" Error:**
-- The NullifierRegistry setup section should handle this
-- Manually run: `await NullifierRegistry.connect(borrower).selectAccounts([borrower.address])`
-
-## Current Status: ‚úÖ FULLY DEBUGGED
-
-The mockTransactions.js script now:
-- ‚úÖ **Properly sets up all prerequisites**
-- ‚úÖ **Uses adequate collateral amounts**
-- ‚úÖ **Includes comprehensive error handling**
-- ‚úÖ **Demonstrates complete UserHistory functionality**
-- ‚úÖ **Provides detailed debugging information**
-- ‚úÖ **Handles all edge cases and common failures**
-
-The script should now run successfully and demonstrate the complete UserHistory functionality with proper tracking of first interactions, successful payments, and liquidations!
diff --git a/Lending (BC) + frontend/loan-management/MOCK_TRANSACTIONS_FIX.md b/Lending (BC) + frontend/loan-management/MOCK_TRANSACTIONS_FIX.md
deleted file mode 100644
index d16a0ad..0000000
--- a/Lending (BC) + frontend/loan-management/MOCK_TRANSACTIONS_FIX.md	
+++ /dev/null
@@ -1,192 +0,0 @@
-# Mock Transactions Script Fix - Complete Solution
-
-## Error Description
-```
-‚ùå Mock transactions failed: Error: no matching fragment (operation="fragment", info={ "args": [ 500000000000000000 ], "key": "borrow" }, code=UNSUPPORTED_OPERATION, version=6.15.0)
-```
-
-## Root Cause Analysis
-
-### 1. **Function Signature Mismatch**
-- **Old borrow function**: `borrow(uint256 amount)`
-- **New borrow function**: `borrow(uint256 amount, bytes32 nullifier)`
-- **Issue**: Deployed contract still has old signature, but ABI expects new signature
-
-### 2. **Contract Deployment State**
-- The UserHistory implementation changed the borrow function signature
-- The deployed contract wasn't updated after the changes
-- The mockTransactions script was calling the new signature on an old contract
-
-## ‚úÖ Complete Solution Applied
-
-### 1. **Fixed Function Calls**
-Updated all borrow calls to include nullifier parameter:
-```javascript
-// Before
-await LiquidityPool.connect(borrower1).borrow(ethers.parseEther('0.5'));
-
-// After  
-const nullifier1 = generateNullifier(1);
-await LiquidityPool.connect(borrower1).borrow(ethers.parseEther('0.5'), nullifier1);
-```
-
-### 2. **Added Nullifier Generation**
-```javascript
-function generateNullifier(index) {
-    return ethers.keccak256(ethers.toUtf8Bytes(`mock_nullifier_${Date.now()}_${index}`));
-}
-```
-
-### 3. **Added Contract Verification**
-- Checks if contracts are deployed
-- Verifies borrow function signature
-- Provides clear error messages for mismatches
-
-### 4. **Fixed Variable Redeclaration**
-- Removed duplicate `deployer` variable declaration
-- Used existing signers from main function scope
-
-### 5. **Enhanced UserHistory Tracking**
-- Added history checks after each operation
-- Shows real-time tracking of user interactions
-- Comprehensive summary at the end
-
-## üîß How to Fix the Current Issue
-
-### **Step 1: Clean and Recompile**
-```bash
-cd "Lending (BC) + frontend/loan-management/backend"
-
-# Clean previous compilation
-npx hardhat clean
-
-# Recompile contracts
-npx hardhat compile
-```
-
-### **Step 2: Redeploy Contracts**
-```bash
-# Make sure Hardhat node is running
-npx hardhat node
-
-# Deploy updated contracts (new terminal)
-npx hardhat run scripts/deployAll2.js --network localhost
-```
-
-### **Step 3: Verify Deployment**
-```bash
-# Check if contracts are properly deployed
-node scripts/check-deployment.js
-```
-
-### **Step 4: Run Mock Transactions**
-```bash
-# Run the fixed mock transactions script
-npx hardhat run scripts/mockTransactions.js --network localhost
-```
-
-## üõ†Ô∏è New Features Added
-
-### 1. **Contract Verification**
-The script now verifies:
-- ‚úÖ Contract deployment status
-- ‚úÖ Function signature compatibility
-- ‚úÖ Clear error messages for issues
-
-### 2. **UserHistory Demonstration**
-- ‚úÖ Shows first interaction timestamps
-- ‚úÖ Tracks successful payments
-- ‚úÖ Demonstrates liquidation counting
-- ‚úÖ Calculates performance scores
-
-### 3. **Enhanced Error Handling**
-- ‚úÖ Detects deployment issues
-- ‚úÖ Provides specific fix instructions
-- ‚úÖ Validates function signatures
-
-## üìä Expected Output
-
-### **Successful Run Should Show:**
-```
-üîç Verifying contract deployment...
-‚úÖ Borrow function signature verified: borrow(uint256 amount, bytes32 nullifier)
-
-Mock: Borrower1 borrows 0.5 ETH
-üìä Borrower1 History: First interaction: 1234567890, Payments: 1, Liquidations: 0
-
-============================================================
-üìä USER HISTORY SUMMARY
-============================================================
-
-üë§ Borrower1 (0x...):
-   First Interaction: 12/8/2024, 10:30:45 AM
-   Successful Payments: 2
-   Liquidations: 0
-   Performance Score: 100.0% (2/2)
-
-üë§ Borrower2 (0x...):
-   First Interaction: 12/8/2024, 10:31:15 AM
-   Successful Payments: 1
-   Liquidations: 0
-   Performance Score: 100.0% (1/1)
-
-üë§ Liquidated Borrower (0x...):
-   First Interaction: 12/8/2024, 10:31:45 AM
-   Successful Payments: 0
-   Liquidations: 1
-   Performance Score: 0.0% (0/1)
-```
-
-## üö® Troubleshooting
-
-### **If Error Persists:**
-
-1. **Check Contract Deployment:**
-   ```bash
-   node scripts/check-deployment.js
-   ```
-
-2. **Force Clean Rebuild:**
-   ```bash
-   npx hardhat clean
-   rm -rf artifacts cache
-   npx hardhat compile
-   ```
-
-3. **Restart Everything:**
-   ```bash
-   # Stop Hardhat node (Ctrl+C)
-   npx hardhat node
-   # In new terminal:
-   npx hardhat run scripts/deployAll2.js --network localhost
-   ```
-
-### **Common Issues:**
-
-1. **"No matching fragment"** = Contract not redeployed after changes
-2. **"Identifier already declared"** = Variable redeclaration (fixed)
-3. **"No contract deployed"** = Hardhat node restarted without redeployment
-
-## üìã Files Updated
-
-- ‚úÖ `scripts/mockTransactions.js` - Fixed borrow calls and added verification
-- ‚úÖ `scripts/test-borrow-signature.js` - New diagnostic script
-- ‚úÖ Enhanced error handling and UserHistory tracking
-
-## üéØ Current Status: ‚úÖ RESOLVED
-
-The mockTransactions script now:
-- ‚úÖ **Uses correct borrow function signature**
-- ‚úÖ **Verifies contract deployment and compatibility**
-- ‚úÖ **Demonstrates UserHistory functionality**
-- ‚úÖ **Provides clear error messages and solutions**
-- ‚úÖ **Shows comprehensive user interaction tracking**
-
-## üéâ Next Steps
-
-1. **Follow the fix steps above** to resolve the current issue
-2. **Run the mock transactions** to see UserHistory in action
-3. **Test the frontend** to verify UserHistory panel works
-4. **Use the diagnostic script** if issues persist
-
-The implementation now provides a complete demonstration of the UserHistory functionality with proper error handling and verification!
diff --git a/Lending (BC) + frontend/loan-management/NULLIFIER_REGISTRY_FIX.md b/Lending (BC) + frontend/loan-management/NULLIFIER_REGISTRY_FIX.md
deleted file mode 100644
index fc54653..0000000
--- a/Lending (BC) + frontend/loan-management/NULLIFIER_REGISTRY_FIX.md	
+++ /dev/null
@@ -1,154 +0,0 @@
-# NullifierRegistry "Select accounts first" Error - FIXED
-
-## Error Description
-```
-‚ùå Mock transactions failed: ProviderError: Error: VM Exception while processing transaction: reverted with reason string 'Select accounts first'
-```
-
-## Root Cause
-The NullifierRegistry contract requires accounts to be explicitly selected before they can generate nullifiers for borrowing operations. This is a security feature to prevent unauthorized nullifier generation.
-
-## ‚úÖ Solution Applied
-
-### 1. **Added NullifierRegistry Contract Loading**
-```javascript
-const NullifierRegistry = await ethers.getContractAt('NullifierRegistry', addresses.nullifierRegistry);
-```
-
-### 2. **Added Account Selection Setup**
-```javascript
-// Setup NullifierRegistry accounts
-console.log('üîß Setting up NullifierRegistry accounts...');
-
-// Select accounts for nullifier generation (required before borrowing)
-const borrowers = [borrower1, borrower2];
-const liquidationBorrower = others[0]; // Get the liquidation borrower
-const allBorrowers = [...borrowers, liquidationBorrower, deployer]; // Include deployer for admin operations
-
-for (const borrower of allBorrowers) {
-    try {
-        console.log(`Setting up nullifier account for ${borrower.address}`);
-        await NullifierRegistry.connect(borrower).selectAccounts([borrower.address]);
-    } catch (error) {
-        console.log(`Warning: Failed to setup nullifier for ${borrower.address}: ${error.message}`);
-    }
-}
-
-console.log('‚úÖ NullifierRegistry accounts setup complete');
-```
-
-### 3. **Fixed Variable Scope Issues**
-- Removed duplicate `liquidationBorrower` declaration
-- Used single declaration from the setup section
-- Ensured all borrowers are properly configured
-
-## üîß How the Fix Works
-
-### **Account Selection Process:**
-1. **Each borrower calls `selectAccounts([their_address])`**
-2. **This registers them in the NullifierRegistry**
-3. **Only registered accounts can generate valid nullifiers**
-4. **Nullifiers are required for borrow operations**
-
-### **Security Benefits:**
-- ‚úÖ Prevents unauthorized borrowing
-- ‚úÖ Ensures nullifier uniqueness
-- ‚úÖ Tracks account interactions
-- ‚úÖ Enables proper UserHistory tracking
-
-## üìã What the Script Now Does
-
-### **Setup Phase:**
-1. ‚úÖ Loads all required contracts including NullifierRegistry
-2. ‚úÖ Verifies contract deployment and function signatures
-3. ‚úÖ Sets up nullifier accounts for all borrowers
-4. ‚úÖ Configures admin accounts for governance operations
-
-### **Transaction Phase:**
-1. ‚úÖ Generates unique nullifiers for each borrow operation
-2. ‚úÖ Executes borrow operations with proper nullifier parameters
-3. ‚úÖ Tracks UserHistory throughout all operations
-4. ‚úÖ Demonstrates liquidation scenarios with history tracking
-
-### **Verification Phase:**
-1. ‚úÖ Shows real-time UserHistory updates
-2. ‚úÖ Provides comprehensive summary of all user interactions
-3. ‚úÖ Calculates performance scores based on payment history
-
-## üéØ Expected Output
-
-### **Successful Setup:**
-```
-üîß Setting up NullifierRegistry accounts...
-Setting up nullifier account for 0x70997970C51812dc3A010C7d01b50e0d17dc79C8
-Setting up nullifier account for 0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC
-Setting up nullifier account for 0x90F79bf6EB2c4f870365E785982E1f101E93b906
-Setting up nullifier account for 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266
-‚úÖ NullifierRegistry accounts setup complete
-```
-
-### **Successful Borrowing:**
-```
-Mock: Borrower1 borrows 0.5 ETH
-üìä Borrower1 History: First interaction: 1234567890, Payments: 0, Liquidations: 0
-
-Mock: Borrower1 repays 0.3 ETH (partial repayment)
-üìä Borrower1 History: First interaction: 1234567890, Payments: 1, Liquidations: 0
-```
-
-## üö® Troubleshooting
-
-### **If "Select accounts first" Error Persists:**
-
-1. **Check NullifierRegistry Deployment:**
-   ```bash
-   node scripts/check-deployment.js
-   ```
-
-2. **Verify Account Setup:**
-   - Ensure all borrowers call `selectAccounts()` before borrowing
-   - Check that NullifierRegistry address is correct
-   - Verify accounts have sufficient gas for transactions
-
-3. **Manual Account Setup (if needed):**
-   ```javascript
-   // In Hardhat console
-   const NullifierRegistry = await ethers.getContractAt('NullifierRegistry', 'REGISTRY_ADDRESS');
-   const [signer] = await ethers.getSigners();
-   await NullifierRegistry.connect(signer).selectAccounts([signer.address]);
-   ```
-
-### **Common Issues:**
-
-1. **"Select accounts first"** = Account not registered in NullifierRegistry
-2. **"Nullifier already used"** = Duplicate nullifier (use unique values)
-3. **"No contract deployed"** = NullifierRegistry not deployed or wrong address
-
-## üìä Files Updated
-
-- ‚úÖ `scripts/mockTransactions.js` - Added NullifierRegistry setup
-- ‚úÖ Enhanced error handling and account management
-- ‚úÖ Fixed variable scope issues
-
-## üéâ Current Status: ‚úÖ RESOLVED
-
-The mockTransactions script now:
-- ‚úÖ **Properly sets up NullifierRegistry accounts**
-- ‚úÖ **Handles nullifier generation correctly**
-- ‚úÖ **Demonstrates complete UserHistory functionality**
-- ‚úÖ **Provides comprehensive error handling**
-- ‚úÖ **Shows real-time interaction tracking**
-
-## üîß To Run the Fixed Script
-
-```bash
-cd "Lending (BC) + frontend/loan-management/backend"
-
-# Ensure contracts are deployed
-npx hardhat run scripts/deployAll2.js --network localhost
-
-# Run the fixed mock transactions
-npx hardhat run scripts/mockTransactions.js --network localhost
-```
-
-The script will now successfully demonstrate all UserHistory functionality including first interactions, successful payments, and liquidation tracking!
diff --git a/Lending (BC) + frontend/loan-management/README.md b/Lending (BC) + frontend/loan-management/README.md
index 5e7f25d..bf7a7e6 100644
--- a/Lending (BC) + frontend/loan-management/README.md	
+++ b/Lending (BC) + frontend/loan-management/README.md	
@@ -89,37 +89,21 @@ npx hardhat node
 ```
 **Keep this terminal open!** This runs your local blockchain network.
 
-### Step 2: Configure MetaMask for Local Development
-Before deploying contracts, add the Hardhat network to MetaMask:
-
-**Network Configuration:**
-- **Network Name**: `Hardhat`
-- **New RPC URL**: `http://localhost:8545`
-- **Chain ID**: `31337`
-- **Currency Symbol**: `ETH`
-
-**How to add:**
-1. Open MetaMask extension
-2. Click the network dropdown (top of MetaMask)
-3. Click "Add network" ‚Üí "Add network manually"
-4. Fill in the details above
-5. Click "Save"
-
-### Step 3: Deploy Smart Contracts
+### Step 2: Deploy Smart Contracts
 Open a **new terminal** and navigate to the backend folder:
 ```bash
 cd backend
-npx hardhat run scripts/deployAll2.js --network localhost
+npx hardhat run scripts/deployAll.js --network localhost
 ```
 
 This will:
 - ‚úÖ Compile all smart contracts
 - ‚úÖ Deploy them to your local network
 - ‚úÖ Set up initial configurations
-- ‚úÖ Update frontend contract addresses automatically
-- ‚úÖ Copy contract ABIs to frontend
+- ‚úÖ Run automatic mockup simulations
+- ‚úÖ Transfer admin rights to the DAO/Timelock system
 
-### Step 4: Start the Frontend
+### Step 3: Start the Frontend
 Open a **third terminal** and navigate to the root folder:
 ```bash
 npm run dev
@@ -137,8 +121,8 @@ The frontend will start at: **http://localhost:5173**
 2. Click the network dropdown (top of MetaMask)
 3. Click "Add network" ‚Üí "Add network manually"
 4. Fill in these details:
-   - **Network Name**: `Hardhat`
-   - **New RPC URL**: `http://localhost:8545`
+   - **Network Name**: `Localhost 8545`
+   - **New RPC URL**: `http://127.0.0.1:8545`
    - **Chain ID**: `31337`
    - **Currency Symbol**: `ETH`
 5. Click "Save"
@@ -185,7 +169,7 @@ The system creates several test accounts with different roles. Import these into
 2. Click "Connect Wallet"
 3. Select MetaMask
 4. Choose one of your imported accounts
-5. Make sure you're on the "Hardhat" network
+5. Make sure you're on the "Localhost 8545" network
 
 ### Step 2: Explore Different Roles
 
@@ -267,7 +251,7 @@ npx hardhat run scripts/run-mockup-after-deploy.js --network localhost
 
 #### "Connect Wallet" Button Not Working
 - ‚úÖ Make sure MetaMask is installed and unlocked
-- ‚úÖ Verify you're on the "Hardhat" network
+- ‚úÖ Verify you're on the "Localhost 8545" network
 - ‚úÖ Check that the Hardhat node is running
 
 #### MetaMask Loads But Won't Connect
@@ -285,7 +269,7 @@ If MetaMask opens but doesn't connect to the application:
 - ‚úÖ Switch to a different account if needed
 
 #### "Contract Not Found" Errors
-- ‚úÖ Make sure contracts are deployed: `npx hardhat run scripts/deployAll2.js --network localhost`
+- ‚úÖ Make sure contracts are deployed: `npx hardhat run scripts/deployAll.js --network localhost`
 - ‚úÖ Restart the Hardhat node if needed
 - ‚úÖ Clear browser cache and refresh
 
@@ -294,15 +278,9 @@ If something goes wrong, restart from scratch:
 
 1. Stop all running processes (Ctrl+C in terminals)
 2. Restart Hardhat node: `cd backend && npx hardhat node`
-3. Redeploy contracts: `npx hardhat run scripts/deployAll2.js --network localhost`
+3. Redeploy contracts: `npx hardhat run scripts/deployAll.js --network localhost`
 4. Restart frontend: `npm run dev`
 
-**üí° Pro Tip**: Use the deployment checker to verify everything is working:
-```bash
-cd backend
-node scripts/check-deployment.js
-```
-
 ---
 
 ## üìÅ Project Structure
diff --git a/Lending (BC) + frontend/loan-management/TIMELOCK_PERMISSION_FIX.md b/Lending (BC) + frontend/loan-management/TIMELOCK_PERMISSION_FIX.md
deleted file mode 100644
index 4b728ed..0000000
--- a/Lending (BC) + frontend/loan-management/TIMELOCK_PERMISSION_FIX.md	
+++ /dev/null
@@ -1,173 +0,0 @@
-# Timelock Permission Fix - FINAL SOLUTION
-
-## Root Cause Identified
-
-### **Error**: `VM Exception while processing transaction: reverted with an unrecognized custom error (return data: 0x492e44c8)`
-
-**Decoded Error**: This is the `AccessControlUnauthorizedAccount` error from OpenZeppelin's AccessControl.
-
-**Root Cause**: The `setCreditScore` function in LiquidityPool has the `onlyTimelock` modifier, but the scripts were trying to call it with the `deployer` account instead of the `timelock` account.
-
-### **Why This Happens**:
-1. During deployment, LiquidityPool is initialized with `deployer.address` as admin
-2. At the end of deployment (line 578 in deployAll2.js), admin rights are transferred to the Timelock
-3. After deployment, only the Timelock can call admin functions like `setCreditScore`
-4. Mock scripts were trying to use `deployer` for admin operations ‚Üí Permission denied
-
-## ‚úÖ Complete Fix Applied
-
-### **1. Updated simple-borrow-test.js**
-```javascript
-// Load contracts
-const LiquidityPool = await ethers.getContractAt('LiquidityPool', addresses.LiquidityPool);
-const GlintToken = await ethers.getContractAt('GlintToken', addresses.GlintToken);
-const NullifierRegistry = await ethers.getContractAt('NullifierRegistry', addresses.nullifierRegistry);
-
-// Get timelock signer for admin operations
-const timelockSigner = await ethers.getImpersonatedSigner(addresses.TimelockController);
-
-// Fund the timelock with ETH for gas fees
-await deployer.sendTransaction({
-    to: addresses.TimelockController,
-    value: ethers.parseEther('1')
-});
-console.log(`   ‚úÖ Funded timelock with ETH for gas fees`);
-```
-
-### **2. Updated Admin Operations to Use Timelock**
-```javascript
-// BEFORE (‚ùå Permission denied):
-await LiquidityPool.connect(deployer).setCreditScore(borrower1.address, 85);
-
-// AFTER (‚úÖ Works):
-await LiquidityPool.connect(timelockSigner).setCreditScore(borrower1.address, 85);
-```
-
-### **3. Updated mockTransactions.js**
-- ‚úÖ Added timelock signer setup
-- ‚úÖ Added timelock funding for gas fees
-- ‚úÖ Updated all admin operations to use timelock
-- ‚úÖ Fixed prerequisites setup section
-- ‚úÖ Fixed admin activities section
-
-## Key Changes Made
-
-### **In simple-borrow-test.js:**
-```javascript
-// Added timelock setup
-const timelockSigner = await ethers.getImpersonatedSigner(addresses.TimelockController);
-await deployer.sendTransaction({
-    to: addresses.TimelockController,
-    value: ethers.parseEther('1')
-});
-
-// Updated admin operations
-await LiquidityPool.connect(timelockSigner).setCreditScore(borrower1.address, 85);
-await LiquidityPool.connect(timelockSigner).setAllowedCollateral(addresses.GlintToken, true);
-await LiquidityPool.connect(timelockSigner).setPriceFeed(addresses.GlintToken, addresses.MockPriceFeed);
-```
-
-### **In mockTransactions.js:**
-```javascript
-// Added timelock setup in prerequisites section
-const timelockSigner = await ethers.getImpersonatedSigner(addresses.TimelockController);
-await deployer.sendTransaction({
-    to: addresses.TimelockController,
-    value: ethers.parseEther('1')
-});
-
-// Updated all setCreditScore calls
-await LiquidityPool.connect(timelockSigner).setCreditScore(borrower.address, 85);
-
-// Updated admin activities section
-await LiquidityPool.connect(timelockSigner).setCreditScore(lender1.address, 85);
-await LiquidityPool.connect(timelockSigner).setAllowedCollateral(glintTokenAddress, true);
-await LiquidityPool.connect(timelockSigner).setPriceFeed(glintTokenAddress, mockPriceFeedAddress);
-```
-
-## Why This Fix Works
-
-### **1. Proper Authorization**
-- Timelock is the authorized admin after deployment
-- All admin functions require `onlyTimelock` modifier
-- Using `timelockSigner` provides proper authorization
-
-### **2. Gas Funding**
-- Timelock contract needs ETH to pay for gas fees
-- Added 1 ETH funding to timelock before operations
-- Prevents "insufficient funds for gas" errors
-
-### **3. Impersonation**
-- `ethers.getImpersonatedSigner()` allows scripts to act as timelock
-- Works in development/testing environments
-- Simulates timelock operations without complex governance
-
-## How to Run the Fixed Scripts
-
-### **Step 1: Ensure Contracts are Deployed**
-```bash
-cd "Lending (BC) + frontend/loan-management/backend"
-npx hardhat run scripts/deployAll2.js --network localhost
-```
-
-### **Step 2: Run Simple Test**
-```bash
-npx hardhat run scripts/simple-borrow-test.js --network localhost
-```
-
-### **Step 3: Run Full Mock Transactions**
-```bash
-npx hardhat run scripts/mockTransactions.js --network localhost
-```
-
-## Expected Output
-
-### **Successful Timelock Setup:**
-```
-üîß Step 1: Setup prerequisites...
-   ‚úÖ Pool has sufficient funds: 10.0 ETH
-   ‚úÖ Funded timelock with ETH for gas fees
-   ‚úÖ Set credit score to 85
-   ‚úÖ Allowed GLINT as collateral
-   ‚úÖ Set price feed for GLINT
-```
-
-### **Successful Borrow Operation:**
-```
-üöÄ Step 3: Attempt borrow...
-   Collateral ratio required: 150%
-   Max loan amount: 800.0 ETH
-   Attempting to borrow: 1.0 ETH
-   ‚úÖ Static call successful
-   ‚úÖ Borrow successful! Hash: 0x...
-   New debt: 1.0 ETH
-   UserHistory: firstInteraction=1234567890, payments=0, liquidations=0
-
-üéâ Test completed successfully!
-```
-
-## Troubleshooting
-
-### **If "AccessControlUnauthorizedAccount" Error Persists:**
-1. **Check timelock address**: Verify `addresses.TimelockController` is correct
-2. **Check timelock funding**: Ensure timelock has ETH for gas
-3. **Check deployment**: Ensure admin rights were transferred to timelock
-
-### **If "Insufficient funds for gas" Error:**
-- Increase timelock funding: `ethers.parseEther('2')` instead of `'1'`
-- Check deployer has enough ETH to fund timelock
-
-### **If Impersonation Fails:**
-- Ensure running on localhost/hardhat network
-- Impersonation only works in development environments
-
-## Current Status: ‚úÖ FULLY FIXED
-
-Both scripts now:
-- ‚úÖ **Use proper timelock authorization** for admin operations
-- ‚úÖ **Fund timelock with ETH** for gas fees
-- ‚úÖ **Handle all permission requirements** correctly
-- ‚úÖ **Demonstrate complete UserHistory functionality**
-- ‚úÖ **Provide clear success/failure feedback**
-
-The permission issue has been completely resolved. The scripts should now run successfully and demonstrate the UserHistory functionality without any authorization errors!
diff --git a/Lending (BC) + frontend/loan-management/USERHISTORY_IMPLEMENTATION.md b/Lending (BC) + frontend/loan-management/USERHISTORY_IMPLEMENTATION.md
deleted file mode 100644
index 61a7e26..0000000
--- a/Lending (BC) + frontend/loan-management/USERHISTORY_IMPLEMENTATION.md	
+++ /dev/null
@@ -1,189 +0,0 @@
-# UserHistory Implementation Summary
-
-## Overview
-Successfully implemented the `UserHistory` struct and integrated it throughout the LiquidityPool contract and frontend. This tracks user interaction history including first borrow timestamp, successful payments, and liquidations.
-
-## Backend Changes
-
-### 1. Smart Contract Updates (`LiquidityPool.sol`)
-
-#### Added UserHistory Struct
-```solidity
-struct UserHistory{
-    uint256 firstInteractionTimestamp; // only set the first time borrowed
-    uint256 liquidations; // amount of liquidations
-    uint256 succesfullPayments; // amount of repayments
-}
-```
-
-#### Added Storage and Functions
-- `mapping(address => UserHistory) public userHistory;`
-- `function getUserHistory(address user) external view returns (UserHistory memory)`
-- `event UserHistoryUpdated(address indexed user, string action, uint256 timestamp);`
-
-#### Updated Functions
-- **`borrow()`**: Sets `firstInteractionTimestamp` on first borrow only
-- **`repay()`**: Increments `succesfullPayments` counter
-- **`repayInstallment()`**: Increments `succesfullPayments` counter  
-- **`clearDebt()`**: Increments `liquidations` counter (called during liquidations)
-
-### 2. Test Files Fixed
-Fixed all test files to use correct 6-parameter initialization (added NullifierRegistry):
-- ‚úÖ `LiquidityPool.test.js` - Already correct
-- ‚úÖ `LiquidityPool.coverage.test.js` - Already correct
-- ‚úÖ `LiquidityPool.lines-boost.test.js` - Fixed
-- ‚úÖ `LiquidityPool.maxcoverage.test.js` - Already correct
-- ‚úÖ `LiquidityPool.lines-80-push.test.js` - Fixed
-- ‚úÖ `LiquidityPool.comprehensive.test.js` - Fixed
-
-### 3. Created Comprehensive Test Suite
-Created `test/UserHistory.test.js` with:
-- Initialization tests
-- First interaction timestamp tests
-- Successful payments tracking tests
-- Liquidation tracking tests
-- Event emission tests
-- Multi-user independence tests
-
-## Frontend Changes
-
-### 1. Deployment Script Fixes (`deployAll2.js`)
-- ‚úÖ Added missing `nullifierRegistry` address to addresses object
-- ‚úÖ Added `creditScoreVerifier` address (RISC0 contract)
-- ‚úÖ Commented out problematic governance proposal setup
-- ‚úÖ Fixed address mapping for frontend compatibility
-
-### 2. ABI Copy Script Updates (`copy-artifacts.js`)
-- ‚úÖ Added `TimelockController` to contracts list
-- ‚úÖ Added interface contracts copying (ICreditScore as CreditScore)
-- ‚úÖ Added proper interface handling for frontend compatibility
-
-### 3. Frontend App.jsx Updates
-- ‚úÖ Added null checks for `creditScoreVerifier` and `nullifierRegistry` contracts
-- ‚úÖ Added `fetchUserHistory()` function
-- ‚úÖ Updated Dashboard props to include `fetchUserHistory`
-- ‚úÖ Improved error handling for missing contracts
-
-### 4. New UserHistoryPanel Component
-Created `components/liquidity-pool/user/UserHistoryPanel.jsx`:
-- ‚úÖ Displays user's complete interaction history
-- ‚úÖ Shows history score based on payment performance
-- ‚úÖ Visual indicators for successful payments vs liquidations
-- ‚úÖ Performance insights and recommendations
-- ‚úÖ Responsive design with proper loading states
-
-### 5. Dashboard Integration
-Updated `Dashboard.tsx`:
-- ‚úÖ Added UserHistoryPanel import
-- ‚úÖ Added new "History" tab
-- ‚úÖ Updated grid layout to accommodate new tab
-- ‚úÖ Proper prop passing for fetchUserHistory function
-
-## Key Features
-
-### 1. Smart Contract Features
-- **First Interaction Tracking**: Only set once when user first borrows
-- **Payment Counting**: Incremented on both full repayments and installment payments
-- **Liquidation Tracking**: Automatically incremented when liquidations occur
-- **Event Logging**: All updates emit events for frontend integration
-- **Gas Efficient**: Minimal storage overhead with packed struct
-
-### 2. Frontend Features
-- **History Score**: Calculated performance metric (0-100%)
-- **Visual Dashboard**: Clean, intuitive display of user statistics
-- **Performance Insights**: Automated recommendations based on history
-- **Real-time Updates**: Fetches latest data with refresh capability
-- **Error Handling**: Graceful handling of missing data or network issues
-
-## Testing Instructions
-
-### Backend Testing
-```bash
-cd "Lending (BC) + frontend/loan-management/backend"
-
-# Run UserHistory-specific tests
-npx hardhat test test/UserHistory.test.js
-
-# Run all tests to ensure nothing is broken
-npx hardhat test
-
-# Run specific test patterns
-npx hardhat test --grep "UserHistory"
-```
-
-### Frontend Testing
-```bash
-# 1. Start Hardhat node
-cd "Lending (BC) + frontend/loan-management/backend"
-npx hardhat node
-
-# 2. Deploy contracts (in new terminal)
-npx hardhat run scripts/deployAll2.js --network localhost
-
-# 3. Start frontend (in new terminal)
-cd "Lending (BC) + frontend/loan-management/frontend"
-npm run dev
-
-# 4. Test in browser
-# - Connect wallet
-# - Navigate to "History" tab
-# - Perform borrow/repay operations
-# - Verify history updates correctly
-```
-
-## Usage Examples
-
-### Smart Contract
-```solidity
-// Get a user's complete history
-UserHistory memory history = liquidityPool.getUserHistory(userAddress);
-
-// Access individual fields
-uint256 firstBorrow = history.firstInteractionTimestamp;
-uint256 totalPayments = history.succesfullPayments;
-uint256 totalLiquidations = history.liquidations;
-```
-
-### Frontend
-```javascript
-// Fetch user history
-const history = await fetchUserHistory(userAddress);
-console.log('User history:', history);
-
-// Listen for history updates
-liquidityPool.on("UserHistoryUpdated", (user, action, timestamp) => {
-    console.log(`User ${user} performed ${action} at ${timestamp}`);
-});
-```
-
-## Fixed Issues
-
-### 1. Contract Initialization Error
-- **Problem**: Frontend getting "invalid value for Contract target" error
-- **Solution**: Added null checks for missing contract addresses
-- **Fix**: Updated deployment script to include all required addresses
-
-### 2. Missing ABIs
-- **Problem**: Frontend couldn't find CreditScore.json ABI
-- **Solution**: Updated copy-artifacts.js to copy interface contracts
-- **Fix**: ICreditScore interface now copied as CreditScore.json
-
-### 3. Governance Proposal Timing
-- **Problem**: "Governor: vote not currently active" error in deployment
-- **Solution**: Commented out problematic governance setup for development
-- **Fix**: Can be done manually later via governance interface
-
-### 4. Test File Initialization
-- **Problem**: Test files using old 5-parameter initialization
-- **Solution**: Updated all test files to use 6-parameter initialization
-- **Fix**: Added NullifierRegistry parameter to all test setups
-
-## Next Steps
-
-1. **Test the implementation** using the provided instructions
-2. **Verify UserHistory data** is correctly tracked across borrow/repay cycles
-3. **Check frontend display** shows accurate history information
-4. **Test edge cases** like multiple users, liquidations, etc.
-5. **Consider additional features** like history export, detailed analytics, etc.
-
-The implementation is now complete and ready for production use!
diff --git a/Lending (BC) + frontend/loan-management/backend/TEST_FIXES_SUMMARY.md b/Lending (BC) + frontend/loan-management/backend/TEST_FIXES_SUMMARY.md
deleted file mode 100644
index be38b49..0000000
--- a/Lending (BC) + frontend/loan-management/backend/TEST_FIXES_SUMMARY.md	
+++ /dev/null
@@ -1,151 +0,0 @@
-# Test Files Fix Summary
-
-## Issues Fixed
-
-### 1. **UserHistory.test.js** - VotingToken MINTER_ROLE & LendingManager Permission Issues
-**Problems:**
-- VotingToken minting failed: `AccessControl: account missing role MINTER_ROLE`
-- clearDebt failed: `Only LendingManager` error
-
-**Fixes Applied:**
-```javascript
-// Added MINTER_ROLE to LiquidityPool for voting token rewards
-const MINTER_ROLE = await votingToken.MINTER_ROLE();
-await votingToken.grantRole(MINTER_ROLE, await liquidityPool.getAddress());
-
-// Fixed clearDebt to use LendingManager instead of direct call
-await lendingManager.connect(owner).clearDebt(user2.address, borrowAmount);
-```
-
-### 2. **LiquidityPool.comprehensive.test.js** - Borrow Function Signature Issues
-**Problem:**
-- `no matching fragment` errors for borrow function calls
-- Missing nullifier parameter in borrow calls
-
-**Fixes Applied:**
-```javascript
-// BEFORE (‚ùå Missing nullifier):
-await liquidityPool.connect(borrower1).borrow(borrowAmount);
-
-// AFTER (‚úÖ With nullifier):
-const nullifier = ethers.keccak256(ethers.toUtf8Bytes(`nullifier_${Date.now()}_1`));
-await liquidityPool.connect(borrower1).borrow(borrowAmount, nullifier);
-```
-
-**Fixed 7 borrow calls** throughout the test file.
-
-### 3. **LiquidityPool.comprehensive.test.js** - Missing Function Issue
-**Problem:**
-- `liquidityPool.getLoanDetails is not a function`
-
-**Fix Applied:**
-```javascript
-// BEFORE (‚ùå Function doesn't exist):
-const loanInfo = await liquidityPool.getLoanDetails(user1.address);
-
-// AFTER (‚úÖ Correct function name):
-const loanInfo = await liquidityPool.getLoan(user1.address);
-```
-
-### 4. **LiquidityPool.coverage-boost.test.js** - Initialization Parameter Issue
-**Problem:**
-- `no matching fragment` error for initialize function
-- Missing 6th parameter (nullifierRegistry)
-
-**Fixes Applied:**
-```javascript
-// Added nullifierRegistry variable declaration
-let mockToken, mockPriceFeed, timelock, nullifierRegistry;
-
-// Added nullifierRegistry deployment
-const NullifierRegistry = await ethers.getContractFactory("NullifierRegistry");
-nullifierRegistry = await NullifierRegistry.deploy();
-await nullifierRegistry.waitForDeployment();
-
-// Fixed initialize call with 6th parameter
-await liquidityPool.initialize(
-    await timelock.getAddress(),
-    await stablecoinManager.getAddress(),
-    await lendingManager.getAddress(),
-    await interestRateModel.getAddress(),
-    await creditSystem.getAddress(),
-    await nullifierRegistry.getAddress()  // ‚úÖ Added missing parameter
-);
-```
-
-### 5. **LiquidityPool.lines-80-push.test.js** - Missing Function Issue
-**Problem:**
-- `liquidityPool.isOracleHealthy is not a function`
-
-**Fix Applied:**
-```javascript
-// BEFORE (‚ùå Function is commented out in contract):
-const isHealthy = await liquidityPool.isOracleHealthy(await mockToken.getAddress());
-
-// AFTER (‚úÖ Alternative test):
-const feedAddress = await liquidityPool.priceFeed(await mockToken.getAddress());
-expect(feedAddress).to.not.equal(ethers.ZeroAddress);
-```
-
-### 6. **IntegratedCreditSystem.account.test.js** - Admin Permission Issues
-**Problem:**
-- `Only admin` error when IntegratedCreditSystem tries to call setCreditScore
-
-**Fix Applied:**
-```javascript
-// Set IntegratedCreditSystem as admin in MockLiquidityPool
-await mockLiquidityPool.setAdmin(await creditSystem.getAddress());
-```
-
-### 7. **IntegratedCreditSystem.admin.test.js** - Same Admin Permission Issue
-**Fix Applied:**
-```javascript
-// Same fix as above
-await mockLiquidityPool.setAdmin(await creditSystem.getAddress());
-```
-
-## Summary of Changes
-
-### **Files Modified:**
-1. ‚úÖ `test/UserHistory.test.js` - Added MINTER_ROLE, fixed clearDebt call
-2. ‚úÖ `test/LiquidityPool.comprehensive.test.js` - Fixed 7 borrow calls, fixed getLoan function
-3. ‚úÖ `test/LiquidityPool.coverage-boost.test.js` - Added nullifierRegistry parameter
-4. ‚úÖ `test/LiquidityPool.lines-80-push.test.js` - Replaced missing function test
-5. ‚úÖ `test/IntegratedCreditSystem.account.test.js` - Added admin setup
-6. ‚úÖ `test/IntegratedCreditSystem.admin.test.js` - Added admin setup
-
-### **Key Patterns Fixed:**
-1. **Borrow Function Calls**: All now include nullifier parameter
-2. **Permission Issues**: Proper role assignments and admin setup
-3. **Missing Functions**: Replaced with existing alternatives
-4. **Initialization**: Added missing parameters to contract initialization
-
-### **Expected Results:**
-- ‚úÖ All 19 failing tests should now pass
-- ‚úÖ UserHistory functionality properly tested
-- ‚úÖ Borrow operations work with nullifier system
-- ‚úÖ Admin operations have proper permissions
-- ‚úÖ Contract initialization works correctly
-
-## How to Run Tests
-
-```bash
-cd "Lending (BC) + frontend/loan-management/backend"
-
-# Run all tests
-npx hardhat test
-
-# Run specific test files
-npx hardhat test test/UserHistory.test.js
-npx hardhat test test/LiquidityPool.comprehensive.test.js
-npx hardhat test test/IntegratedCreditSystem.account.test.js
-```
-
-## Notes
-
-1. **Nullifier System**: All borrow operations now properly use the nullifier system
-2. **Role-Based Access**: Tests now properly set up required roles and permissions
-3. **Contract Evolution**: Tests updated to match current contract implementations
-4. **Mock Contracts**: Proper admin setup for mock contracts to allow test operations
-
-The test suite should now fully pass and properly validate the UserHistory functionality and all other contract features!
diff --git a/Lending (BC) + frontend/loan-management/backend/contracts/LiquidityPool.sol b/Lending (BC) + frontend/loan-management/backend/contracts/LiquidityPool.sol
index b41e0d3..a34eecc 100644
--- a/Lending (BC) + frontend/loan-management/backend/contracts/LiquidityPool.sol	
+++ b/Lending (BC) + frontend/loan-management/backend/contracts/LiquidityPool.sol	
@@ -9,15 +9,7 @@ import "./interfaces/AggregatorV3Interface.sol";
 import "./StablecoinManager.sol";
 import "./LendingManager.sol";
 import "./InterestRateModel.sol";
-import "./IntegratedCreditSystem.sol";
 import "./VotingToken.sol";
-import "./NullifierRegistry.sol";
-
-struct UserHistory{
-    uint256 firstInteractionTimestamp; // only set the first time borrowed
-    uint256 liquidations; // amount of liquidations
-    uint256 succesfullPayments; // amount of repayments
-}
 
 //interface for verifier
 interface ICreditScore {
@@ -26,6 +18,7 @@ interface ICreditScore {
         bool isValid,
         uint256 timestamp
     );
+
 }
 
 contract LiquidityPool is
@@ -52,8 +45,6 @@ contract LiquidityPool is
     // Remove per-token threshold/ltv logic from this contract
     mapping(address => address) public priceFeed;
 
-    mapping(address => UserHistory) public userHistory;
-
     address[] public collateralTokenList;
     address[] public users;
     mapping(address => bool) public isKnownUser;
@@ -72,16 +63,10 @@ contract LiquidityPool is
     LendingManager public lendingManager;
     InterestRateModel public interestRateModel;
     VotingToken public votingToken;
-    NullifierRegistry public nullifierRegistry;
-
 
     address public timelock;
 
-    // ZK-Proof Integration
-    IntegratedCreditSystem public creditSystem;
-    bool public zkProofRequired; // Whether ZK proofs are required for borrowing
-
-    // NEW: RISC0 Credit Score Integration
+    // RISC0 Credit Score Integration
     ICreditScore public creditScoreContract;
     bool public useRISC0CreditScores; // Toggle for RISC0 vs local scores
     uint256 public constant SCORE_EXPIRY_PERIOD = 90 days; // How long RISC0 scores are valid
@@ -149,30 +134,12 @@ contract LiquidityPool is
     event GracePeriodExtended(address indexed user, uint256 newDeadline);
     event UserError(address indexed user, string message);
 
-    // ZK-Proof Integration Events
-    event CreditSystemUpdated(
-        address indexed oldSystem,
-        address indexed newSystem
-    );
-    event ZKProofRequirementToggled(bool required);
-    event ZKProofValidationFailed(address indexed user, string reason);
-
-    // NEW: RISC0 Integration Events
+    // RISC0 Integration Events
     event CreditScoreContractUpdated(
         address indexed oldContract,
         address indexed newContract
     );
     event RISC0ScoreToggled(bool useRISC0);
-    event CreditScoreSourceUsed(
-        address indexed user,
-        string source,
-        uint256 score,
-        uint256 convertedScore
-    );
-
-    event BorrowWithNullifier(address indexed user, uint256 amount, bytes32 nullifier);
-    event UserHistoryUpdated(address indexed user, string action, uint256 timestamp);
-
 
     // --- New for Partial Liquidation and Tiered Fees ---
     uint256 public constant SAFETY_BUFFER = 10; // 10% over-collateralization
@@ -252,16 +219,6 @@ contract LiquidityPool is
         _;
     }
 
-    modifier requiresZKProof() {
-        if (zkProofRequired && address(creditSystem) != address(0)) {
-            require(
-                creditSystem.isEligibleToBorrow(msg.sender),
-                "ZK proof verification required"
-            );
-        }
-        _;
-    }
-
     modifier onlyTimelock() {
         if (msg.sender != timelock) revert OnlyTimelockLiquidityPool();
         _;
@@ -271,24 +228,15 @@ contract LiquidityPool is
         address _timelock,
         address _stablecoinManager,
         address _lendingManager,
-        address _interestRateModel,
-        address _creditSystem,
-        address _nullifierRegistry
+        address _interestRateModel
     ) public initializer {
         __AccessControl_init();
         timelock = _timelock;
         stablecoinManager = StablecoinManager(_stablecoinManager);
         lendingManager = LendingManager(payable(_lendingManager));
         interestRateModel = InterestRateModel(_interestRateModel);
-        nullifierRegistry = NullifierRegistry(_nullifierRegistry);
-
-        // Initialize ZK-proof system
-        if (_creditSystem != address(0)) {
-            creditSystem = IntegratedCreditSystem(_creditSystem);
-            zkProofRequired = true; // Enable ZK proof requirement by default
-        }
 
-        // NEW: Initialize RISC0 integration
+        // Initialize RISC0 integration
         useRISC0CreditScores = false; // Disabled by default until contract is set
 
         _initializeRiskTiers();
@@ -354,17 +302,11 @@ contract LiquidityPool is
     }
 
     /**
-     * @notice Enhanced credit score retrieval with RISC0 integration
+     * @notice Simple function to get credit score with RISC0 priority (no caching)
      * @param user Address of the user
-     * @return score Credit score (0-100)
-     * @return source Source of the credit score
-     * @return isVerified Whether the score is RISC0 verified
+     * @return Credit score (0-100)
      */
-    function getCreditScoreWithSource(address user) external view returns (
-        uint256 score,
-        string memory source,
-        bool isVerified
-    ) {
+    function _getCreditScore(address user) internal view returns (uint256) {
         // Try RISC0 verified score first
         if (useRISC0CreditScores && address(creditScoreContract) != address(0)) {
             try creditScoreContract.getCreditScore(user) returns (
@@ -376,43 +318,25 @@ contract LiquidityPool is
                     // Check if score is not expired
                     if (block.timestamp <= timestamp + SCORE_EXPIRY_PERIOD) {
                         uint256 convertedScore = convertFICOToContractScore(ficoScore);
-                        return (convertedScore, "RISC0_VERIFIED", true);
+                        return convertedScore;
                     }
                 }
             } catch {
-                // Fall through to next source
-            }
-        }
-
-        // Try IntegratedCreditSystem
-        if (address(creditSystem) != address(0)) {
-            try creditSystem.getUserCreditProfile(user) returns (
-                bool hasTradFi,
-                bool hasAccount,
-                bool hasNesting,
-                uint256 finalScore,
-                bool isEligible,
-                uint256 lastUpdate
-            ) {
-                if (finalScore > 0) {
-                    return (finalScore, "INTEGRATED_SYSTEM", false);
-                }
-            } catch {
-                // Fall through to final source
+                // Fall through to local scores
             }
         }
-
-        // Use local stored score as final fallback
-        uint256 localScore = creditScore[user];
-        return (localScore, "LOCAL_STORAGE", false);
+        
+        // Use local stored score as fallback
+        return creditScore[user];
     }
 
     /**
-     * @notice Internal function to get credit score with RISC0 priority
+     * @notice Get credit score and usage status in one call (for borrow function)
      * @param user Address of the user
-     * @return Credit score (0-100)
+     * @return score Credit score (0-100)
+     * @return canUseScore Whether score can be used for borrowing
      */
-    function _getCreditScore(address user) internal view returns (uint256) {
+    function _getCreditScoreForBorrowing(address user) internal view returns (uint256 score, bool canUseScore) {
         // Try RISC0 verified score first
         if (useRISC0CreditScores && address(creditScoreContract) != address(0)) {
             try creditScoreContract.getCreditScore(user) returns (
@@ -420,35 +344,21 @@ contract LiquidityPool is
                 bool isValid,
                 uint256 timestamp
             ) {
-                if (isValid && ficoScore > 0) {
-                    // Check if score is not expired
-                    if (block.timestamp <= timestamp + SCORE_EXPIRY_PERIOD) {
-                        return convertFICOToContractScore(ficoScore);
-                    }
+                if (isValid && ficoScore > 0 && block.timestamp <= timestamp + SCORE_EXPIRY_PERIOD) {
+                    score = convertFICOToContractScore(ficoScore);
+                    
+                    canUseScore = true; // Temporary -  this will be changed to actually use the logic from the Creditscore contract
+                    return (score, canUseScore);
                 }
             } catch {
-                // Fall through to existing logic
+
             }
         }
         
-        // Existing fallback logic from your original contract
-        if (address(creditSystem) != address(0)) {
-            try creditSystem.getUserCreditProfile(user) returns (
-                bool hasTradFi,
-                bool hasAccount,
-                bool hasNesting,
-                uint256 finalScore,
-                bool isEligible,
-                uint256 lastUpdate
-            ) {
-                if (finalScore > 0) {
-                    return finalScore;
-                }
-            } catch {
-                // Fall back to stored score if ZK system fails
-            }
-        }
-        return creditScore[user];
+        // Use local stored score as fallback
+        score = creditScore[user];
+        canUseScore = score > 0; // Local scores can always be used
+        return (score, canUseScore);
     }
 
     /**
@@ -673,15 +583,15 @@ contract LiquidityPool is
         return userDebt[msg.sender];
     }
 
-    function getUserHistory(address user) external view returns (UserHistory memory) {
-        return userHistory[user];
-    }
-
     // Get user's risk tier
     // Get user's risk tier (UPDATED to use RISC0 scores)
     function getRiskTier(address user) public view returns (RiskTier) {
         uint256 score = _getCreditScore(user); // Now uses RISC0 if available
+        return _getRiskTierFromScore(score);
+    }
 
+    // OPTIMIZED: Internal function to calculate risk tier from score (avoids redundant credit score calls)
+    function _getRiskTierFromScore(uint256 score) internal view returns (RiskTier) {
         for (uint256 i = 0; i < borrowTierConfigs.length; i++) {
             if (
                 score >= borrowTierConfigs[i].minScore &&
@@ -694,6 +604,20 @@ contract LiquidityPool is
         return RiskTier(borrowTierConfigs.length - 1); // Default to lowest tier
     }
 
+    // OPTIMIZED: Get borrow terms from pre-calculated tier (avoids redundant risk tier calculation)
+    function _getBorrowTermsFromTier(RiskTier tier) internal view returns (
+        uint256 collateralRatio,
+        int256 interestRateModifier,
+        uint256 maxLoanAmount
+    ) {
+        BorrowTierConfig memory config = borrowTierConfigs[uint256(tier)];
+        return (
+            config.collateralRatio,
+            config.interestRateModifier,
+            (totalFunds * config.maxLoanAmount) / 100
+        );
+    }
+
     // Admin function to update tier configurations
     function updateBorrowTier(
         uint256 tierIndex,
@@ -726,15 +650,10 @@ contract LiquidityPool is
         )
     {
         RiskTier tier = getRiskTier(user);
-        BorrowTierConfig memory config = borrowTierConfigs[uint256(tier)];
-        return (
-            config.collateralRatio,
-            config.interestRateModifier,
-            (totalFunds * config.maxLoanAmount) / 100
-        );
+        return _getBorrowTermsFromTier(tier);
     }
 
-    // Get dynamic borrower rate for a user based on utilization and risk tier
+    // OPTIMIZED: Get dynamic borrower rate for a user based on utilization and risk tier
     function getBorrowerRate(address user) public view returns (uint256) {
         uint256 totalSupplied = totalFunds;
         uint256 totalBorrowed = totalBorrowedAllTime - totalRepaidAllTime;
@@ -742,7 +661,10 @@ contract LiquidityPool is
             ? (totalBorrowed * 1e18) / totalSupplied
             : 0;
         uint256 baseRate = interestRateModel.getBorrowRate(utilization);
-        (, int256 modifierBps, ) = getBorrowTerms(user);
+        
+        // OPTIMIZED: Get tier and modifier in one call to avoid redundant credit score lookup
+        RiskTier tier = getRiskTier(user);
+        int256 modifierBps = borrowTierConfigs[uint256(tier)].interestRateModifier;
         uint256 adjustedRate = baseRate;
         if (modifierBps < 0) {
             adjustedRate = (baseRate * (10000 - uint256(-modifierBps))) / 10000;
@@ -775,6 +697,28 @@ contract LiquidityPool is
         return adjustedRate;
     }
 
+    // OPTIMIZED: Calculate borrow rate using pre-calculated tier data (avoids redundant tier config lookup)
+    function _calculateBorrowRateFromTierData(
+        uint256 amount,
+        RiskTier tier,
+        int256 modifierBps
+    ) internal view returns (uint256) {
+        uint256 totalSupplied = totalFunds;
+        uint256 totalBorrowed = totalBorrowedAllTime - totalRepaidAllTime;
+        uint256 utilization = 0;
+        if (totalSupplied > 0) {
+            utilization = (totalBorrowed * 1e18) / totalSupplied;
+        }
+        uint256 baseRate = interestRateModel.getBorrowRate(utilization);
+        uint256 adjustedRate = baseRate;
+        if (modifierBps < 0) {
+            adjustedRate = (baseRate * (10000 - uint256(-modifierBps))) / 10000;
+        } else if (modifierBps > 0) {
+            adjustedRate = (baseRate * (10000 + uint256(modifierBps))) / 10000;
+        }
+        return adjustedRate;
+    }
+
     // Helper function to create loan
     function _createLoan(uint256 amount, uint256 rate) internal {
         uint256 installment = amount / 12;
@@ -791,25 +735,19 @@ contract LiquidityPool is
     }
 
     function borrow(
-        uint256 amount, bytes32 nullifier
+        uint256 amount
     ) external payable whenNotPaused noReentrancy {
         // 1. Check for existing debt
         require(userDebt[msg.sender] == 0, "Repay your existing debt first");
-        require(!nullifierRegistry.isNullifierUsed(nullifier), "Proof already used!");
-        require(nullifierRegistry.hasSelectedAccounts(msg.sender), "Select accounts first");
-        nullifierRegistry.useNullifier(nullifier, msg.sender);
-
-
 
-        // 2. Get credit score (now uses RISC0 if available)
-        uint256 userCreditScore = _getCreditScore(msg.sender);
+        // 2. SIMPLIFIED: Get credit score and usage status in ONE call
+        (uint256 userCreditScore, bool canUseScore) = _getCreditScoreForBorrowing(msg.sender);
         
-        // NEW: Log which credit score source was used
-        (uint256 score, string memory source, bool isVerified) = this.getCreditScoreWithSource(msg.sender);
-        emit CreditScoreSourceUsed(msg.sender, source, score, userCreditScore);
-
-        // 3. Check for credit score (TIER_5)
-        RiskTier tier = getRiskTier(msg.sender);
+        // NOTE: something like this will be added to the creditscore contract
+        // require(canUseScore, "Credit score already used for borrowing");
+        
+        // 3. Calculate risk tier from fetched credit score (no redundant calls)
+        RiskTier tier = _getRiskTierFromScore(userCreditScore);
         require(tier != RiskTier.TIER_5, "Credit score too low");
 
         // 4. Check for available lending capacity (not more than half the pool)
@@ -818,22 +756,23 @@ contract LiquidityPool is
             "Borrow amount exceeds available lending capacity"
         );
 
-        // 5. Check for tier limit
-        (, , uint256 maxLoanAmount) = getBorrowTerms(msg.sender);
+        // 5. Get all borrow terms at once using pre-calculated tier
+        (uint256 requiredRatio, int256 interestRateModifier, uint256 maxLoanAmount) = _getBorrowTermsFromTier(tier);
+        
+        // 5a. Check for tier limit
         require(
             amount <= maxLoanAmount,
             "Borrow amount exceeds your tier limit"
         );
 
-        // 6. Check for sufficient collateral
-        (uint256 requiredRatio, , ) = getBorrowTerms(msg.sender);
+        // 6. Check for sufficient collateral (using already calculated requiredRatio)
         uint256 collateralValue = getTotalCollateralValue(msg.sender);
         require(
             collateralValue * 100 >= amount * requiredRatio,
             "Insufficient collateral for this loan"
         );
 
-        // 7. Calculate and apply origination fee
+        // 7. Calculate and apply origination fee (using already calculated tier)
         uint256 originationFee = 0;
         if (reserveAddress != address(0)) {
             originationFee =
@@ -853,8 +792,8 @@ contract LiquidityPool is
             );
         }
 
-        // 9. Calculate dynamic rate
-        uint256 adjustedRate = _calculateBorrowRate(amount, tier);
+        // 9. Calculate dynamic rate using pre-calculated tier and rate modifier
+        uint256 adjustedRate = _calculateBorrowRateFromTierData(amount, tier, interestRateModifier);
 
         // 10. Create loan
         require(amount >= 12, "Loan amount too small for amortization");
@@ -866,21 +805,16 @@ contract LiquidityPool is
         borrowedAmountByRiskTier[tier] += amount;
         totalBorrowedAllTime += amount;
 
-        // Update user history - set first interaction timestamp if this is their first borrow
-        if (userHistory[msg.sender].firstInteractionTimestamp == 0) {
-            userHistory[msg.sender].firstInteractionTimestamp = block.timestamp;
-            emit UserHistoryUpdated(msg.sender, "first_borrow", block.timestamp);
-        }
+        // 12. Mark credit score as used (not done yet)
+        // if (useRISC0CreditScores && address(creditScoreContract) != address(0)) {
+        //     creditScoreContract.markScoreAsUsed(msg.sender);
+        // }
 
-        // 12. Transfer net amount to borrower (after deducting origination fee)
+        // 13. Transfer net amount to borrower (after deducting origination fee)
         payable(msg.sender).transfer(netAmount);
 
-        // TODO: set creditscore to used in the CreditScore.sol contract
-        // call a function passing the user
-
         emit LoanDisbursed(msg.sender, amount, adjustedRate);
         emit Borrowed(msg.sender, amount);
-        emit BorrowWithNullifier(msg.sender, amount, nullifier);
     }
 
     function repayInstallment() external payable whenNotPaused {
@@ -913,11 +847,6 @@ contract LiquidityPool is
         userDebt[msg.sender] -= loan.installmentAmount;
         totalRepaidAllTime += loan.installmentAmount;
         loan.nextDueDate += 30 days;
-
-        // Update user history - increment successful payments
-        userHistory[msg.sender].succesfullPayments += 1;
-        emit UserHistoryUpdated(msg.sender, "installment_payment", block.timestamp);
-
         emit LoanInstallmentPaid(msg.sender, msg.value, loan.outstanding);
         if (loan.outstanding == 0) {
             loan.active = false;
@@ -939,10 +868,6 @@ contract LiquidityPool is
         RiskTier tier = getRiskTier(msg.sender);
         borrowedAmountByRiskTier[tier] -= repayAmount;
 
-        // Update user history - increment successful payments
-        userHistory[msg.sender].succesfullPayments += 1;
-        emit UserHistoryUpdated(msg.sender, "repayment", block.timestamp);
-
         // Clear liquidation status
         if (isLiquidatable[msg.sender]) {
             isLiquidatable[msg.sender] = false;
@@ -1004,64 +929,6 @@ contract LiquidityPool is
         return creditScore[user];
     }*/
 
-    function updateCreditScoreFromZK(address user, uint256 score) external {
-        require(
-            msg.sender == address(creditSystem),
-            "Only credit system can update"
-        );
-        require(score <= 100, "Score out of range");
-
-        uint256 oldScore = creditScore[user];
-        creditScore[user] = score;
-
-        emit CreditScoreAssigned(user, score);
-    }
-
-    /// @notice Set the integrated credit system
-    /// @param _creditSystem Address of the credit system contract
-    function setCreditSystem(address _creditSystem) external onlyTimelock {
-        address oldSystem = address(creditSystem);
-        creditSystem = IntegratedCreditSystem(_creditSystem);
-        emit CreditSystemUpdated(oldSystem, _creditSystem);
-    }
-
-    /// @notice Toggle ZK proof requirement for borrowing
-    /// @param required Whether ZK proofs are required
-    function setZKProofRequirement(bool required) external onlyTimelock {
-        zkProofRequired = required;
-        emit ZKProofRequirementToggled(required);
-    }
-
-    function getZKVerificationStatus(
-        address user
-    )
-        external
-        view
-        returns (
-            bool hasTradFi,
-            bool hasAccount,
-            bool hasNesting,
-            uint256 finalScore,
-            bool isEligible
-        )
-    {
-        if (address(creditSystem) != address(0)) {
-            try creditSystem.getUserCreditProfile(user) returns (
-                bool tradFi,
-                bool account,
-                bool nesting,
-                uint256 score,
-                bool eligible,
-                uint256 lastUpdate
-            ) {
-                return (tradFi, account, nesting, score, eligible);
-            } catch {
-                return (false, false, false, 0, false);
-            }
-        }
-        return (false, false, false, 0, false);
-    }
-
     function setPriceFeed(address token, address feed) external onlyTimelock {
         require(isAllowedCollateral[token], "Token not allowed as collateral");
         priceFeed[token] = feed;
@@ -1335,7 +1202,7 @@ contract LiquidityPool is
 
     // SIZE CONCERN
     // Get detailed loan information including payment schedule
-    /*function getLoanDetails(
+    function getLoanDetails(
         address user
     )
         external
@@ -1392,7 +1259,7 @@ contract LiquidityPool is
         } else {
             totalInstallmentsRemaining = 0;
         }
-    }*/
+    }
 
     // --- Interface hooks for LendingManager ---
     function clearCollateral(
@@ -1415,10 +1282,6 @@ contract LiquidityPool is
         // Remove all debt from borrowedAmountByRiskTier
         borrowedAmountByRiskTier[getRiskTier(user)] -= amount;
         totalRepaidAllTime += amount;
-
-        // Update user history - increment liquidations counter
-        userHistory[user].liquidations += 1;
-        emit UserHistoryUpdated(user, "liquidation", block.timestamp);
     }
 
     function withdrawPartialCollateral(
@@ -1476,7 +1339,7 @@ contract LiquidityPool is
         RiskTier tier,
         address user
     ) internal view returns (uint256) {
-        uint256 creditScore = _getCreditScore(user);
+        uint256 userCreditScore = _getCreditScore(user);
 
         // Base tier collateral ratios (from borrowTierConfigs)
         uint256 tierCollateralRatio = borrowTierConfigs[uint256(tier)]
@@ -1485,28 +1348,28 @@ contract LiquidityPool is
         // Apply credit score bonuses based on tier
         if (tier == RiskTier.TIER_1) {
             // Tier 1 (90-100 score): Already lowest ratio, minimal additional reduction
-            if (creditScore >= 95) {
+            if (userCreditScore >= 95) {
                 return (baseRequirement * 95) / 100; // 5% reduction
             }
         } else if (tier == RiskTier.TIER_2) {
             // Tier 2 (80-89 score): More significant reductions possible
-            if (creditScore >= 85) {
+            if (userCreditScore >= 85) {
                 return (baseRequirement * 90) / 100; // 10% reduction
-            } else if (creditScore >= 82) {
+            } else if (userCreditScore >= 82) {
                 return (baseRequirement * 95) / 100; // 5% reduction
             }
         } else if (tier == RiskTier.TIER_3) {
             // Tier 3 (70-79 score): Substantial reductions for improvement
-            if (creditScore >= 75) {
+            if (userCreditScore >= 75) {
                 return (baseRequirement * 85) / 100; // 15% reduction
-            } else if (creditScore >= 72) {
+            } else if (userCreditScore >= 72) {
                 return (baseRequirement * 92) / 100; // 8% reduction
             }
         } else if (tier == RiskTier.TIER_4) {
             // Tier 4 (60-69 score): Largest potential reductions
-            if (creditScore >= 65) {
+            if (userCreditScore >= 65) {
                 return (baseRequirement * 80) / 100; // 20% reduction
-            } else if (creditScore >= 62) {
+            } else if (userCreditScore >= 62) {
                 return (baseRequirement * 90) / 100; // 10% reduction
             }
         }
@@ -1518,7 +1381,7 @@ contract LiquidityPool is
     // SIZE CONCERN
 
     // View function to check potential collateral reduction for a user
-    /*function getCollateralReductionInfo(
+    function getCollateralReductionInfo(
         address user
     )
         external
@@ -1554,7 +1417,7 @@ contract LiquidityPool is
     }
     // SIZE CONCERN
     // Enhanced function to check maximum withdrawable collateral
-    /*function getMaxWithdrawableCollateral(
+    function getMaxWithdrawableCollateral(
         address user,
         address token
     ) external view returns (uint256 maxWithdrawable) {
@@ -1589,8 +1452,7 @@ contract LiquidityPool is
         if (maxWithdrawable > currentBalance) {
             maxWithdrawable = currentBalance;
         }
-    }*/
-
+    }
 
     // --- Additional View Functions for Test Compatibility ---
     function getExchangeRate() external pure returns (uint256) {
@@ -1610,11 +1472,6 @@ contract LiquidityPool is
         return 1e18; // 1.0 multiplier
     }
 
-    function toggleZKProofRequirement() external onlyTimelock {
-        zkProofRequired = !zkProofRequired;
-        emit ZKProofRequirementToggled(zkProofRequired);
-    }
-
     function getUtilizationRate() external view returns (uint256) {
         if (totalFunds == 0) return 0;
         uint256 totalBorrowed = 0;
@@ -1694,6 +1551,7 @@ contract LiquidityPool is
 
     // Error definitions
     error OnlyTimelockLiquidityPool();
+    
     function userPositions(address user) external view returns (uint256, uint256, uint256) {
         return (userDebt[user], getTotalCollateralValue(user), borrowTimestamp[user]);
     }
@@ -1702,3 +1560,4 @@ contract LiquidityPool is
         return (isLiquidatable[user], liquidationStartTime[user], GRACE_PERIOD);
     }
 }
+
diff --git a/Lending (BC) + frontend/loan-management/backend/scripts/check-deployment.js b/Lending (BC) + frontend/loan-management/backend/scripts/check-deployment.js
deleted file mode 100644
index 7d2f66b..0000000
--- a/Lending (BC) + frontend/loan-management/backend/scripts/check-deployment.js	
+++ /dev/null
@@ -1,124 +0,0 @@
-const { ethers } = require("hardhat");
-const fs = require('fs');
-const path = require('path');
-
-async function checkDeployment() {
-    console.log("üîç Checking current deployment status...\n");
-    
-    try {
-        // Get current network info
-        const [deployer] = await ethers.getSigners();
-        const provider = deployer.provider;
-        const network = await provider.getNetwork();
-        const latestBlock = await provider.getBlockNumber();
-        
-        console.log(`üì° Network: ${network.name} (Chain ID: ${network.chainId})`);
-        console.log(`üì¶ Latest block: ${latestBlock}`);
-        console.log(`üë§ Deployer: ${deployer.address}\n`);
-        
-        // Load frontend addresses
-        const frontendAddressesPath = path.join(__dirname, '../../frontend/src/addresses.json');
-        const contractAddressesPath = path.join(__dirname, '../../frontend/src/contractAddresses.js');
-        
-        let frontendAddresses = {};
-        let contractAddresses = {};
-        
-        // Check if frontend addresses exist
-        if (fs.existsSync(frontendAddressesPath)) {
-            frontendAddresses = JSON.parse(fs.readFileSync(frontendAddressesPath, 'utf8'));
-            console.log("‚úÖ Found frontend/src/addresses.json");
-        } else {
-            console.log("‚ùå Missing frontend/src/addresses.json");
-        }
-        
-        if (fs.existsSync(contractAddressesPath)) {
-            const contractAddressesContent = fs.readFileSync(contractAddressesPath, 'utf8');
-            // Extract localhost addresses from the file
-            const localhostMatch = contractAddressesContent.match(/localhost:\s*({[^}]+})/s);
-            if (localhostMatch) {
-                contractAddresses = JSON.parse(localhostMatch[1].replace(/"/g, '"'));
-                console.log("‚úÖ Found frontend/src/contractAddresses.js");
-            }
-        } else {
-            console.log("‚ùå Missing frontend/src/contractAddresses.js");
-        }
-        
-        // Check key contracts
-        const contractsToCheck = [
-            'LiquidityPool',
-            'LendingManager', 
-            'StablecoinManager',
-            'VotingToken',
-            'ProtocolGovernor'
-        ];
-        
-        console.log("\nüèóÔ∏è  Contract Deployment Status:");
-        console.log("=" .repeat(50));
-        
-        let allDeployed = true;
-        
-        for (const contractName of contractsToCheck) {
-            const address = frontendAddresses[contractName] || contractAddresses[contractName];
-            
-            if (!address) {
-                console.log(`‚ùå ${contractName}: No address found`);
-                allDeployed = false;
-                continue;
-            }
-            
-            try {
-                const code = await provider.getCode(address);
-                if (code === '0x') {
-                    console.log(`‚ùå ${contractName}: ${address} (No contract deployed)`);
-                    allDeployed = false;
-                } else {
-                    console.log(`‚úÖ ${contractName}: ${address} (Deployed)`);
-                }
-            } catch (error) {
-                console.log(`‚ùå ${contractName}: ${address} (Error: ${error.message})`);
-                allDeployed = false;
-            }
-        }
-        
-        console.log("\n" + "=".repeat(50));
-        
-        if (allDeployed) {
-            console.log("üéâ All contracts are properly deployed!");
-            console.log("‚úÖ Frontend should be able to connect successfully.");
-        } else {
-            console.log("‚ö†Ô∏è  Some contracts are missing or not deployed.");
-            console.log("üîß Run the deployment script:");
-            console.log("   npx hardhat run scripts/deployAll2.js --network localhost");
-        }
-        
-        // Check if addresses are in sync
-        const addressesMatch = JSON.stringify(frontendAddresses) === JSON.stringify(contractAddresses);
-        if (!addressesMatch && Object.keys(frontendAddresses).length > 0 && Object.keys(contractAddresses).length > 0) {
-            console.log("\n‚ö†Ô∏è  Address files are not in sync!");
-            console.log("   This might cause frontend issues.");
-        } else if (Object.keys(frontendAddresses).length > 0) {
-            console.log("\n‚úÖ Address files are in sync.");
-        }
-        
-        console.log("\nüìã Quick Commands:");
-        console.log("   Deploy contracts: npx hardhat run scripts/deployAll2.js --network localhost");
-        console.log("   Start frontend:   cd ../frontend && npm run dev");
-        console.log("   Check again:      node scripts/check-deployment.js");
-        
-    } catch (error) {
-        console.error("‚ùå Error checking deployment:", error.message);
-        
-        if (error.message.includes('could not detect network')) {
-            console.log("\nüí° Make sure Hardhat node is running:");
-            console.log("   npx hardhat node");
-        }
-    }
-}
-
-// Run the check
-checkDeployment()
-    .then(() => process.exit(0))
-    .catch((error) => {
-        console.error(error);
-        process.exit(1);
-    });
diff --git a/Lending (BC) + frontend/loan-management/backend/scripts/copy-artifacts.js b/Lending (BC) + frontend/loan-management/backend/scripts/copy-artifacts.js
index 5d6b935..23b2fcd 100644
--- a/Lending (BC) + frontend/loan-management/backend/scripts/copy-artifacts.js	
+++ b/Lending (BC) + frontend/loan-management/backend/scripts/copy-artifacts.js	
@@ -15,11 +15,6 @@ const contracts = [
     'MockRiscZeroVerifier',
     'NullifierRegistry'
 ];
-
-// OpenZeppelin contracts (different path)
-const openzeppelinContracts = [
-    'TimelockController'
-];
 const srcDir = path.join(__dirname, '../../backend/artifacts/contracts');
 const destDir = path.join(__dirname, '../../frontend/src/abis');
 
@@ -35,23 +30,6 @@ contracts.forEach(name => {
     }
 });
 
-// Copy OpenZeppelin contracts
-const ozSrcDir = path.join(__dirname, '../artifacts/@openzeppelin/contracts');
-openzeppelinContracts.forEach(name => {
-    let artifact;
-    if (name === 'TimelockController') {
-        artifact = path.join(ozSrcDir, `governance/TimelockController.sol/TimelockController.json`);
-    }
-    // Add more OpenZeppelin contracts here as needed
-
-    if (artifact && fs.existsSync(artifact)) {
-        fs.copyFileSync(artifact, path.join(destDir, `${name}.json`));
-        console.log(`Copied ${name} ABI from OpenZeppelin`);
-    } else {
-        console.warn(`OpenZeppelin artifact not found: ${artifact}`);
-    }
-});
-
 const mockContracts = [
     'MockPriceFeed',
     'OracleMock'
@@ -66,24 +44,4 @@ mockContracts.forEach(name => {
         console.warn(`Artifact not found: ${artifact}`);
     }
 });
-
-// Copy interface contracts
-const interfaceContracts = [
-    'ICreditScore',
-    'AggregatorV3Interface',
-    'IVotingToken'
-];
-const interfaceSrcDir = path.join(__dirname, '../../backend/artifacts/contracts/interfaces');
-interfaceContracts.forEach(name => {
-    const artifact = path.join(interfaceSrcDir, `${name}.sol/${name}.json`);
-    if (fs.existsSync(artifact)) {
-        // Copy ICreditScore as CreditScore for frontend compatibility
-        const destName = name === 'ICreditScore' ? 'CreditScore' : name;
-        fs.copyFileSync(artifact, path.join(destDir, `${destName}.json`));
-        console.log(`Copied ${name} ABI as ${destName}`);
-    } else {
-        console.warn(`Interface artifact not found: ${artifact}`);
-    }
-});
-
-console.log('copy-artifacts.js finished');
+console.log('copy-artifacts.js finished'); 
diff --git a/Lending (BC) + frontend/loan-management/backend/scripts/debug-borrow.js b/Lending (BC) + frontend/loan-management/backend/scripts/debug-borrow.js
deleted file mode 100644
index 817da06..0000000
--- a/Lending (BC) + frontend/loan-management/backend/scripts/debug-borrow.js	
+++ /dev/null
@@ -1,192 +0,0 @@
-const { ethers } = require("hardhat");
-const fs = require('fs');
-const path = require('path');
-
-// Helper function to generate unique nullifiers for borrow operations
-function generateNullifier(index) {
-    return ethers.keccak256(ethers.toUtf8Bytes(`debug_nullifier_${Date.now()}_${index}`));
-}
-
-async function main() {
-    console.log("üîç Debugging borrow operation...");
-    
-    try {
-        // Load deployed contract addresses
-        const addresses = JSON.parse(fs.readFileSync(path.join(__dirname, '../../frontend/src/addresses.json')));
-        const [deployer, lender1, lender2, borrower1, borrower2, ...others] = await ethers.getSigners();
-        
-        console.log(`üìã Using addresses:`);
-        console.log(`   LiquidityPool: ${addresses.LiquidityPool}`);
-        console.log(`   GlintToken: ${addresses.GlintToken}`);
-        console.log(`   NullifierRegistry: ${addresses.nullifierRegistry}`);
-        console.log(`   Borrower1: ${borrower1.address}`);
-        
-        // Load contracts
-        const LiquidityPool = await ethers.getContractAt('LiquidityPool', addresses.LiquidityPool);
-        const GlintToken = await ethers.getContractAt('GlintToken', addresses.GlintToken);
-        const NullifierRegistry = await ethers.getContractAt('NullifierRegistry', addresses.nullifierRegistry);
-        
-        // Check contract deployment
-        const lpCode = await ethers.provider.getCode(addresses.LiquidityPool);
-        const gtCode = await ethers.provider.getCode(addresses.GlintToken);
-        const nrCode = await ethers.provider.getCode(addresses.nullifierRegistry);
-        
-        console.log(`\nüì¶ Contract deployment status:`);
-        console.log(`   LiquidityPool: ${lpCode !== '0x' ? '‚úÖ Deployed' : '‚ùå Not deployed'}`);
-        console.log(`   GlintToken: ${gtCode !== '0x' ? '‚úÖ Deployed' : '‚ùå Not deployed'}`);
-        console.log(`   NullifierRegistry: ${nrCode !== '0x' ? '‚úÖ Deployed' : '‚ùå Not deployed'}`);
-        
-        // Check borrower1 balances
-        const borrower1EthBalance = await ethers.provider.getBalance(borrower1.address);
-        const borrower1GlintBalance = await GlintToken.balanceOf(borrower1.address);
-        
-        console.log(`\nüí∞ Borrower1 balances:`);
-        console.log(`   ETH: ${ethers.formatEther(borrower1EthBalance)}`);
-        console.log(`   GLINT: ${ethers.formatEther(borrower1GlintBalance)}`);
-        
-        // Check if borrower1 has GLINT tokens
-        if (borrower1GlintBalance === 0n) {
-            console.log(`\nüîß Minting GLINT tokens to borrower1...`);
-            await GlintToken.connect(deployer).mint(borrower1.address, ethers.parseEther('1000'));
-            const newBalance = await GlintToken.balanceOf(borrower1.address);
-            console.log(`   New GLINT balance: ${ethers.formatEther(newBalance)}`);
-        }
-        
-        // Setup NullifierRegistry account
-        console.log(`\nüîß Setting up NullifierRegistry account...`);
-        try {
-            await NullifierRegistry.connect(borrower1).selectAccounts([borrower1.address]);
-            console.log(`   ‚úÖ Account selected successfully`);
-        } catch (error) {
-            console.log(`   ‚ö†Ô∏è Account selection failed: ${error.message}`);
-        }
-        
-        // Check credit score
-        const creditScore = await LiquidityPool.creditScore(borrower1.address);
-        console.log(`\nüìä Borrower1 credit score: ${creditScore}`);
-        
-        if (creditScore === 0n) {
-            console.log(`üîß Setting credit score...`);
-            await LiquidityPool.connect(deployer).setCreditScore(borrower1.address, 85);
-            const newScore = await LiquidityPool.creditScore(borrower1.address);
-            console.log(`   New credit score: ${newScore}`);
-        }
-        
-        // Check pool balance
-        const poolBalance = await LiquidityPool.getBalance();
-        console.log(`\nüè¶ Pool balance: ${ethers.formatEther(poolBalance)} ETH`);
-        
-        if (poolBalance === 0n) {
-            console.log(`üîß Adding funds to pool...`);
-            await deployer.sendTransaction({
-                to: await LiquidityPool.getAddress(),
-                value: ethers.parseEther('10')
-            });
-            const newPoolBalance = await LiquidityPool.getBalance();
-            console.log(`   New pool balance: ${ethers.formatEther(newPoolBalance)} ETH`);
-        }
-        
-        // Check existing debt
-        const existingDebt = await LiquidityPool.userDebt(borrower1.address);
-        console.log(`\nüí≥ Existing debt: ${ethers.formatEther(existingDebt)} ETH`);
-        
-        // Check collateral setup
-        const isAllowedCollateral = await LiquidityPool.isAllowedCollateral(addresses.GlintToken);
-        console.log(`\nüîí Collateral status:`);
-        console.log(`   GLINT allowed as collateral: ${isAllowedCollateral}`);
-        
-        if (!isAllowedCollateral) {
-            console.log(`üîß Setting up GLINT as allowed collateral...`);
-            await LiquidityPool.connect(deployer).setAllowedCollateral(addresses.GlintToken, true);
-            console.log(`   ‚úÖ GLINT now allowed as collateral`);
-        }
-        
-        // Check price feed
-        const priceFeed = await LiquidityPool.priceFeed(addresses.GlintToken);
-        console.log(`   Price feed: ${priceFeed}`);
-        
-        // Step 1: Approve and deposit collateral
-        console.log(`\nüîß Step 1: Depositing collateral...`);
-        const collateralAmount = ethers.parseEther('100');
-        
-        try {
-            await GlintToken.connect(borrower1).approve(await LiquidityPool.getAddress(), collateralAmount);
-            console.log(`   ‚úÖ Approved ${ethers.formatEther(collateralAmount)} GLINT`);
-            
-            await LiquidityPool.connect(borrower1).depositCollateral(addresses.GlintToken, collateralAmount);
-            console.log(`   ‚úÖ Deposited ${ethers.formatEther(collateralAmount)} GLINT as collateral`);
-            
-            // Check collateral balance
-            const collateralBalance = await LiquidityPool.collateralBalance(borrower1.address, addresses.GlintToken);
-            console.log(`   Collateral balance: ${ethers.formatEther(collateralBalance)} GLINT`);
-            
-        } catch (error) {
-            console.log(`   ‚ùå Collateral deposit failed: ${error.message}`);
-            return;
-        }
-        
-        // Step 2: Attempt to borrow
-        console.log(`\nüîß Step 2: Attempting to borrow...`);
-        const borrowAmount = ethers.parseEther('0.5');
-        const nullifier = generateNullifier(1);
-        
-        console.log(`   Borrow amount: ${ethers.formatEther(borrowAmount)} ETH`);
-        console.log(`   Nullifier: ${nullifier}`);
-        
-        // Check if nullifier is already used
-        try {
-            const isNullifierUsed = await NullifierRegistry.isNullifierUsed(nullifier);
-            console.log(`   Nullifier already used: ${isNullifierUsed}`);
-        } catch (error) {
-            console.log(`   Could not check nullifier status: ${error.message}`);
-        }
-        
-        // Check borrow terms
-        try {
-            const borrowTerms = await LiquidityPool.getBorrowTerms(borrower1.address);
-            console.log(`   Borrow terms: collateralRatio=${borrowTerms[0]}, interestRateModifier=${borrowTerms[1]}, maxLoanAmount=${ethers.formatEther(borrowTerms[2])}`);
-        } catch (error) {
-            console.log(`   Could not get borrow terms: ${error.message}`);
-        }
-        
-        // Attempt the borrow
-        try {
-            console.log(`   üöÄ Executing borrow transaction...`);
-            const tx = await LiquidityPool.connect(borrower1).borrow(borrowAmount, nullifier);
-            await tx.wait();
-            console.log(`   ‚úÖ Borrow successful! Transaction hash: ${tx.hash}`);
-            
-            // Check new debt
-            const newDebt = await LiquidityPool.userDebt(borrower1.address);
-            console.log(`   New debt: ${ethers.formatEther(newDebt)} ETH`);
-            
-            // Check UserHistory
-            const history = await LiquidityPool.getUserHistory(borrower1.address);
-            console.log(`   UserHistory: firstInteraction=${history.firstInteractionTimestamp}, payments=${history.succesfullPayments}, liquidations=${history.liquidations}`);
-            
-        } catch (error) {
-            console.log(`   ‚ùå Borrow failed: ${error.message}`);
-            
-            // Try to get more detailed error information
-            try {
-                console.log(`\nüîç Attempting to call borrow with static call for better error info...`);
-                await LiquidityPool.connect(borrower1).borrow.staticCall(borrowAmount, nullifier);
-            } catch (staticError) {
-                console.log(`   Static call error: ${staticError.message}`);
-            }
-        }
-        
-    } catch (error) {
-        console.error("‚ùå Debug script failed:", error);
-    }
-}
-
-main()
-    .then(() => {
-        console.log("\nüéâ Debug script completed");
-        process.exit(0);
-    })
-    .catch((error) => {
-        console.error("‚ùå Debug script error:", error);
-        process.exit(1);
-    });
diff --git a/Lending (BC) + frontend/loan-management/backend/scripts/deployAll.js b/Lending (BC) + frontend/loan-management/backend/scripts/deployAll.js
index cf7f22d..e0493be 100644
--- a/Lending (BC) + frontend/loan-management/backend/scripts/deployAll.js	
+++ b/Lending (BC) + frontend/loan-management/backend/scripts/deployAll.js	
@@ -455,12 +455,13 @@ async function main() {
         MockPriceFeedUSDT: await usdtMockFeed.getAddress(),
         IntegratedCreditSystem: await creditSystem.getAddress()
     };
-    // Write to frontend/src/addresses.json
+    // Also write to frontend/src/addresses.json for compatibility
     const fs = require('fs');
     const path = require('path');
     try {
+        fs.writeFileSync(path.join(__dirname, '../../frontend/addresses.json'), JSON.stringify(addressesObj, null, 2));
         fs.writeFileSync(path.join(__dirname, '../../frontend/src/addresses.json'), JSON.stringify(addressesObj, null, 2));
-        console.log('Wrote addresses to frontend/src/addresses.json');
+        console.log('Wrote addresses to frontend/addresses.json and frontend/src/addresses.json');
         // Copy ABIs to frontend/src/abis
         execSync(`node "${path.join(__dirname, 'copy-artifacts.js')}"`, { stdio: 'inherit' });
     } catch (e) {
diff --git a/Lending (BC) + frontend/loan-management/backend/scripts/diagnose-borrow-issue.js b/Lending (BC) + frontend/loan-management/backend/scripts/diagnose-borrow-issue.js
deleted file mode 100644
index f822ea5..0000000
--- a/Lending (BC) + frontend/loan-management/backend/scripts/diagnose-borrow-issue.js	
+++ /dev/null
@@ -1,185 +0,0 @@
-const { ethers } = require("hardhat");
-const fs = require('fs');
-const path = require('path');
-
-// Helper function to generate unique nullifiers for borrow operations
-function generateNullifier(index) {
-    return ethers.keccak256(ethers.toUtf8Bytes(`diagnose_nullifier_${Date.now()}_${index}`));
-}
-
-async function main() {
-    console.log("üîç Diagnosing borrow issue...");
-    
-    try {
-        // Load deployed contract addresses
-        const addresses = JSON.parse(fs.readFileSync(path.join(__dirname, '../../frontend/src/addresses.json')));
-        const [deployer, lender1, lender2, borrower1] = await ethers.getSigners();
-        
-        console.log(`üìã Contract addresses:`);
-        console.log(`   LiquidityPool: ${addresses.LiquidityPool}`);
-        console.log(`   GlintToken: ${addresses.GlintToken}`);
-        console.log(`   MockPriceFeed: ${addresses.MockPriceFeed}`);
-        console.log(`   NullifierRegistry: ${addresses.nullifierRegistry}`);
-        
-        // Load contracts
-        const LiquidityPool = await ethers.getContractAt('LiquidityPool', addresses.LiquidityPool);
-        const GlintToken = await ethers.getContractAt('GlintToken', addresses.GlintToken);
-        const NullifierRegistry = await ethers.getContractAt('NullifierRegistry', addresses.nullifierRegistry);
-        const MockPriceFeed = await ethers.getContractAt('MockPriceFeed', addresses.MockPriceFeed);
-        
-        console.log(`\nüîß Setting up prerequisites...`);
-        
-        // 1. Ensure pool has funds
-        const poolBalance = await LiquidityPool.getBalance();
-        console.log(`   Pool balance: ${ethers.formatEther(poolBalance)} ETH`);
-        
-        if (poolBalance < ethers.parseEther('5')) {
-            console.log(`   Adding funds to pool...`);
-            await deployer.sendTransaction({
-                to: await LiquidityPool.getAddress(),
-                value: ethers.parseEther('10')
-            });
-            console.log(`   ‚úÖ Added 10 ETH to pool`);
-        }
-        
-        // 2. Setup credit score
-        const creditScore = await LiquidityPool.creditScore(borrower1.address);
-        console.log(`   Borrower1 credit score: ${creditScore}`);
-        
-        if (creditScore === 0n) {
-            console.log(`   Setting credit score...`);
-            await LiquidityPool.connect(deployer).setCreditScore(borrower1.address, 85);
-            console.log(`   ‚úÖ Set credit score to 85`);
-        }
-        
-        // 3. Setup GLINT as collateral
-        const isAllowed = await LiquidityPool.isAllowedCollateral(addresses.GlintToken);
-        console.log(`   GLINT allowed as collateral: ${isAllowed}`);
-        
-        if (!isAllowed) {
-            console.log(`   Allowing GLINT as collateral...`);
-            await LiquidityPool.connect(deployer).setAllowedCollateral(addresses.GlintToken, true);
-            console.log(`   ‚úÖ GLINT now allowed as collateral`);
-        }
-        
-        // 4. Setup price feed
-        const priceFeed = await LiquidityPool.priceFeed(addresses.GlintToken);
-        console.log(`   GLINT price feed: ${priceFeed}`);
-        
-        if (priceFeed === ethers.ZeroAddress) {
-            console.log(`   Setting price feed...`);
-            await LiquidityPool.connect(deployer).setPriceFeed(addresses.GlintToken, addresses.MockPriceFeed);
-            console.log(`   ‚úÖ Set price feed for GLINT`);
-        }
-        
-        // 5. Check price feed value
-        const price = await MockPriceFeed.latestRoundData();
-        console.log(`   GLINT price: $${ethers.formatUnits(price[1], 8)}`);
-        
-        // 6. Mint GLINT tokens to borrower1
-        const glintBalance = await GlintToken.balanceOf(borrower1.address);
-        console.log(`   Borrower1 GLINT balance: ${ethers.formatEther(glintBalance)}`);
-        
-        if (glintBalance < ethers.parseEther('500')) {
-            console.log(`   Minting GLINT tokens...`);
-            await GlintToken.connect(deployer).mint(borrower1.address, ethers.parseEther('1000'));
-            console.log(`   ‚úÖ Minted 1000 GLINT tokens`);
-        }
-        
-        // 7. Setup nullifier registry
-        console.log(`   Setting up nullifier registry...`);
-        try {
-            await NullifierRegistry.connect(borrower1).selectAccounts([borrower1.address]);
-            console.log(`   ‚úÖ Nullifier registry setup complete`);
-        } catch (error) {
-            console.log(`   ‚ö†Ô∏è Nullifier setup: ${error.message}`);
-        }
-        
-        console.log(`\nüí∞ Depositing collateral...`);
-        
-        // 8. Approve and deposit collateral
-        const collateralAmount = ethers.parseEther('500');
-        await GlintToken.connect(borrower1).approve(await LiquidityPool.getAddress(), collateralAmount);
-        await LiquidityPool.connect(borrower1).depositCollateral(addresses.GlintToken, collateralAmount);
-        
-        const collateralBalance = await LiquidityPool.collateralBalance(borrower1.address, addresses.GlintToken);
-        console.log(`   Deposited collateral: ${ethers.formatEther(collateralBalance)} GLINT`);
-        
-        // 9. Check collateral value
-        const totalCollateralValue = await LiquidityPool.getTotalCollateralValue(borrower1.address);
-        console.log(`   Total collateral value: ${ethers.formatEther(totalCollateralValue)} ETH`);
-        
-        // 10. Get borrow terms
-        const borrowTerms = await LiquidityPool.getBorrowTerms(borrower1.address);
-        console.log(`   Collateral ratio required: ${borrowTerms[0]}%`);
-        console.log(`   Interest rate modifier: ${borrowTerms[1]}`);
-        console.log(`   Max loan amount: ${ethers.formatEther(borrowTerms[2])} ETH`);
-        
-        console.log(`\nüöÄ Attempting to borrow...`);
-        
-        // 11. Try different borrow amounts
-        const borrowAmounts = [
-            ethers.parseEther('0.1'),
-            ethers.parseEther('0.5'),
-            ethers.parseEther('1.0'),
-            ethers.parseEther('2.0')
-        ];
-        
-        for (const amount of borrowAmounts) {
-            console.log(`\n   Testing borrow amount: ${ethers.formatEther(amount)} ETH`);
-            
-            const nullifier = generateNullifier(Math.floor(Math.random() * 1000));
-            
-            try {
-                // First try static call
-                await LiquidityPool.connect(borrower1).borrow.staticCall(amount, nullifier);
-                console.log(`     ‚úÖ Static call successful for ${ethers.formatEther(amount)} ETH`);
-                
-                // If static call works, try actual transaction
-                const tx = await LiquidityPool.connect(borrower1).borrow(amount, nullifier);
-                await tx.wait();
-                console.log(`     ‚úÖ Actual borrow successful! Hash: ${tx.hash}`);
-                
-                // Check debt
-                const debt = await LiquidityPool.userDebt(borrower1.address);
-                console.log(`     New debt: ${ethers.formatEther(debt)} ETH`);
-                
-                // Check UserHistory
-                const history = await LiquidityPool.getUserHistory(borrower1.address);
-                console.log(`     UserHistory: firstInteraction=${history.firstInteractionTimestamp}, payments=${history.succesfullPayments}, liquidations=${history.liquidations}`);
-                
-                break; // Success, exit loop
-                
-            } catch (error) {
-                console.log(`     ‚ùå Failed for ${ethers.formatEther(amount)} ETH: ${error.message}`);
-                
-                // Try to get more specific error
-                if (error.message.includes('revert')) {
-                    try {
-                        // Try to decode the revert reason
-                        const errorData = error.data;
-                        if (errorData) {
-                            console.log(`     Error data: ${errorData}`);
-                        }
-                    } catch (decodeError) {
-                        console.log(`     Could not decode error data`);
-                    }
-                }
-            }
-        }
-        
-    } catch (error) {
-        console.error("‚ùå Diagnosis failed:", error.message);
-        console.error(error.stack);
-    }
-}
-
-main()
-    .then(() => {
-        console.log("\nüéâ Diagnosis completed");
-        process.exit(0);
-    })
-    .catch((error) => {
-        console.error("‚ùå Diagnosis error:", error);
-        process.exit(1);
-    });
diff --git a/Lending (BC) + frontend/loan-management/backend/scripts/mockTransactions.js b/Lending (BC) + frontend/loan-management/backend/scripts/mockTransactions.js
index a9d9d93..41628e1 100644
--- a/Lending (BC) + frontend/loan-management/backend/scripts/mockTransactions.js	
+++ b/Lending (BC) + frontend/loan-management/backend/scripts/mockTransactions.js	
@@ -2,11 +2,6 @@ const fs = require('fs');
 const path = require('path');
 const { ethers, network } = require('hardhat');
 
-// Helper function to generate unique nullifiers for borrow operations
-function generateNullifier(index) {
-    return ethers.keccak256(ethers.toUtf8Bytes(`mock_nullifier_${Date.now()}_${index}`));
-}
-
 async function main() {
     // EVM time sanity check and short periods for local testing
     const provider = new ethers.JsonRpcProvider("http://localhost:8545");
@@ -26,13 +21,6 @@ async function main() {
     const addresses = JSON.parse(fs.readFileSync(path.join(__dirname, '../../frontend/src/addresses.json')));
     const [deployer, lender1, lender2, borrower1, borrower2, ...others] = await ethers.getSigners();
 
-    // Verify contract deployment and ABI compatibility
-    console.log('üîç Verifying contract deployment...');
-    const liquidityPoolCode = await ethers.provider.getCode(addresses.LiquidityPool);
-    if (liquidityPoolCode === '0x') {
-        throw new Error(`No contract deployed at LiquidityPool address ${addresses.LiquidityPool}. Please run: npx hardhat run scripts/deployAll2.js --network localhost`);
-    }
-
     // Output wallet info
     const roles = [
         { name: 'deployer', signer: deployer },
@@ -88,90 +76,6 @@ async function main() {
     const LendingManager = await ethers.getContractAt('LendingManager', addresses.LendingManager);
     const ProtocolGovernor = await ethers.getContractAt('ProtocolGovernor', addresses.ProtocolGovernor);
     const VotingToken = await ethers.getContractAt('VotingToken', addresses.VotingToken);
-    const NullifierRegistry = await ethers.getContractAt('NullifierRegistry', addresses.nullifierRegistry);
-
-    // Verify borrow function signature
-    console.log('üîç Checking borrow function signature...');
-    const borrowFunctions = LiquidityPool.interface.fragments.filter(f =>
-        f.type === 'function' && f.name === 'borrow'
-    );
-
-    if (borrowFunctions.length === 0) {
-        throw new Error('No borrow function found in LiquidityPool contract. Please recompile and redeploy contracts.');
-    }
-
-    const borrowFunc = borrowFunctions[0];
-    if (borrowFunc.inputs.length !== 2) {
-        throw new Error(`Borrow function has ${borrowFunc.inputs.length} parameters, expected 2 (amount, nullifier). Please redeploy contracts with updated UserHistory implementation.`);
-    }
-
-    console.log(`‚úÖ Borrow function signature verified: ${borrowFunc.format()}`);
-
-    // --- Setup NullifierRegistry accounts ---
-    console.log('üîß Setting up NullifierRegistry accounts...');
-
-    // Select accounts for nullifier generation (required before borrowing)
-    const borrowers = [borrower1, borrower2];
-    const liquidationBorrower = others[0]; // Get the liquidation borrower
-    const allBorrowers = [...borrowers, liquidationBorrower, deployer]; // Include deployer for admin operations
-
-    for (const borrower of allBorrowers) {
-        try {
-            console.log(`Setting up nullifier account for ${borrower.address}`);
-            await NullifierRegistry.connect(borrower).selectAccounts([borrower.address]);
-        } catch (error) {
-            console.log(`Warning: Failed to setup nullifier for ${borrower.address}: ${error.message}`);
-        }
-    }
-
-    console.log('‚úÖ NullifierRegistry accounts setup complete');
-
-    // --- Setup Prerequisites for Borrowing ---
-    console.log('üîß Setting up borrowing prerequisites...');
-
-    // Ensure pool has sufficient funds
-    const poolBalance = await LiquidityPool.getBalance();
-    console.log(`Current pool balance: ${ethers.formatEther(poolBalance)} ETH`);
-
-    if (poolBalance < ethers.parseEther('5')) {
-        console.log('Adding funds to pool...');
-        await deployer.sendTransaction({
-            to: await LiquidityPool.getAddress(),
-            value: ethers.parseEther('10')
-        });
-        const newBalance = await LiquidityPool.getBalance();
-        console.log(`New pool balance: ${ethers.formatEther(newBalance)} ETH`);
-    }
-
-    // Get timelock signer for admin operations
-    const timelockSigner = await ethers.getImpersonatedSigner(addresses.TimelockController);
-
-    // Fund the timelock with ETH for gas fees
-    await deployer.sendTransaction({
-        to: addresses.TimelockController,
-        value: ethers.parseEther('1')
-    });
-    console.log('‚úÖ Funded timelock with ETH for gas fees');
-
-    // Setup credit scores for borrowers (using timelock)
-    const borrowersToSetup = [borrower1, borrower2, liquidationBorrower];
-    for (const borrower of borrowersToSetup) {
-        const currentScore = await LiquidityPool.creditScore(borrower.address);
-        if (currentScore === 0n) {
-            console.log(`Setting credit score for ${borrower.address}`);
-            await LiquidityPool.connect(timelockSigner).setCreditScore(borrower.address, 85);
-        }
-    }
-
-    // Ensure GLINT token is set up as collateral (using timelock)
-    const glintTokenAddress = addresses.GlintToken;
-    const isAllowed = await LiquidityPool.isAllowedCollateral(glintTokenAddress);
-    if (!isAllowed) {
-        console.log('Setting up GLINT as allowed collateral...');
-        await LiquidityPool.connect(timelockSigner).setAllowedCollateral(glintTokenAddress, true);
-    }
-
-    console.log('‚úÖ Borrowing prerequisites setup complete');
 
     // --- Mint voting tokens to as many accounts as possible (up to 10 for dev/test) ---
     // --- Modified Minting Section ---
@@ -210,49 +114,33 @@ async function main() {
     // Impersonate timelock for admin actions
     const timelockSigner = await ethers.getImpersonatedSigner(addresses.TimelockController);
 
-    // Fund the timelock with ETH for gas fees
-    await deployer.sendTransaction({
-        to: addresses.TimelockController,
-        value: ethers.parseEther('1')
-    });
-    console.log('‚úÖ Funded timelock with ETH for gas fees');
-
     // --- Owner/Admin Activities (Deployer) ---
     console.log('Mock: Owner/Admin activities');
 
-    // Load GlintToken contract
-    const GlintToken = await ethers.getContractAt('GlintToken', glintTokenAddress);
-
-    // Note: Using timelock for admin operations (as required by contract)
-    // In production, these would be done through governance proposals
-
-    // Set credit scores for users (already done in prerequisites, but updating for demo)
+    // Set credit scores for users
     console.log('Mock: Admin sets credit score for lender1');
     await LiquidityPool.connect(timelockSigner).setCreditScore(lender1.address, 85);
 
     console.log('Mock: Admin sets credit score for lender2');
     await LiquidityPool.connect(timelockSigner).setCreditScore(lender2.address, 90);
 
-    console.log('Mock: Admin updates credit score for borrower1');
+    console.log('Mock: Admin sets credit score for borrower1');
     await LiquidityPool.connect(timelockSigner).setCreditScore(borrower1.address, 80);
 
-    console.log('Mock: Admin updates credit score for borrower2');
+    console.log('Mock: Admin sets credit score for borrower2');
     await LiquidityPool.connect(timelockSigner).setCreditScore(borrower2.address, 75);
 
-    // Ensure GLINT is whitelisted as collateral (already done in prerequisites)
-    console.log('Mock: Admin confirms GlintToken as collateral');
-    const isStillAllowed = await LiquidityPool.isAllowedCollateral(glintTokenAddress);
-    if (!isStillAllowed) {
-        await LiquidityPool.connect(timelockSigner).setAllowedCollateral(glintTokenAddress, true);
-    }
+    // --- More Admin Activities ---
+    const glintTokenAddress = addresses.GlintToken;
+    const GlintToken = await ethers.getContractAt('GlintToken', glintTokenAddress);
+
+    console.log('Mock: Admin whitelists GlintToken as collateral');
+    await LiquidityPool.connect(timelockSigner).setAllowedCollateral(glintTokenAddress, true);
 
     // Set price feed for GlintToken using MockPriceFeed
     const mockPriceFeedAddress = addresses.MockPriceFeed;
     console.log('Mock: Admin sets price feed for GlintToken');
-    const currentPriceFeed = await LiquidityPool.priceFeed(glintTokenAddress);
-    if (currentPriceFeed === ethers.ZeroAddress) {
-        await LiquidityPool.connect(timelockSigner).setPriceFeed(glintTokenAddress, mockPriceFeedAddress);
-    }
+    await LiquidityPool.connect(timelockSigner).setPriceFeed(glintTokenAddress, mockPriceFeedAddress);
 
     // Admin transfers tokens to borrowers for collateral
     console.log('Mock: Admin transfers GlintTokens to borrowers');
@@ -321,58 +209,19 @@ async function main() {
     // --- Mock Borrower Activities ---
 
     // Borrower1 activities
-    console.log('Mock: Borrower1 deposits 500 GlintToken as collateral');
-    const collateralAmount1 = ethers.parseEther('500');
+    console.log('Mock: Borrower1 deposits 100 GlintToken as collateral');
     await GlintToken.connect(borrower1).approve(await LiquidityPool.getAddress(), ethers.parseEther('1000'));
-    await LiquidityPool.connect(borrower1).depositCollateral(glintTokenAddress, collateralAmount1);
-    console.log(`  Deposited ${ethers.formatEther(collateralAmount1)} GLINT tokens`);
+    await LiquidityPool.connect(borrower1).depositCollateral(glintTokenAddress, ethers.parseEther('100'));
 
-    console.log('Mock: Borrower1 borrows 1 ETH');
-    const borrowAmount1 = ethers.parseEther('1');
-    const nullifier1 = generateNullifier(1);
-
-    // Debug information before borrow
-    console.log(`  Borrow amount: ${ethers.formatEther(borrowAmount1)} ETH`);
-    console.log(`  Nullifier: ${nullifier1}`);
-
-    try {
-        // Check prerequisites
-        const existingDebt = await LiquidityPool.userDebt(borrower1.address);
-        const creditScore = await LiquidityPool.creditScore(borrower1.address);
-        const collateralValue = await LiquidityPool.getTotalCollateralValue(borrower1.address);
-        const borrowTerms = await LiquidityPool.getBorrowTerms(borrower1.address);
-
-        console.log(`  Existing debt: ${ethers.formatEther(existingDebt)} ETH`);
-        console.log(`  Credit score: ${creditScore}`);
-        console.log(`  Collateral value: ${ethers.formatEther(collateralValue)} ETH`);
-        console.log(`  Max loan amount: ${ethers.formatEther(borrowTerms[2])} ETH`);
-        console.log(`  Required collateral ratio: ${borrowTerms[0]}%`);
-
-        await LiquidityPool.connect(borrower1).borrow(borrowAmount1, nullifier1);
-        console.log('  ‚úÖ Borrow successful');
-
-    } catch (error) {
-        console.log(`  ‚ùå Borrow failed: ${error.message}`);
-
-        // Try static call for better error info
-        try {
-            await LiquidityPool.connect(borrower1).borrow.staticCall(borrowAmount1, nullifier1);
-        } catch (staticError) {
-            console.log(`  Static call error: ${staticError.message}`);
-        }
-        throw error;
-    }
+    console.log('Mock: Borrower1 borrows 0.5 ETH');
+    await LiquidityPool.connect(borrower1).borrow(ethers.parseEther('0.5'));
 
     // Simulate some time passing
     await network.provider.send('evm_increaseTime', [5 * 24 * 3600]); // 5 days
     await network.provider.send('evm_mine');
 
-    console.log('Mock: Borrower1 repays 0.6 ETH (partial repayment)');
-    await LiquidityPool.connect(borrower1).repay({ value: ethers.parseEther('0.6') });
-
-    // Check UserHistory after first repayment
-    const borrower1HistoryAfterPartialRepay = await LiquidityPool.getUserHistory(borrower1.address);
-    console.log(`üìä Borrower1 History: First interaction: ${borrower1HistoryAfterPartialRepay.firstInteractionTimestamp}, Payments: ${borrower1HistoryAfterPartialRepay.succesfullPayments}, Liquidations: ${borrower1HistoryAfterPartialRepay.liquidations}`);
+    console.log('Mock: Borrower1 repays 0.3 ETH (partial repayment)');
+    await LiquidityPool.connect(borrower1).repay({ value: ethers.parseEther('0.3') });
 
     // More time passing
     await network.provider.send('evm_increaseTime', [2 * 24 * 3600]); // 2 days
@@ -384,21 +233,13 @@ async function main() {
         await LiquidityPool.connect(borrower1).repay({ value: remainingDebt });
     }
 
-    // Check final UserHistory for Borrower1
-    const borrower1FinalHistory = await LiquidityPool.getUserHistory(borrower1.address);
-    console.log(`üìä Borrower1 Final History: First interaction: ${borrower1FinalHistory.firstInteractionTimestamp}, Payments: ${borrower1FinalHistory.succesfullPayments}, Liquidations: ${borrower1FinalHistory.liquidations}`);
-
     // Borrower2 activities
-    console.log('Mock: Borrower2 deposits 200 GlintToken as collateral');
-    const collateralAmount2 = ethers.parseEther('200');
-    await GlintToken.connect(borrower2).approve(await LiquidityPool.getAddress(), ethers.parseEther('1000'));
-    await LiquidityPool.connect(borrower2).depositCollateral(glintTokenAddress, collateralAmount2);
-    console.log(`  Deposited ${ethers.formatEther(collateralAmount2)} GLINT tokens`);
+    console.log('Mock: Borrower2 deposits 80 GlintToken as collateral');
+    await GlintToken.connect(borrower2).approve(await LiquidityPool.getAddress(), ethers.parseEther('800'));
+    await LiquidityPool.connect(borrower2).depositCollateral(glintTokenAddress, ethers.parseEther('80'));
 
-    console.log('Mock: Borrower2 borrows 0.5 ETH');
-    const borrowAmount2 = ethers.parseEther('0.5');
-    const nullifier2 = generateNullifier(2);
-    await LiquidityPool.connect(borrower2).borrow(borrowAmount2, nullifier2);
+    console.log('Mock: Borrower2 borrows 0.3 ETH');
+    await LiquidityPool.connect(borrower2).borrow(ethers.parseEther('0.3'));
 
     // Time passing
     await network.provider.send('evm_increaseTime', [3 * 24 * 3600]); // 3 days
@@ -410,32 +251,25 @@ async function main() {
         await LiquidityPool.connect(borrower2).repay({ value: borrower2Debt });
     }
 
-    // Check UserHistory for Borrower2
-    const borrower2History = await LiquidityPool.getUserHistory(borrower2.address);
-    console.log(`üìä Borrower2 History: First interaction: ${borrower2History.firstInteractionTimestamp}, Payments: ${borrower2History.succesfullPayments}, Liquidations: ${borrower2History.liquidations}`);
-
     // --- Mock Liquidation Scenario ---
-    // Use the liquidation borrower already defined and setup above
+    // Create a third borrower for liquidation demo
+    const [, , , , , liquidationBorrower] = await ethers.getSigners();
 
     console.log('Mock: Setting up liquidation scenario');
     // Set a lower credit score for liquidation borrower
     await LiquidityPool.connect(timelockSigner).setCreditScore(liquidationBorrower.address, 60);
 
     // Transfer some GlintTokens to liquidation borrower
-    await GlintToken.connect(deployer).transfer(liquidationBorrower.address, ethers.parseEther('100'));
+    await GlintToken.connect(deployer).transfer(liquidationBorrower.address, ethers.parseEther('50'));
 
     // Deposit minimal collateral
     console.log('Mock: Liquidation borrower deposits minimal collateral');
-    const collateralAmount3 = ethers.parseEther('60');
-    await GlintToken.connect(liquidationBorrower).approve(await LiquidityPool.getAddress(), ethers.parseEther('100'));
-    await LiquidityPool.connect(liquidationBorrower).depositCollateral(glintTokenAddress, collateralAmount3);
-    console.log(`  Deposited ${ethers.formatEther(collateralAmount3)} GLINT tokens`);
+    await GlintToken.connect(liquidationBorrower).approve(await LiquidityPool.getAddress(), ethers.parseEther('50'));
+    await LiquidityPool.connect(liquidationBorrower).depositCollateral(glintTokenAddress, ethers.parseEther('30'));
 
     // Borrow close to the limit
     console.log('Mock: Liquidation borrower borrows near limit');
-    const borrowAmount3 = ethers.parseEther('0.3');
-    const nullifier3 = generateNullifier(3);
-    await LiquidityPool.connect(liquidationBorrower).borrow(borrowAmount3, nullifier3);
+    await LiquidityPool.connect(liquidationBorrower).borrow(ethers.parseEther('0.2'));
 
     // Simulate price drop or time passage that makes position unhealthy
     await network.provider.send('evm_increaseTime', [10 * 24 * 3600]); // 10 days
@@ -445,20 +279,8 @@ async function main() {
     console.log('Mock: Starting liquidation for unhealthy position');
     try {
         await LiquidityPool.connect(deployer).startLiquidation(liquidationBorrower.address);
-
-        // Simulate liquidation execution (normally done by LendingManager)
-        console.log('Mock: Executing liquidation (simulating LendingManager call)');
-        const liquidationBorrowerDebt = await LiquidityPool.userDebt(liquidationBorrower.address);
-        if (liquidationBorrowerDebt > 0) {
-            // This would normally be called by LendingManager after liquidation
-            await LiquidityPool.clearDebt(liquidationBorrower.address, liquidationBorrowerDebt);
-
-            // Check UserHistory after liquidation
-            const liquidationBorrowerHistory = await LiquidityPool.getUserHistory(liquidationBorrower.address);
-            console.log(`üìä Liquidated Borrower History: First interaction: ${liquidationBorrowerHistory.firstInteractionTimestamp}, Payments: ${liquidationBorrowerHistory.succesfullPayments}, Liquidations: ${liquidationBorrowerHistory.liquidations}`);
-        }
     } catch (error) {
-        console.log('Mock: Liquidation failed (position might still be healthy):', error.message);
+        console.log('Mock: Liquidation start failed (position might still be healthy):', error.message);
     }
 
     // --- All setup is done, now create and vote on proposal ---
@@ -653,44 +475,6 @@ async function main() {
     console.log('Proposal state after execute:', state, getStateName(state)); // 7 = Executed
     console.log('Mock: Proposal executed.');
 
-    // === UserHistory Summary ===
-    console.log('\n' + '='.repeat(60));
-    console.log('üìä USER HISTORY SUMMARY');
-    console.log('='.repeat(60));
-
-    // Use existing signers (already declared at the beginning of main function)
-
-    // Get all user histories
-    const users = [
-        { name: 'Borrower1', address: borrower1.address },
-        { name: 'Borrower2', address: borrower2.address },
-        { name: 'Liquidated Borrower', address: liquidationBorrower.address }
-    ];
-
-    for (const user of users) {
-        try {
-            const history = await LiquidityPool.getUserHistory(user.address);
-            const firstInteraction = history.firstInteractionTimestamp > 0
-                ? new Date(Number(history.firstInteractionTimestamp) * 1000).toLocaleString()
-                : 'Never';
-
-            console.log(`\nüë§ ${user.name} (${user.address}):`);
-            console.log(`   First Interaction: ${firstInteraction}`);
-            console.log(`   Successful Payments: ${history.succesfullPayments}`);
-            console.log(`   Liquidations: ${history.liquidations}`);
-
-            // Calculate simple performance score
-            const totalInteractions = Number(history.succesfullPayments) + Number(history.liquidations);
-            if (totalInteractions > 0) {
-                const score = (Number(history.succesfullPayments) / totalInteractions * 100).toFixed(1);
-                console.log(`   Performance Score: ${score}% (${history.succesfullPayments}/${totalInteractions})`);
-            }
-        } catch (error) {
-            console.log(`\nüë§ ${user.name}: Error fetching history - ${error.message}`);
-        }
-    }
-
-    console.log('\n' + '='.repeat(60));
     console.log('Mock transactions complete.');
 }
 
diff --git a/Lending (BC) + frontend/loan-management/backend/scripts/simple-borrow-test.js b/Lending (BC) + frontend/loan-management/backend/scripts/simple-borrow-test.js
deleted file mode 100644
index bae0401..0000000
--- a/Lending (BC) + frontend/loan-management/backend/scripts/simple-borrow-test.js	
+++ /dev/null
@@ -1,183 +0,0 @@
-const { ethers } = require("hardhat");
-const fs = require('fs');
-const path = require('path');
-
-// Helper function to generate unique nullifiers for borrow operations
-function generateNullifier(index) {
-    return ethers.keccak256(ethers.toUtf8Bytes(`simple_test_${Date.now()}_${index}`));
-}
-
-async function main() {
-    console.log("üß™ Simple borrow test...");
-    
-    try {
-        // Load deployed contract addresses
-        const addresses = JSON.parse(fs.readFileSync(path.join(__dirname, '../../frontend/src/addresses.json')));
-        const [deployer, , , borrower1] = await ethers.getSigners();
-        
-        console.log(`üìã Using borrower1: ${borrower1.address}`);
-        
-        // Load contracts
-        const LiquidityPool = await ethers.getContractAt('LiquidityPool', addresses.LiquidityPool);
-        const GlintToken = await ethers.getContractAt('GlintToken', addresses.GlintToken);
-        const NullifierRegistry = await ethers.getContractAt('NullifierRegistry', addresses.nullifierRegistry);
-
-        // Get timelock signer for admin operations
-        const timelockSigner = await ethers.getImpersonatedSigner(addresses.TimelockController);
-
-        // Fund the timelock with ETH for gas fees
-        await deployer.sendTransaction({
-            to: addresses.TimelockController,
-            value: ethers.parseEther('1')
-        });
-        console.log(`   ‚úÖ Funded timelock with ETH for gas fees`);
-        
-        console.log(`\nüîß Step 1: Setup prerequisites...`);
-        
-        // 1. Add funds to pool
-        const poolBalance = await LiquidityPool.getBalance();
-        if (poolBalance < ethers.parseEther('5')) {
-            await deployer.sendTransaction({
-                to: await LiquidityPool.getAddress(),
-                value: ethers.parseEther('10')
-            });
-            console.log(`   ‚úÖ Added 10 ETH to pool`);
-        } else {
-            console.log(`   ‚úÖ Pool has sufficient funds: ${ethers.formatEther(poolBalance)} ETH`);
-        }
-        
-        // 2. Set credit score (using timelock)
-        const creditScore = await LiquidityPool.creditScore(borrower1.address);
-        if (creditScore === 0n) {
-            await LiquidityPool.connect(timelockSigner).setCreditScore(borrower1.address, 85);
-            console.log(`   ‚úÖ Set credit score to 85`);
-        } else {
-            console.log(`   ‚úÖ Credit score already set: ${creditScore}`);
-        }
-
-        // 3. Allow GLINT as collateral (using timelock)
-        const isAllowed = await LiquidityPool.isAllowedCollateral(addresses.GlintToken);
-        if (!isAllowed) {
-            await LiquidityPool.connect(timelockSigner).setAllowedCollateral(addresses.GlintToken, true);
-            console.log(`   ‚úÖ Allowed GLINT as collateral`);
-        } else {
-            console.log(`   ‚úÖ GLINT already allowed as collateral`);
-        }
-
-        // 4. Set price feed (using timelock)
-        const priceFeed = await LiquidityPool.priceFeed(addresses.GlintToken);
-        if (priceFeed === ethers.ZeroAddress) {
-            await LiquidityPool.connect(timelockSigner).setPriceFeed(addresses.GlintToken, addresses.MockPriceFeed);
-            console.log(`   ‚úÖ Set price feed for GLINT`);
-        } else {
-            console.log(`   ‚úÖ Price feed already set: ${priceFeed}`);
-        }
-        
-        // 5. Mint GLINT tokens
-        const glintBalance = await GlintToken.balanceOf(borrower1.address);
-        if (glintBalance < ethers.parseEther('500')) {
-            await GlintToken.connect(deployer).mint(borrower1.address, ethers.parseEther('1000'));
-            console.log(`   ‚úÖ Minted 1000 GLINT tokens`);
-        } else {
-            console.log(`   ‚úÖ Sufficient GLINT balance: ${ethers.formatEther(glintBalance)}`);
-        }
-        
-        // 6. Setup nullifier registry
-        try {
-            await NullifierRegistry.connect(borrower1).selectAccounts([borrower1.address]);
-            console.log(`   ‚úÖ Setup nullifier registry`);
-        } catch (error) {
-            if (error.message.includes('already selected')) {
-                console.log(`   ‚úÖ Nullifier registry already setup`);
-            } else {
-                console.log(`   ‚ö†Ô∏è Nullifier setup issue: ${error.message}`);
-            }
-        }
-        
-        console.log(`\nüí∞ Step 2: Deposit collateral...`);
-        
-        // 7. Approve and deposit collateral
-        const collateralAmount = ethers.parseEther('500');
-        await GlintToken.connect(borrower1).approve(await LiquidityPool.getAddress(), collateralAmount);
-        console.log(`   ‚úÖ Approved ${ethers.formatEther(collateralAmount)} GLINT`);
-        
-        await LiquidityPool.connect(borrower1).depositCollateral(addresses.GlintToken, collateralAmount);
-        console.log(`   ‚úÖ Deposited ${ethers.formatEther(collateralAmount)} GLINT as collateral`);
-        
-        // Check collateral value
-        const totalCollateralValue = await LiquidityPool.getTotalCollateralValue(borrower1.address);
-        console.log(`   Total collateral value: ${ethers.formatEther(totalCollateralValue)} ETH`);
-        
-        console.log(`\nüöÄ Step 3: Attempt borrow...`);
-        
-        // 8. Get borrow terms
-        const borrowTerms = await LiquidityPool.getBorrowTerms(borrower1.address);
-        console.log(`   Collateral ratio required: ${borrowTerms[0]}%`);
-        console.log(`   Max loan amount: ${ethers.formatEther(borrowTerms[2])} ETH`);
-        
-        // 9. Try to borrow
-        const borrowAmount = ethers.parseEther('1');
-        const nullifier = generateNullifier(1);
-        
-        console.log(`   Attempting to borrow: ${ethers.formatEther(borrowAmount)} ETH`);
-        console.log(`   Using nullifier: ${nullifier}`);
-        
-        try {
-            // First try static call
-            await LiquidityPool.connect(borrower1).borrow.staticCall(borrowAmount, nullifier);
-            console.log(`   ‚úÖ Static call successful`);
-            
-            // Then try actual transaction
-            const tx = await LiquidityPool.connect(borrower1).borrow(borrowAmount, nullifier);
-            await tx.wait();
-            console.log(`   ‚úÖ Borrow successful! Hash: ${tx.hash}`);
-            
-            // Check results
-            const debt = await LiquidityPool.userDebt(borrower1.address);
-            console.log(`   New debt: ${ethers.formatEther(debt)} ETH`);
-            
-            const history = await LiquidityPool.getUserHistory(borrower1.address);
-            console.log(`   UserHistory: firstInteraction=${history.firstInteractionTimestamp}, payments=${history.succesfullPayments}, liquidations=${history.liquidations}`);
-            
-            console.log(`\nüéâ Test completed successfully!`);
-            
-        } catch (error) {
-            console.log(`   ‚ùå Borrow failed: ${error.message}`);
-            
-            // Try smaller amount
-            const smallerAmount = ethers.parseEther('0.5');
-            console.log(`\n   Trying smaller amount: ${ethers.formatEther(smallerAmount)} ETH`);
-            
-            try {
-                const nullifier2 = generateNullifier(2);
-                await LiquidityPool.connect(borrower1).borrow.staticCall(smallerAmount, nullifier2);
-                console.log(`   ‚úÖ Static call successful for smaller amount`);
-                
-                const tx = await LiquidityPool.connect(borrower1).borrow(smallerAmount, nullifier2);
-                await tx.wait();
-                console.log(`   ‚úÖ Smaller borrow successful! Hash: ${tx.hash}`);
-                
-                const debt = await LiquidityPool.userDebt(borrower1.address);
-                console.log(`   New debt: ${ethers.formatEther(debt)} ETH`);
-                
-            } catch (smallerError) {
-                console.log(`   ‚ùå Even smaller amount failed: ${smallerError.message}`);
-                throw smallerError;
-            }
-        }
-        
-    } catch (error) {
-        console.error("‚ùå Test failed:", error.message);
-        throw error;
-    }
-}
-
-main()
-    .then(() => {
-        console.log("\n‚úÖ Simple borrow test completed");
-        process.exit(0);
-    })
-    .catch((error) => {
-        console.error("‚ùå Test error:", error);
-        process.exit(1);
-    });
diff --git a/Lending (BC) + frontend/loan-management/backend/scripts/test-borrow-signature.js b/Lending (BC) + frontend/loan-management/backend/scripts/test-borrow-signature.js
deleted file mode 100644
index af0a23c..0000000
--- a/Lending (BC) + frontend/loan-management/backend/scripts/test-borrow-signature.js	
+++ /dev/null
@@ -1,90 +0,0 @@
-const { ethers } = require("hardhat");
-const fs = require('fs');
-const path = require('path');
-
-async function main() {
-    console.log("üîç Testing borrow function signature...");
-    
-    try {
-        // Load deployed contract addresses
-        const addresses = JSON.parse(fs.readFileSync(path.join(__dirname, '../../frontend/src/addresses.json')));
-        
-        // Get the LiquidityPool contract
-        const LiquidityPool = await ethers.getContractAt('LiquidityPool', addresses.LiquidityPool);
-        
-        // Check the contract interface
-        console.log("\nüìã Available borrow functions:");
-        const borrowFunctions = LiquidityPool.interface.fragments.filter(f => 
-            f.type === 'function' && f.name === 'borrow'
-        );
-        
-        borrowFunctions.forEach((func, index) => {
-            console.log(`${index + 1}. ${func.format()}`);
-        });
-        
-        if (borrowFunctions.length === 0) {
-            console.log("‚ùå No borrow functions found in contract interface!");
-            
-            // Show all functions for debugging
-            console.log("\nüìã All available functions:");
-            const allFunctions = LiquidityPool.interface.fragments.filter(f => f.type === 'function');
-            allFunctions.slice(0, 10).forEach((func, index) => {
-                console.log(`${index + 1}. ${func.format()}`);
-            });
-            if (allFunctions.length > 10) {
-                console.log(`... and ${allFunctions.length - 10} more functions`);
-            }
-        }
-        
-        // Test the function signature
-        if (borrowFunctions.length > 0) {
-            const borrowFunc = borrowFunctions[0];
-            console.log(`\n‚úÖ Found borrow function: ${borrowFunc.format()}`);
-            console.log(`   Parameters: ${borrowFunc.inputs.map(i => `${i.type} ${i.name}`).join(', ')}`);
-            
-            // Test if we can encode the function call
-            try {
-                const testAmount = ethers.parseEther('0.5');
-                const testNullifier = ethers.keccak256(ethers.toUtf8Bytes('test'));
-                
-                if (borrowFunc.inputs.length === 2) {
-                    const encoded = LiquidityPool.interface.encodeFunctionData('borrow', [testAmount, testNullifier]);
-                    console.log(`‚úÖ Successfully encoded borrow call with 2 parameters`);
-                } else if (borrowFunc.inputs.length === 1) {
-                    const encoded = LiquidityPool.interface.encodeFunctionData('borrow', [testAmount]);
-                    console.log(`‚úÖ Successfully encoded borrow call with 1 parameter`);
-                } else {
-                    console.log(`‚ùå Unexpected number of parameters: ${borrowFunc.inputs.length}`);
-                }
-            } catch (encodeError) {
-                console.log(`‚ùå Failed to encode function call: ${encodeError.message}`);
-            }
-        }
-        
-        // Check contract deployment
-        const code = await ethers.provider.getCode(addresses.LiquidityPool);
-        if (code === '0x') {
-            console.log(`‚ùå No contract deployed at ${addresses.LiquidityPool}`);
-        } else {
-            console.log(`‚úÖ Contract deployed at ${addresses.LiquidityPool}`);
-        }
-        
-    } catch (error) {
-        console.error("‚ùå Error testing borrow signature:", error.message);
-        
-        if (error.message.includes('no matching fragment')) {
-            console.log("\nüí° This suggests the contract ABI doesn't match the deployed contract.");
-            console.log("   Try recompiling and redeploying:");
-            console.log("   1. npx hardhat clean");
-            console.log("   2. npx hardhat compile");
-            console.log("   3. npx hardhat run scripts/deployAll2.js --network localhost");
-        }
-    }
-}
-
-main()
-    .then(() => process.exit(0))
-    .catch((error) => {
-        console.error(error);
-        process.exit(1);
-    });
diff --git a/Lending (BC) + frontend/loan-management/backend/scripts/test-mock-setup.js b/Lending (BC) + frontend/loan-management/backend/scripts/test-mock-setup.js
deleted file mode 100644
index 0e50225..0000000
--- a/Lending (BC) + frontend/loan-management/backend/scripts/test-mock-setup.js	
+++ /dev/null
@@ -1,140 +0,0 @@
-const { ethers } = require("hardhat");
-const fs = require('fs');
-const path = require('path');
-
-async function main() {
-    console.log("üß™ Testing mock transaction setup...");
-    
-    try {
-        // Load addresses
-        const addresses = JSON.parse(fs.readFileSync(path.join(__dirname, '../../frontend/src/addresses.json')));
-        const [deployer, , , borrower1] = await ethers.getSigners();
-        
-        console.log(`üìã Contract addresses:`);
-        console.log(`   LiquidityPool: ${addresses.LiquidityPool}`);
-        console.log(`   GlintToken: ${addresses.GlintToken}`);
-        console.log(`   NullifierRegistry: ${addresses.nullifierRegistry}`);
-        
-        // Load contracts
-        const LiquidityPool = await ethers.getContractAt('LiquidityPool', addresses.LiquidityPool);
-        const GlintToken = await ethers.getContractAt('GlintToken', addresses.GlintToken);
-        const NullifierRegistry = await ethers.getContractAt('NullifierRegistry', addresses.nullifierRegistry);
-        
-        // Check basic setup
-        console.log(`\nüîç Checking basic setup...`);
-        
-        // Pool balance
-        const poolBalance = await LiquidityPool.getBalance();
-        console.log(`   Pool balance: ${ethers.formatEther(poolBalance)} ETH`);
-        
-        // Borrower1 GLINT balance
-        const glintBalance = await GlintToken.balanceOf(borrower1.address);
-        console.log(`   Borrower1 GLINT balance: ${ethers.formatEther(glintBalance)}`);
-        
-        // Credit score
-        const creditScore = await LiquidityPool.creditScore(borrower1.address);
-        console.log(`   Borrower1 credit score: ${creditScore}`);
-        
-        // Collateral allowed
-        const isAllowed = await LiquidityPool.isAllowedCollateral(addresses.GlintToken);
-        console.log(`   GLINT allowed as collateral: ${isAllowed}`);
-        
-        // Check if we need to setup anything
-        let needsSetup = false;
-        
-        if (poolBalance < ethers.parseEther('5')) {
-            console.log(`‚ö†Ô∏è  Pool needs more funds`);
-            needsSetup = true;
-        }
-        
-        if (glintBalance === 0n) {
-            console.log(`‚ö†Ô∏è  Borrower1 needs GLINT tokens`);
-            needsSetup = true;
-        }
-        
-        if (creditScore === 0n) {
-            console.log(`‚ö†Ô∏è  Borrower1 needs credit score`);
-            needsSetup = true;
-        }
-        
-        if (!isAllowed) {
-            console.log(`‚ö†Ô∏è  GLINT needs to be allowed as collateral`);
-            needsSetup = true;
-        }
-        
-        if (needsSetup) {
-            console.log(`\nüîß Performing setup...`);
-            
-            // Add pool funds
-            if (poolBalance < ethers.parseEther('5')) {
-                await deployer.sendTransaction({
-                    to: await LiquidityPool.getAddress(),
-                    value: ethers.parseEther('10')
-                });
-                console.log(`   ‚úÖ Added funds to pool`);
-            }
-            
-            // Mint GLINT tokens
-            if (glintBalance === 0n) {
-                await GlintToken.connect(deployer).mint(borrower1.address, ethers.parseEther('1000'));
-                console.log(`   ‚úÖ Minted GLINT tokens to borrower1`);
-            }
-            
-            // Set credit score
-            if (creditScore === 0n) {
-                await LiquidityPool.connect(deployer).setCreditScore(borrower1.address, 85);
-                console.log(`   ‚úÖ Set credit score for borrower1`);
-            }
-            
-            // Allow GLINT as collateral
-            if (!isAllowed) {
-                await LiquidityPool.connect(deployer).setAllowedCollateral(addresses.GlintToken, true);
-                console.log(`   ‚úÖ Allowed GLINT as collateral`);
-            }
-            
-            // Setup nullifier registry
-            try {
-                await NullifierRegistry.connect(borrower1).selectAccounts([borrower1.address]);
-                console.log(`   ‚úÖ Setup nullifier registry for borrower1`);
-            } catch (error) {
-                console.log(`   ‚ö†Ô∏è  Nullifier setup: ${error.message}`);
-            }
-            
-        } else {
-            console.log(`\n‚úÖ All setup looks good!`);
-        }
-        
-        // Final status check
-        console.log(`\nüìä Final status:`);
-        const finalPoolBalance = await LiquidityPool.getBalance();
-        const finalGlintBalance = await GlintToken.balanceOf(borrower1.address);
-        const finalCreditScore = await LiquidityPool.creditScore(borrower1.address);
-        const finalIsAllowed = await LiquidityPool.isAllowedCollateral(addresses.GlintToken);
-        
-        console.log(`   Pool balance: ${ethers.formatEther(finalPoolBalance)} ETH`);
-        console.log(`   Borrower1 GLINT: ${ethers.formatEther(finalGlintBalance)}`);
-        console.log(`   Credit score: ${finalCreditScore}`);
-        console.log(`   GLINT allowed: ${finalIsAllowed}`);
-        
-        const allGood = finalPoolBalance >= ethers.parseEther('5') && 
-                       finalGlintBalance > 0n && 
-                       finalCreditScore > 0n && 
-                       finalIsAllowed;
-        
-        if (allGood) {
-            console.log(`\nüéâ Setup complete! Ready to run mock transactions.`);
-        } else {
-            console.log(`\n‚ùå Setup incomplete. Please check the issues above.`);
-        }
-        
-    } catch (error) {
-        console.error("‚ùå Test failed:", error.message);
-    }
-}
-
-main()
-    .then(() => process.exit(0))
-    .catch((error) => {
-        console.error(error);
-        process.exit(1);
-    });
diff --git a/Lending (BC) + frontend/loan-management/backend/test/IntegratedCreditSystem.account.test.js b/Lending (BC) + frontend/loan-management/backend/test/IntegratedCreditSystem.account.test.js
index d686328..6a6e560 100644
--- a/Lending (BC) + frontend/loan-management/backend/test/IntegratedCreditSystem.account.test.js	
+++ b/Lending (BC) + frontend/loan-management/backend/test/IntegratedCreditSystem.account.test.js	
@@ -26,9 +26,6 @@ describe("IntegratedCreditSystem - Account Tests", function() {
         );
         await creditSystem.waitForDeployment();
 
-        // Set IntegratedCreditSystem as admin in MockLiquidityPool so it can call setCreditScore
-        await mockLiquidityPool.setAdmin(await creditSystem.getAddress());
-
         // Mock account proof data
         mockAccountProofData = {
             account: user1.address,
diff --git a/Lending (BC) + frontend/loan-management/backend/test/IntegratedCreditSystem.admin.test.js b/Lending (BC) + frontend/loan-management/backend/test/IntegratedCreditSystem.admin.test.js
index 9b8f13c..e262a33 100644
--- a/Lending (BC) + frontend/loan-management/backend/test/IntegratedCreditSystem.admin.test.js	
+++ b/Lending (BC) + frontend/loan-management/backend/test/IntegratedCreditSystem.admin.test.js	
@@ -27,9 +27,6 @@ describe("IntegratedCreditSystem - Admin Tests", function() {
             await mockLiquidityPool.getAddress()
         );
         await creditSystem.waitForDeployment();
-
-        // Set IntegratedCreditSystem as admin in MockLiquidityPool so it can call setCreditScore
-        await mockLiquidityPool.setAdmin(await creditSystem.getAddress());
     });
 
     describe("Admin Functions", function() {
diff --git a/Lending (BC) + frontend/loan-management/backend/test/LiquidityPool.comprehensive.test.js b/Lending (BC) + frontend/loan-management/backend/test/LiquidityPool.comprehensive.test.js
index 66de782..f89cfec 100644
--- a/Lending (BC) + frontend/loan-management/backend/test/LiquidityPool.comprehensive.test.js	
+++ b/Lending (BC) + frontend/loan-management/backend/test/LiquidityPool.comprehensive.test.js	
@@ -2,7 +2,7 @@ const { expect } = require("chai");
 const { ethers } = require("hardhat");
 
 describe("LiquidityPool - Comprehensive Coverage", function () {
-    let liquidityPool, stablecoinManager, lendingManager, interestRateModel, creditSystem, votingToken, nullifierRegistry;
+    let liquidityPool, stablecoinManager, lendingManager, interestRateModel, creditSystem, votingToken;
     let mockToken, mockPriceFeed, timelock;
     let owner, user1, user2, user3, liquidator, borrower1, borrower2;
 
@@ -93,12 +93,6 @@ describe("LiquidityPool - Comprehensive Coverage", function () {
         );
         await lendingManager.waitForDeployment();
 
-        // Deploy NullifierRegistry
-        const NullifierRegistry = await ethers.getContractFactory("NullifierRegistry");
-        nullifierRegistry = await NullifierRegistry.deploy();
-        await nullifierRegistry.waitForDeployment();
-        await nullifierRegistry.initialize(owner.address);
-
         // Deploy LiquidityPool
         const LiquidityPool = await ethers.getContractFactory("LiquidityPool");
         liquidityPool = await LiquidityPool.deploy();
@@ -110,8 +104,7 @@ describe("LiquidityPool - Comprehensive Coverage", function () {
             await stablecoinManager.getAddress(),
             await lendingManager.getAddress(),
             await interestRateModel.getAddress(),
-            await creditSystem.getAddress(),
-            await nullifierRegistry.getAddress()
+            await creditSystem.getAddress()
         );
 
         // Set up connections (lending manager already set in initialize)
@@ -531,10 +524,9 @@ describe("LiquidityPool - Comprehensive Coverage", function () {
 
         it("should handle borrowing correctly", async function () {
             const borrowAmount = ethers.parseEther("30"); // Within tier 2 limit (40 ETH max)
-            const nullifier = ethers.keccak256(ethers.toUtf8Bytes(`nullifier_${Date.now()}_1`));
 
             await expect(
-                liquidityPool.connect(borrower1).borrow(borrowAmount, nullifier)
+                liquidityPool.connect(borrower1).borrow(borrowAmount)
             ).to.emit(liquidityPool, "Borrowed")
             .withArgs(borrower1.address, borrowAmount);
 
@@ -549,18 +541,16 @@ describe("LiquidityPool - Comprehensive Coverage", function () {
                 liquidityPool.interface.encodeFunctionData("togglePause", [])
             );
 
-            const nullifier = ethers.keccak256(ethers.toUtf8Bytes(`nullifier_${Date.now()}_2`));
             await expect(
-                liquidityPool.connect(borrower1).borrow(ethers.parseEther("30"), nullifier)
+                liquidityPool.connect(borrower1).borrow(ethers.parseEther("30"))
             ).to.be.revertedWith("Contract is paused");
         });
 
         it("should reject borrowing without sufficient collateral", async function () {
             const excessiveBorrow = ethers.parseEther("200"); // Too much for collateral
-            const nullifier = ethers.keccak256(ethers.toUtf8Bytes(`nullifier_${Date.now()}_3`));
 
             await expect(
-                liquidityPool.connect(borrower1).borrow(excessiveBorrow, nullifier)
+                liquidityPool.connect(borrower1).borrow(excessiveBorrow)
             ).to.be.revertedWith("Borrow amount exceeds available lending capacity");
         });
 
@@ -576,9 +566,8 @@ describe("LiquidityPool - Comprehensive Coverage", function () {
             const tierLimit = (poolBalance * 40n) / 100n;
             const excessiveBorrow = tierLimit + ethers.parseEther("1");
 
-            const nullifier = ethers.keccak256(ethers.toUtf8Bytes(`nullifier_${Date.now()}_4`));
             await expect(
-                liquidityPool.connect(borrower1).borrow(excessiveBorrow, nullifier)
+                liquidityPool.connect(borrower1).borrow(excessiveBorrow)
             ).to.be.revertedWith("Borrow amount exceeds your tier limit");
         });
 
@@ -628,8 +617,7 @@ describe("LiquidityPool - Comprehensive Coverage", function () {
                 await mockToken.getAddress(),
                 ethers.parseEther("200")
             );
-            const nullifier = ethers.keccak256(ethers.toUtf8Bytes(`nullifier_${Date.now()}_5`));
-            await liquidityPool.connect(borrower1).borrow(ethers.parseEther("30"), nullifier); // Within tier 2 limit (40 ETH max)
+            await liquidityPool.connect(borrower1).borrow(ethers.parseEther("30")); // Within tier 2 limit (40 ETH max)
         });
 
         it("should get loan details correctly", async function () {
@@ -1209,7 +1197,7 @@ describe("LiquidityPool - Comprehensive Coverage", function () {
 
         it("should handle loan information queries", async function () {
             // Test loan information retrieval using the actual function
-            const loanInfo = await liquidityPool.getLoan(user1.address);
+            const loanInfo = await liquidityPool.getLoanDetails(user1.address);
             expect(loanInfo.principal).to.equal(0); // Initially no loan
             expect(loanInfo.outstanding).to.equal(0);
             expect(loanInfo.active).to.be.false;
@@ -1402,8 +1390,7 @@ describe("LiquidityPool - Comprehensive Coverage", function () {
 
                 // Try to borrow (will likely fail due to no collateral, but tests the path)
                 try {
-                    const nullifier = ethers.keccak256(ethers.toUtf8Bytes(`nullifier_${Date.now()}_6`));
-                    await liquidityPool.connect(user1).borrow(ethers.parseEther("1.0"), nullifier);
+                    await liquidityPool.connect(user1).borrow(ethers.parseEther("1.0"));
                 } catch (error) {
                     // Expected to fail due to insufficient collateral
                     expect(error.message).to.include('revert');
@@ -1477,8 +1464,7 @@ describe("LiquidityPool - Comprehensive Coverage", function () {
 
                 // Try to borrow more than allowed
                 try {
-                    const nullifier = ethers.keccak256(ethers.toUtf8Bytes(`nullifier_${Date.now()}_7`));
-                    await liquidityPool.connect(user1).borrow(ethers.parseEther("1000000.0"), nullifier);
+                    await liquidityPool.connect(user1).borrow(ethers.parseEther("1000000.0"));
                 } catch (error) {
                     expect(error.message).to.include('revert');
                 }
diff --git a/Lending (BC) + frontend/loan-management/backend/test/LiquidityPool.coverage-boost.test.js b/Lending (BC) + frontend/loan-management/backend/test/LiquidityPool.coverage-boost.test.js
index c714d53..aff5f7e 100644
--- a/Lending (BC) + frontend/loan-management/backend/test/LiquidityPool.coverage-boost.test.js	
+++ b/Lending (BC) + frontend/loan-management/backend/test/LiquidityPool.coverage-boost.test.js	
@@ -3,7 +3,7 @@ const { ethers } = require("hardhat");
 
 describe("LiquidityPool - Coverage Boost", function () {
     let liquidityPool, stablecoinManager, lendingManager, interestRateModel, creditSystem, votingToken;
-    let mockToken, mockPriceFeed, timelock, nullifierRegistry;
+    let mockToken, mockPriceFeed, timelock;
     let owner, user1, user2, user3;
 
     beforeEach(async function () {
@@ -27,11 +27,6 @@ describe("LiquidityPool - Coverage Boost", function () {
         );
         await mockPriceFeed.waitForDeployment();
 
-        // Deploy NullifierRegistry
-        const NullifierRegistry = await ethers.getContractFactory("NullifierRegistry");
-        nullifierRegistry = await NullifierRegistry.deploy();
-        await nullifierRegistry.waitForDeployment();
-
         // Deploy StablecoinManager
         const StablecoinManager = await ethers.getContractFactory("StablecoinManager");
         stablecoinManager = await StablecoinManager.deploy(await timelock.getAddress());
@@ -92,8 +87,7 @@ describe("LiquidityPool - Coverage Boost", function () {
             await stablecoinManager.getAddress(),
             await lendingManager.getAddress(),
             await interestRateModel.getAddress(),
-            await creditSystem.getAddress(),
-            await nullifierRegistry.getAddress()
+            await creditSystem.getAddress()
         );
 
         // Set up relationships (functions may not exist, skip for now)
diff --git a/Lending (BC) + frontend/loan-management/backend/test/LiquidityPool.lines-80-push.test.js b/Lending (BC) + frontend/loan-management/backend/test/LiquidityPool.lines-80-push.test.js
index d44bdab..8b4c062 100644
--- a/Lending (BC) + frontend/loan-management/backend/test/LiquidityPool.lines-80-push.test.js	
+++ b/Lending (BC) + frontend/loan-management/backend/test/LiquidityPool.lines-80-push.test.js	
@@ -2,7 +2,7 @@ const { expect } = require("chai");
 const { ethers } = require("hardhat");
 
 describe("LiquidityPool - Lines 80% Push", function () {
-    let liquidityPool, stablecoinManager, lendingManager, interestRateModel, nullifierRegistry;
+    let liquidityPool, stablecoinManager, lendingManager, interestRateModel;
     let mockToken, mockPriceFeed, timelock;
     let owner, user1, user2, user3, user4;
 
@@ -77,19 +77,12 @@ describe("LiquidityPool - Lines 80% Push", function () {
         await liquidityPool.waitForDeployment();
 
         // Initialize LiquidityPool
-        // Deploy NullifierRegistry
-        const NullifierRegistry = await ethers.getContractFactory("NullifierRegistry");
-        nullifierRegistry = await NullifierRegistry.deploy();
-        await nullifierRegistry.waitForDeployment();
-        await nullifierRegistry.initialize(owner.address);
-
         await liquidityPool.initialize(
             await timelock.getAddress(),
             await stablecoinManager.getAddress(),
             await lendingManager.getAddress(),
             await interestRateModel.getAddress(),
-            await creditSystem.getAddress(),
-            await nullifierRegistry.getAddress()
+            await creditSystem.getAddress()
         );
 
         // Set up relationships (functions may not exist, skip for now)
@@ -242,9 +235,9 @@ describe("LiquidityPool - Lines 80% Push", function () {
                 expect(error).to.exist;
             }
 
-            // Test price feed existence (since isOracleHealthy is commented out)
-            const feedAddress = await liquidityPool.priceFeed(await mockToken.getAddress());
-            expect(feedAddress).to.not.equal(ethers.ZeroAddress);
+            // Test isOracleHealthy
+            const isHealthy = await liquidityPool.isOracleHealthy(await mockToken.getAddress());
+            expect(isHealthy).to.be.a('boolean');
 
             // Test getTokenValue
             try {
diff --git a/Lending (BC) + frontend/loan-management/backend/test/LiquidityPool.lines-boost.test.js b/Lending (BC) + frontend/loan-management/backend/test/LiquidityPool.lines-boost.test.js
index fc63f6a..4a18dd1 100644
--- a/Lending (BC) + frontend/loan-management/backend/test/LiquidityPool.lines-boost.test.js	
+++ b/Lending (BC) + frontend/loan-management/backend/test/LiquidityPool.lines-boost.test.js	
@@ -2,7 +2,7 @@ const { expect } = require("chai");
 const { ethers } = require("hardhat");
 
 describe("LiquidityPool - Lines Coverage Boost", function () {
-    let liquidityPool, stablecoinManager, lendingManager, interestRateModel, creditSystem, votingToken, nullifierRegistry;
+    let liquidityPool, stablecoinManager, lendingManager, interestRateModel, creditSystem, votingToken;
     let mockToken, mockPriceFeed, timelock;
     let owner, user1, user2, user3, user4;
 
@@ -79,12 +79,6 @@ describe("LiquidityPool - Lines Coverage Boost", function () {
         );
         await lendingManager.waitForDeployment();
 
-        // Deploy NullifierRegistry
-        const NullifierRegistry = await ethers.getContractFactory("NullifierRegistry");
-        nullifierRegistry = await NullifierRegistry.deploy();
-        await nullifierRegistry.waitForDeployment();
-        await nullifierRegistry.initialize(owner.address);
-
         // Deploy LiquidityPool (upgradeable contract)
         const LiquidityPool = await ethers.getContractFactory("LiquidityPool");
         liquidityPool = await LiquidityPool.deploy();
@@ -96,8 +90,7 @@ describe("LiquidityPool - Lines Coverage Boost", function () {
             await stablecoinManager.getAddress(),
             await lendingManager.getAddress(),
             await interestRateModel.getAddress(),
-            await creditSystem.getAddress(),
-            await nullifierRegistry.getAddress()
+            await creditSystem.getAddress()
         );
 
         // Set up relationships (functions may not exist, skip for now)
diff --git a/Lending (BC) + frontend/loan-management/backend/test/LiquidityPool.test.js b/Lending (BC) + frontend/loan-management/backend/test/LiquidityPool.test.js
index dc169be..208bab6 100644
--- a/Lending (BC) + frontend/loan-management/backend/test/LiquidityPool.test.js	
+++ b/Lending (BC) + frontend/loan-management/backend/test/LiquidityPool.test.js	
@@ -111,7 +111,7 @@ describe("LiquidityPool - Basic Tests", function() {
             ethers.ZeroAddress, // lendingManager (will be set later)
             await interestRateModel.getAddress(), // interestRateModel
             ethers.ZeroAddress, // creditSystem
-            await nullifierRegistry.getAddress() // nullifierRegistry
+            await nullifierRegistry.getAddress()
         );
 
         // Deploy LendingManager
diff --git a/Lending (BC) + frontend/loan-management/backend/test/UserHistory.test.js b/Lending (BC) + frontend/loan-management/backend/test/UserHistory.test.js
deleted file mode 100644
index 2646da8..0000000
--- a/Lending (BC) + frontend/loan-management/backend/test/UserHistory.test.js	
+++ /dev/null
@@ -1,330 +0,0 @@
-const { expect } = require("chai");
-const { ethers } = require("hardhat");
-
-// Helper function to generate a unique nullifier for borrow operations
-function generateNullifier(index = 0) {
-    return ethers.keccak256(ethers.toUtf8Bytes(`nullifier_${Date.now()}_${index}`));
-}
-
-describe("UserHistory Functionality", function () {
-    let liquidityPool, lendingManager, stablecoinManager, interestRateModel, votingToken, nullifierRegistry;
-    let owner, user1, user2, liquidator;
-    let mockToken, mockPriceFeed;
-
-
-    beforeEach(async function () {
-        [owner, user1, user2, liquidator] = await ethers.getSigners();
-
-        // Deploy VotingToken
-        const VotingToken = await ethers.getContractFactory("VotingToken");
-        votingToken = await VotingToken.deploy(owner.address);
-        await votingToken.waitForDeployment();
-
-        // Deploy StablecoinManager
-        const StablecoinManager = await ethers.getContractFactory("StablecoinManager");
-        stablecoinManager = await StablecoinManager.deploy(owner.address);
-        await stablecoinManager.waitForDeployment();
-
-        // Deploy InterestRateModel
-        const InterestRateModel = await ethers.getContractFactory("InterestRateModel");
-        interestRateModel = await InterestRateModel.deploy(
-            "0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419",
-            owner.address,
-            ethers.parseEther("0.05"),
-            ethers.parseEther("0.8"),
-            ethers.parseEther("0.1"),
-            ethers.parseEther("0.3"),
-            ethers.parseEther("0.1"),
-            ethers.parseEther("1.0"),
-            ethers.parseEther("0.05"),
-            ethers.parseEther("0.03"),
-            ethers.parseEther("0.2"),
-            86400
-        );
-        await interestRateModel.waitForDeployment();
-
-        // Deploy NullifierRegistry
-        const NullifierRegistry = await ethers.getContractFactory("NullifierRegistry");
-        nullifierRegistry = await NullifierRegistry.deploy();
-        await nullifierRegistry.waitForDeployment();
-        await nullifierRegistry.initialize(owner.address);
-
-        // Deploy LiquidityPool
-        const LiquidityPool = await ethers.getContractFactory("LiquidityPool");
-        liquidityPool = await LiquidityPool.deploy();
-        await liquidityPool.waitForDeployment();
-
-        // Initialize LiquidityPool
-        await liquidityPool.initialize(
-            owner.address, // timelock
-            await stablecoinManager.getAddress(),
-            ethers.ZeroAddress, // lendingManager (will be set later)
-            await interestRateModel.getAddress(),
-            ethers.ZeroAddress, // creditSystem
-            await nullifierRegistry.getAddress()
-        );
-
-        // Deploy LendingManager
-        const LendingManager = await ethers.getContractFactory("LendingManager");
-        lendingManager = await LendingManager.deploy(
-            await liquidityPool.getAddress(),
-            owner.address
-        );
-        await lendingManager.waitForDeployment();
-
-        // Set up contracts
-        await liquidityPool.setLendingManager(await lendingManager.getAddress());
-        await liquidityPool.setVotingToken(await votingToken.getAddress());
-
-        // Grant NULLIFIER_CONSUMER_ROLE to LiquidityPool
-        const NULLIFIER_CONSUMER_ROLE = await nullifierRegistry.NULLIFIER_CONSUMER_ROLE();
-        await nullifierRegistry.grantRole(NULLIFIER_CONSUMER_ROLE, await liquidityPool.getAddress());
-
-        // Grant MINTER_ROLE to LiquidityPool for voting token rewards
-        const MINTER_ROLE = await votingToken.MINTER_ROLE();
-        await votingToken.grantRole(MINTER_ROLE, await liquidityPool.getAddress());
-
-        // Setup accounts for nullifier generation
-        await nullifierRegistry.connect(owner).selectAccounts([owner.address]);
-        await nullifierRegistry.connect(user1).selectAccounts([user1.address]);
-        await nullifierRegistry.connect(user2).selectAccounts([user2.address]);
-        await nullifierRegistry.connect(liquidator).selectAccounts([liquidator.address]);
-
-        // Deploy mock token and price feed for collateral
-        const MockToken = await ethers.getContractFactory("MockToken");
-        mockToken = await MockToken.deploy("Mock Token", "MOCK");
-        await mockToken.waitForDeployment();
-
-        const MockPriceFeed = await ethers.getContractFactory("MockPriceFeed");
-        mockPriceFeed = await MockPriceFeed.deploy(200000000000, 8); // $2000 per token
-        await mockPriceFeed.waitForDeployment();
-
-        // Setup collateral
-        await liquidityPool.setAllowedCollateral(await mockToken.getAddress(), true);
-        await liquidityPool.setPriceFeed(await mockToken.getAddress(), await mockPriceFeed.getAddress());
-
-        // Set credit scores for users
-        await liquidityPool.setCreditScore(user1.address, 85);
-        await liquidityPool.setCreditScore(user2.address, 80);
-
-        // Mint tokens to users
-        await mockToken.mint(user1.address, ethers.parseEther("1000"));
-        await mockToken.mint(user2.address, ethers.parseEther("1000"));
-
-        // Add funds to the pool
-        await owner.sendTransaction({
-            to: await liquidityPool.getAddress(),
-            value: ethers.parseEther("100")
-        });
-    });
-
-    describe("UserHistory Struct", function () {
-        it("should initialize UserHistory with zero values", async function () {
-            const history = await liquidityPool.getUserHistory(user1.address);
-            expect(history.firstInteractionTimestamp).to.equal(0);
-            expect(history.liquidations).to.equal(0);
-            expect(history.succesfullPayments).to.equal(0);
-        });
-
-        it("should set firstInteractionTimestamp on first borrow", async function () {
-            // Setup collateral for borrowing
-            const borrowAmount = ethers.parseEther("1");
-            const collateralAmount = ethers.parseEther("2"); // 2x collateral
-
-            await mockToken.connect(user1).approve(await liquidityPool.getAddress(), collateralAmount);
-            await liquidityPool.connect(user1).depositCollateral(await mockToken.getAddress(), collateralAmount);
-
-            // Get timestamp before borrow
-            const blockBefore = await ethers.provider.getBlock("latest");
-            const timestampBefore = blockBefore.timestamp;
-
-            // Perform borrow
-            const nullifier = generateNullifier(1);
-            await liquidityPool.connect(user1).borrow(borrowAmount, nullifier, { value: 0 });
-
-            // Check that firstInteractionTimestamp was set
-            const history = await liquidityPool.getUserHistory(user1.address);
-            expect(history.firstInteractionTimestamp).to.be.greaterThan(timestampBefore);
-            expect(history.firstInteractionTimestamp).to.be.greaterThan(0);
-        });
-
-        it("should not update firstInteractionTimestamp on subsequent borrows", async function () {
-            // Setup and perform first borrow
-            const borrowAmount = ethers.parseEther("1");
-            const collateralAmount = ethers.parseEther("4"); // Extra collateral for multiple borrows
-
-            await mockToken.connect(user1).approve(await liquidityPool.getAddress(), collateralAmount);
-            await liquidityPool.connect(user1).depositCollateral(await mockToken.getAddress(), collateralAmount);
-
-            const nullifier1 = generateNullifier(1);
-            await liquidityPool.connect(user1).borrow(borrowAmount, nullifier1, { value: 0 });
-
-            const historyAfterFirst = await liquidityPool.getUserHistory(user1.address);
-            const firstTimestamp = historyAfterFirst.firstInteractionTimestamp;
-
-            // Repay the first loan
-            await liquidityPool.connect(user1).repay({ value: borrowAmount });
-
-            // Perform second borrow
-            const nullifier2 = generateNullifier(2);
-            await liquidityPool.connect(user1).borrow(borrowAmount, nullifier2, { value: 0 });
-
-            const historyAfterSecond = await liquidityPool.getUserHistory(user1.address);
-            expect(historyAfterSecond.firstInteractionTimestamp).to.equal(firstTimestamp);
-        });
-
-        it("should increment succesfullPayments on full repayment", async function () {
-            // Setup and borrow
-            const borrowAmount = ethers.parseEther("1");
-            const collateralAmount = ethers.parseEther("2");
-
-            await mockToken.connect(user1).approve(await liquidityPool.getAddress(), collateralAmount);
-            await liquidityPool.connect(user1).depositCollateral(await mockToken.getAddress(), collateralAmount);
-
-            const nullifier = generateNullifier(1);
-            await liquidityPool.connect(user1).borrow(borrowAmount, nullifier, { value: 0 });
-
-            // Check initial payment count
-            let history = await liquidityPool.getUserHistory(user1.address);
-            expect(history.succesfullPayments).to.equal(0);
-
-            // Repay the loan
-            await liquidityPool.connect(user1).repay({ value: borrowAmount });
-
-            // Check that successful payments was incremented
-            history = await liquidityPool.getUserHistory(user1.address);
-            expect(history.succesfullPayments).to.equal(1);
-        });
-
-        it("should increment succesfullPayments on installment payment", async function () {
-            // Setup and borrow
-            const borrowAmount = ethers.parseEther("12"); // Minimum for installments
-            const collateralAmount = ethers.parseEther("24");
-
-            await mockToken.connect(user1).approve(await liquidityPool.getAddress(), collateralAmount);
-            await liquidityPool.connect(user1).depositCollateral(await mockToken.getAddress(), collateralAmount);
-
-            const nullifier = generateNullifier(1);
-            await liquidityPool.connect(user1).borrow(borrowAmount, nullifier, { value: 0 });
-
-            // Fast forward to make installment due
-            await ethers.provider.send("evm_increaseTime", [30 * 24 * 60 * 60]); // 30 days
-            await ethers.provider.send("evm_mine");
-
-            // Check initial payment count
-            let history = await liquidityPool.getUserHistory(user1.address);
-            expect(history.succesfullPayments).to.equal(0);
-
-            // Pay installment
-            const installmentAmount = borrowAmount / 12n;
-            await liquidityPool.connect(user1).repayInstallment({ value: installmentAmount });
-
-            // Check that successful payments was incremented
-            history = await liquidityPool.getUserHistory(user1.address);
-            expect(history.succesfullPayments).to.equal(1);
-        });
-
-        it("should increment liquidations on liquidation", async function () {
-            // Setup and borrow
-            const borrowAmount = ethers.parseEther("1");
-            const collateralAmount = ethers.parseEther("1.5"); // Minimal collateral for easier liquidation
-
-            await mockToken.connect(user2).approve(await liquidityPool.getAddress(), collateralAmount);
-            await liquidityPool.connect(user2).depositCollateral(await mockToken.getAddress(), collateralAmount);
-
-            const nullifier = generateNullifier(1);
-            await liquidityPool.connect(user2).borrow(borrowAmount, nullifier, { value: 0 });
-
-            // Check initial liquidation count
-            let history = await liquidityPool.getUserHistory(user2.address);
-            expect(history.liquidations).to.equal(0);
-
-            // Simulate liquidation by calling clearDebt through LendingManager
-            await lendingManager.connect(owner).clearDebt(user2.address, borrowAmount);
-
-            // Check that liquidations was incremented
-            history = await liquidityPool.getUserHistory(user2.address);
-            expect(history.liquidations).to.equal(1);
-        });
-
-        it("should return correct UserHistory via getUserHistory", async function () {
-            // Setup and perform multiple operations
-            const borrowAmount = ethers.parseEther("1");
-            const collateralAmount = ethers.parseEther("2");
-
-            await mockToken.connect(user1).approve(await liquidityPool.getAddress(), collateralAmount);
-            await liquidityPool.connect(user1).depositCollateral(await mockToken.getAddress(), collateralAmount);
-
-            // First borrow
-            const nullifier1 = generateNullifier(1);
-            await liquidityPool.connect(user1).borrow(borrowAmount, nullifier1, { value: 0 });
-
-            // Repay
-            await liquidityPool.connect(user1).repay({ value: borrowAmount });
-
-            // Second borrow
-            const nullifier2 = generateNullifier(2);
-            await liquidityPool.connect(user1).borrow(borrowAmount, nullifier2, { value: 0 });
-
-            // Simulate liquidation
-            await liquidityPool.clearDebt(user1.address, borrowAmount);
-
-            // Get final history
-            const history = await liquidityPool.getUserHistory(user1.address);
-
-            expect(history.firstInteractionTimestamp).to.be.greaterThan(0);
-            expect(history.succesfullPayments).to.equal(1); // One repayment
-            expect(history.liquidations).to.equal(1); // One liquidation
-        });
-
-        it("should emit UserHistoryUpdated events", async function () {
-            // Setup collateral
-            const borrowAmount = ethers.parseEther("1");
-            const collateralAmount = ethers.parseEther("2");
-
-            await mockToken.connect(user1).approve(await liquidityPool.getAddress(), collateralAmount);
-            await liquidityPool.connect(user1).depositCollateral(await mockToken.getAddress(), collateralAmount);
-
-            // Test first borrow event
-            const nullifier = generateNullifier(1);
-            await expect(liquidityPool.connect(user1).borrow(borrowAmount, nullifier, { value: 0 }))
-                .to.emit(liquidityPool, "UserHistoryUpdated")
-                .withArgs(user1.address, "first_borrow", await ethers.provider.getBlock("latest").then(b => b.timestamp + 1));
-
-            // Test repayment event
-            await expect(liquidityPool.connect(user1).repay({ value: borrowAmount }))
-                .to.emit(liquidityPool, "UserHistoryUpdated")
-                .withArgs(user1.address, "repayment", await ethers.provider.getBlock("latest").then(b => b.timestamp + 1));
-        });
-
-        it("should handle multiple users independently", async function () {
-            // Setup for both users
-            const borrowAmount = ethers.parseEther("1");
-            const collateralAmount = ethers.parseEther("2");
-
-            // User1 operations
-            await mockToken.connect(user1).approve(await liquidityPool.getAddress(), collateralAmount);
-            await liquidityPool.connect(user1).depositCollateral(await mockToken.getAddress(), collateralAmount);
-            const nullifier1 = generateNullifier(1);
-            await liquidityPool.connect(user1).borrow(borrowAmount, nullifier1, { value: 0 });
-            await liquidityPool.connect(user1).repay({ value: borrowAmount });
-
-            // User2 operations
-            await mockToken.connect(user2).approve(await liquidityPool.getAddress(), collateralAmount);
-            await liquidityPool.connect(user2).depositCollateral(await mockToken.getAddress(), collateralAmount);
-            const nullifier2 = generateNullifier(2);
-            await liquidityPool.connect(user2).borrow(borrowAmount, nullifier2, { value: 0 });
-            await liquidityPool.clearDebt(user2.address, borrowAmount); // Simulate liquidation
-
-            // Check histories are independent
-            const history1 = await liquidityPool.getUserHistory(user1.address);
-            const history2 = await liquidityPool.getUserHistory(user2.address);
-
-            expect(history1.succesfullPayments).to.equal(1);
-            expect(history1.liquidations).to.equal(0);
-
-            expect(history2.succesfullPayments).to.equal(0);
-            expect(history2.liquidations).to.equal(1);
-        });
-    });
-});
diff --git a/Lending (BC) + frontend/loan-management/frontend/addresses.json b/Lending (BC) + frontend/loan-management/frontend/addresses.json
new file mode 100644
index 0000000..aa170e0
--- /dev/null
+++ b/Lending (BC) + frontend/loan-management/frontend/addresses.json	
@@ -0,0 +1,13 @@
+{
+  "VotingToken": "0xc3e53F4d16Ae77Db1c982e75a937B9f60FE63690",
+  "TimelockController": "0xE6E340D132b5f46d1e472DebcD681B2aBc16e57E",
+  "ProtocolGovernor": "0xa82fF9aFd8f496c3d6ac40E2a0F282E47488CFc9",
+  "StablecoinManager": "0x4826533B4897376654Bb4d4AD88B7faFD0C98528",
+  "InterestRateModel": "0x99bbA657f2BbC93c02D617f8bA121cB8Fc104Acf",
+  "LiquidityPool": "0x8f86403A4DE0BB5791fa46B8e795C547942fE4Cf",
+  "LendingManager": "0x9d4454B023096f34B160D6B654540c56A1F81688",
+  "GlintToken": "0xCD8a1C3ba11CF5ECfa6267617243239504a98d90",
+  "MockPriceFeed": "0x82e01223d51Eb87e16A03E24687EDF0F294da6f1",
+  "MockPriceFeedUSDC": "0x998abeb3E57409262aE5b751f60747921B33613E",
+  "MockPriceFeedUSDT": "0x70e0bA845a1A0F2DA3359C97E0285013525FFC49"
+}
\ No newline at end of file
diff --git a/Lending (BC) + frontend/loan-management/frontend/src/abis/AggregatorV3Interface.json b/Lending (BC) + frontend/loan-management/frontend/src/abis/AggregatorV3Interface.json
deleted file mode 100644
index 75542c6..0000000
--- a/Lending (BC) + frontend/loan-management/frontend/src/abis/AggregatorV3Interface.json	
+++ /dev/null
@@ -1,122 +0,0 @@
-{
-  "_format": "hh-sol-artifact-1",
-  "contractName": "AggregatorV3Interface",
-  "sourceName": "contracts/interfaces/AggregatorV3Interface.sol",
-  "abi": [
-    {
-      "inputs": [],
-      "name": "decimals",
-      "outputs": [
-        {
-          "internalType": "uint8",
-          "name": "",
-          "type": "uint8"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [],
-      "name": "description",
-      "outputs": [
-        {
-          "internalType": "string",
-          "name": "",
-          "type": "string"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "uint80",
-          "name": "_roundId",
-          "type": "uint80"
-        }
-      ],
-      "name": "getRoundData",
-      "outputs": [
-        {
-          "internalType": "uint80",
-          "name": "roundId",
-          "type": "uint80"
-        },
-        {
-          "internalType": "int256",
-          "name": "answer",
-          "type": "int256"
-        },
-        {
-          "internalType": "uint256",
-          "name": "startedAt",
-          "type": "uint256"
-        },
-        {
-          "internalType": "uint256",
-          "name": "updatedAt",
-          "type": "uint256"
-        },
-        {
-          "internalType": "uint80",
-          "name": "answeredInRound",
-          "type": "uint80"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [],
-      "name": "latestRoundData",
-      "outputs": [
-        {
-          "internalType": "uint80",
-          "name": "roundId",
-          "type": "uint80"
-        },
-        {
-          "internalType": "int256",
-          "name": "answer",
-          "type": "int256"
-        },
-        {
-          "internalType": "uint256",
-          "name": "startedAt",
-          "type": "uint256"
-        },
-        {
-          "internalType": "uint256",
-          "name": "updatedAt",
-          "type": "uint256"
-        },
-        {
-          "internalType": "uint80",
-          "name": "answeredInRound",
-          "type": "uint80"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [],
-      "name": "version",
-      "outputs": [
-        {
-          "internalType": "uint256",
-          "name": "",
-          "type": "uint256"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    }
-  ],
-  "bytecode": "0x",
-  "deployedBytecode": "0x",
-  "linkReferences": {},
-  "deployedLinkReferences": {}
-}
diff --git a/Lending (BC) + frontend/loan-management/frontend/src/abis/CreditScore.json b/Lending (BC) + frontend/loan-management/frontend/src/abis/CreditScore.json
index 059f899..68a6eda 100644
--- a/Lending (BC) + frontend/loan-management/frontend/src/abis/CreditScore.json	
+++ b/Lending (BC) + frontend/loan-management/frontend/src/abis/CreditScore.json	
@@ -1,128 +1,579 @@
 {
-  "_format": "hh-sol-artifact-1",
-  "contractName": "ICreditScore",
-  "sourceName": "contracts/interfaces/ICreditScore.sol",
   "abi": [
     {
-      "anonymous": false,
+      "type": "constructor",
       "inputs": [
         {
-          "indexed": true,
-          "internalType": "address",
-          "name": "user",
-          "type": "address"
-        },
-        {
-          "indexed": false,
-          "internalType": "uint64",
-          "name": "score",
-          "type": "uint64"
-        },
+          "name": "_verifier",
+          "type": "address",
+          "internalType": "contract IRiscZeroVerifier"
+        }
+      ],
+      "stateMutability": "nonpayable"
+    },
+    {
+      "type": "function",
+      "name": "SCORE_EXPIRY_PERIOD",
+      "inputs": [],
+      "outputs": [{ "name": "", "type": "uint256", "internalType": "uint256" }],
+      "stateMutability": "view"
+    },
+    {
+      "type": "function",
+      "name": "authorizeServer",
+      "inputs": [
+        { "name": "serverName", "type": "string", "internalType": "string" },
+        { "name": "authorized", "type": "bool", "internalType": "bool" }
+      ],
+      "outputs": [],
+      "stateMutability": "nonpayable"
+    },
+    {
+      "type": "function",
+      "name": "authorizeStateRootProvider",
+      "inputs": [
+        { "name": "providerName", "type": "string", "internalType": "string" },
+        { "name": "authorized", "type": "bool", "internalType": "bool" }
+      ],
+      "outputs": [],
+      "stateMutability": "nonpayable"
+    },
+    {
+      "type": "function",
+      "name": "authorizedServers",
+      "inputs": [{ "name": "", "type": "string", "internalType": "string" }],
+      "outputs": [{ "name": "", "type": "bool", "internalType": "bool" }],
+      "stateMutability": "view"
+    },
+    {
+      "type": "function",
+      "name": "authorizedStateRootProviders",
+      "inputs": [{ "name": "", "type": "string", "internalType": "string" }],
+      "outputs": [{ "name": "", "type": "bool", "internalType": "bool" }],
+      "stateMutability": "view"
+    },
+    {
+      "type": "function",
+      "name": "creditScores",
+      "inputs": [{ "name": "", "type": "address", "internalType": "address" }],
+      "outputs": [
+        { "name": "score", "type": "uint64", "internalType": "uint64" },
+        { "name": "serverName", "type": "string", "internalType": "string" },
         {
-          "indexed": false,
-          "internalType": "string",
-          "name": "serverName",
-          "type": "string"
+          "name": "stateRootProvider",
+          "type": "string",
+          "internalType": "string"
         },
+        { "name": "timestamp", "type": "uint256", "internalType": "uint256" },
+        { "name": "isValid", "type": "bool", "internalType": "bool" }
+      ],
+      "stateMutability": "view"
+    },
+    {
+      "type": "function",
+      "name": "getCreditScore",
+      "inputs": [
+        { "name": "user", "type": "address", "internalType": "address" }
+      ],
+      "outputs": [
+        { "name": "score", "type": "uint64", "internalType": "uint64" },
+        { "name": "isValid", "type": "bool", "internalType": "bool" },
+        { "name": "timestamp", "type": "uint256", "internalType": "uint256" }
+      ],
+      "stateMutability": "view"
+    },
+    {
+      "type": "function",
+      "name": "imageId",
+      "inputs": [],
+      "outputs": [{ "name": "", "type": "bytes32", "internalType": "bytes32" }],
+      "stateMutability": "view"
+    },
+    {
+      "type": "function",
+      "name": "isServerAuthorized",
+      "inputs": [
+        { "name": "serverName", "type": "string", "internalType": "string" }
+      ],
+      "outputs": [{ "name": "", "type": "bool", "internalType": "bool" }],
+      "stateMutability": "view"
+    },
+    {
+      "type": "function",
+      "name": "isStateRootProviderAuthorized",
+      "inputs": [
+        { "name": "providerName", "type": "string", "internalType": "string" }
+      ],
+      "outputs": [{ "name": "", "type": "bool", "internalType": "bool" }],
+      "stateMutability": "view"
+    },
+    {
+      "type": "function",
+      "name": "submitCreditScore",
+      "inputs": [
+        { "name": "score", "type": "uint64", "internalType": "uint64" },
+        { "name": "serverName", "type": "string", "internalType": "string" },
         {
-          "indexed": false,
-          "internalType": "string",
           "name": "stateRootProvider",
-          "type": "string"
+          "type": "string",
+          "internalType": "string"
         },
-        {
-          "indexed": false,
-          "internalType": "uint256",
-          "name": "timestamp",
-          "type": "uint256"
-        }
+        { "name": "seal", "type": "bytes", "internalType": "bytes" },
+        { "name": "journalData", "type": "bytes", "internalType": "bytes" }
       ],
-      "name": "CreditScoreSubmitted",
-      "type": "event"
+      "outputs": [],
+      "stateMutability": "nonpayable"
     },
     {
+      "type": "function",
+      "name": "testVerify",
+      "inputs": [
+        { "name": "seal", "type": "bytes", "internalType": "bytes" },
+        { "name": "journalData", "type": "bytes", "internalType": "bytes" }
+      ],
+      "outputs": [{ "name": "", "type": "bool", "internalType": "bool" }],
+      "stateMutability": "view"
+    },
+    {
+      "type": "function",
+      "name": "verifier",
       "inputs": [],
-      "name": "SCORE_EXPIRY_PERIOD",
       "outputs": [
         {
-          "internalType": "uint256",
           "name": "",
-          "type": "uint256"
+          "type": "address",
+          "internalType": "contract IRiscZeroVerifier"
         }
       ],
-      "stateMutability": "view",
-      "type": "function"
+      "stateMutability": "view"
     },
     {
+      "type": "event",
+      "name": "CreditScoreSubmitted",
       "inputs": [
         {
-          "internalType": "address",
           "name": "user",
-          "type": "address"
-        }
-      ],
-      "name": "getCreditScore",
-      "outputs": [
+          "type": "address",
+          "indexed": true,
+          "internalType": "address"
+        },
         {
-          "internalType": "uint64",
           "name": "score",
-          "type": "uint64"
+          "type": "uint64",
+          "indexed": false,
+          "internalType": "uint64"
         },
         {
-          "internalType": "bool",
-          "name": "isValid",
-          "type": "bool"
+          "name": "serverName",
+          "type": "string",
+          "indexed": false,
+          "internalType": "string"
+        },
+        {
+          "name": "stateRootProvider",
+          "type": "string",
+          "indexed": false,
+          "internalType": "string"
         },
         {
-          "internalType": "uint256",
           "name": "timestamp",
-          "type": "uint256"
+          "type": "uint256",
+          "indexed": false,
+          "internalType": "uint256"
         }
       ],
-      "stateMutability": "view",
-      "type": "function"
+      "anonymous": false
     },
     {
+      "type": "event",
+      "name": "ServerAuthorized",
       "inputs": [
         {
-          "internalType": "string",
           "name": "serverName",
-          "type": "string"
-        }
-      ],
-      "name": "isServerAuthorized",
-      "outputs": [
+          "type": "string",
+          "indexed": false,
+          "internalType": "string"
+        },
         {
-          "internalType": "bool",
-          "name": "",
-          "type": "bool"
+          "name": "authorized",
+          "type": "bool",
+          "indexed": false,
+          "internalType": "bool"
         }
       ],
-      "stateMutability": "view",
-      "type": "function"
+      "anonymous": false
     },
     {
+      "type": "event",
+      "name": "StateRootProviderAuthorized",
       "inputs": [
         {
-          "internalType": "string",
           "name": "providerName",
-          "type": "string"
-        }
-      ],
-      "name": "isStateRootProviderAuthorized",
-      "outputs": [
+          "type": "string",
+          "indexed": false,
+          "internalType": "string"
+        },
         {
-          "internalType": "bool",
-          "name": "",
-          "type": "bool"
+          "name": "authorized",
+          "type": "bool",
+          "indexed": false,
+          "internalType": "bool"
         }
       ],
-      "stateMutability": "view",
-      "type": "function"
+      "anonymous": false
     }
   ],
-  "bytecode": "0x",
-  "deployedBytecode": "0x",
-  "linkReferences": {},
-  "deployedLinkReferences": {}
+  "bytecode": {
+    "object": "0x60a060405234801561000f575f5ffd5b50604051611f19380380611f19833981810160405281019061003191906101d9565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505060015f60405161007490610258565b90815260200160405180910390205f6101000a81548160ff02191690831515021790555060015f6040516100a7906102dc565b90815260200160405180910390205f6101000a81548160ff02191690831515021790555060015f6040516100da9061033a565b90815260200160405180910390205f6101000a81548160ff02191690831515021790555060018060405161010d90610398565b90815260200160405180910390205f6101000a81548160ff021916908315150217905550600180604051610140906103f6565b90815260200160405180910390205f6101000a81548160ff0219169083151502179055505061040a565b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6101978261016e565b9050919050565b5f6101a88261018d565b9050919050565b6101b88161019e565b81146101c2575f5ffd5b50565b5f815190506101d3816101af565b92915050565b5f602082840312156101ee576101ed61016a565b5b5f6101fb848285016101c5565b91505092915050565b5f81905092915050565b7f6874747062696e2e6f72670000000000000000000000000000000000000000005f82015250565b5f610242600b83610204565b915061024d8261020e565b600b82019050919050565b5f61026282610236565b9150819050919050565b7f6f70656e62616e6b696e672d6170692d3832363236303732333630372e6575725f8201527f6f70652d77657374332e72756e2e617000000000000000000000000000000000602082015250565b5f6102c6603083610204565b91506102d18261026c565b603082019050919050565b5f6102e6826102ba565b9150819050919050565b7f7363687566612e646500000000000000000000000000000000000000000000005f82015250565b5f610324600983610204565b915061032f826102f0565b600982019050919050565b5f61034482610318565b9150819050919050565b7f736f6e69632d626c617a652e672e616c6368656d792e636f6d000000000000005f82015250565b5f610382601983610204565b915061038d8261034e565b601982019050919050565b5f6103a282610376565b9150819050919050565b7f696e667572612e636f6d000000000000000000000000000000000000000000005f82015250565b5f6103e0600a83610204565b91506103eb826103ac565b600a82019050919050565b5f610400826103d4565b9150819050919050565b608051611ae96104305f395f818161030c015281816103bf01526107e20152611ae95ff3fe608060405234801561000f575f5ffd5b50600436106100cd575f3560e01c806380bb72731161008a5780639688417a116100645780639688417a1461024d578063d3dd2bdf14610269578063ef3f7dd51461029b578063fbc4a11d146102b9576100cd565b806380bb7273146101cd57806382e949af146102015780638a2489f51461021d576100cd565b8063230928ae146100d15780632b7ac3f31461010157806344298b481461011f57806359705bb31461014f578063617530b81461016d5780636b2522c51461019d575b5f5ffd5b6100eb60048036038101906100e69190610da6565b6102d5565b6040516100f89190610e0b565b60405180910390f35b61010961030a565b6040516101169190610e9e565b60405180910390f35b61013960048036038101906101349190610fef565b61032e565b6040516101469190610e0b565b60405180910390f35b610157610362565b604051610164919061104e565b60405180910390f35b610187600480360381019061018291906110bc565b610369565b6040516101949190610e0b565b60405180910390f35b6101b760048036038101906101b29190610da6565b610477565b6040516101c49190610e0b565b60405180910390f35b6101e760048036038101906101e29190611175565b6104ad565b6040516101f8959493929190611222565b60405180910390f35b61021b600480360381019061021691906112ab565b61060a565b005b61023760048036038101906102329190610fef565b610681565b6040516102449190610e0b565b60405180910390f35b61026760048036038101906102629190611332565b6106b6565b005b610283600480360381019061027e9190611175565b610a6c565b60405161029293929190611428565b60405180910390f35b6102a3610c98565b6040516102b09190611475565b60405180910390f35b6102d360048036038101906102ce91906112ab565b610cbe565b005b5f5f83836040516102e79291906114bc565b90815260200160405180910390205f9054906101000a900460ff16905092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b5f818051602081018201805184825260208301602085012081835280955050505050505f915054906101000a900460ff1681565b6276a70081565b5f5f6002848460405161037d929190611502565b602060405180830381855afa158015610398573d5f5f3e3d5ffd5b5050506040513d601f19601f820116820180604052508101906103bb9190611544565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ab750e7587877fec4b63f6cd5bccd5b35d572b11fb788c0ab007024c24bf6bc94147efd242ab7b5f1b856040518563ffffffff1660e01b815260040161043e94939291906115ab565b5f6040518083038186803b158015610454575f5ffd5b505afa158015610466573d5f5f3e3d5ffd5b505050506001915050949350505050565b5f6001838360405161048a9291906114bc565b90815260200160405180910390205f9054906101000a900460ff16905092915050565b6002602052805f5260405f205f91509050805f015f9054906101000a900467ffffffffffffffff16908060010180546104e590611616565b80601f016020809104026020016040519081016040528092919081815260200182805461051190611616565b801561055c5780601f106105335761010080835404028352916020019161055c565b820191905f5260205f20905b81548152906001019060200180831161053f57829003601f168201915b50505050509080600201805461057190611616565b80601f016020809104026020016040519081016040528092919081815260200182805461059d90611616565b80156105e85780601f106105bf576101008083540402835291602001916105e8565b820191905f5260205f20905b8154815290600101906020018083116105cb57829003601f168201915b505050505090806003015490806004015f9054906101000a900460ff16905085565b806001848460405161061d9291906114bc565b90815260200160405180910390205f6101000a81548160ff0219169083151502179055507f8b30677d9def807fe752143a75db409c4815b5af551373236a7c11d43c5cf26283838360405161067493929190611672565b60405180910390a1505050565b6001818051602081018201805184825260208301602085012081835280955050505050505f915054906101000a900460ff1681565b5f88886040516106c79291906114bc565b90815260200160405180910390205f9054906101000a900460ff16610721576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610718906116ec565b60405180910390fd5b600186866040516107339291906114bc565b90815260200160405180910390205f9054906101000a900460ff1661078d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107849061177a565b60405180910390fd5b5f600283836040516107a0929190611502565b602060405180830381855afa1580156107bb573d5f5f3e3d5ffd5b5050506040513d601f19601f820116820180604052508101906107de9190611544565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ab750e7586867fec4b63f6cd5bccd5b35d572b11fb788c0ab007024c24bf6bc94147efd242ab7b5f1b856040518563ffffffff1660e01b815260040161086194939291906115ab565b5f6040518083038186803b158015610877575f5ffd5b505afa158015610889573d5f5f3e3d5ffd5b505050506040518060a001604052808b67ffffffffffffffff1681526020018a8a8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f82011690508083019250505050505050815260200188888080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505081526020014281526020016001151581525060025f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f820151815f015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060208201518160010190816109c5919061192f565b5060408201518160020190816109db919061192f565b50606082015181600301556080820151816004015f6101000a81548160ff0219169083151502179055509050503373ffffffffffffffffffffffffffffffffffffffff167f59abdce84fc86d3bcee9a9e6742207b50d88729f45d7b77fe797b44516ece6138b8b8b8b8b42604051610a58969594939291906119fe565b60405180910390a250505050505050505050565b5f5f5f5f60025f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206040518060a00160405290815f82015f9054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff168152602001600182018054610af890611616565b80601f0160208091040260200160405190810160405280929190818152602001828054610b2490611616565b8015610b6f5780601f10610b4657610100808354040283529160200191610b6f565b820191905f5260205f20905b815481529060010190602001808311610b5257829003601f168201915b50505050508152602001600282018054610b8890611616565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb490611616565b8015610bff5780601f10610bd657610100808354040283529160200191610bff565b820191905f5260205f20905b815481529060010190602001808311610be257829003601f168201915b5050505050815260200160038201548152602001600482015f9054906101000a900460ff16151515158152505090505f81608001518015610c4357505f8260600151115b8015610c6157506276a700826060015142610c5e9190611a80565b11155b90508015610c8157815f0151600183606001519450945094505050610c91565b5f5f836060015194509450945050505b9193909250565b7fec4b63f6cd5bccd5b35d572b11fb788c0ab007024c24bf6bc94147efd242ab7b5f1b81565b805f8484604051610cd09291906114bc565b90815260200160405180910390205f6101000a81548160ff0219169083151502179055507f4e15ca8481fedc5644b291bafb21560ebdf28f6f0b2ecdf7f0e841032c15cf67838383604051610d2793929190611672565b60405180910390a1505050565b5f604051905090565b5f5ffd5b5f5ffd5b5f5ffd5b5f5ffd5b5f5ffd5b5f5f83601f840112610d6657610d65610d45565b5b8235905067ffffffffffffffff811115610d8357610d82610d49565b5b602083019150836001820283011115610d9f57610d9e610d4d565b5b9250929050565b5f5f60208385031215610dbc57610dbb610d3d565b5b5f83013567ffffffffffffffff811115610dd957610dd8610d41565b5b610de585828601610d51565b92509250509250929050565b5f8115159050919050565b610e0581610df1565b82525050565b5f602082019050610e1e5f830184610dfc565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f819050919050565b5f610e66610e61610e5c84610e24565b610e43565b610e24565b9050919050565b5f610e7782610e4c565b9050919050565b5f610e8882610e6d565b9050919050565b610e9881610e7e565b82525050565b5f602082019050610eb15f830184610e8f565b92915050565b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610f0182610ebb565b810181811067ffffffffffffffff82111715610f2057610f1f610ecb565b5b80604052505050565b5f610f32610d34565b9050610f3e8282610ef8565b919050565b5f67ffffffffffffffff821115610f5d57610f5c610ecb565b5b610f6682610ebb565b9050602081019050919050565b828183375f83830152505050565b5f610f93610f8e84610f43565b610f29565b905082815260208101848484011115610faf57610fae610eb7565b5b610fba848285610f73565b509392505050565b5f82601f830112610fd657610fd5610d45565b5b8135610fe6848260208601610f81565b91505092915050565b5f6020828403121561100457611003610d3d565b5b5f82013567ffffffffffffffff81111561102157611020610d41565b5b61102d84828501610fc2565b91505092915050565b5f819050919050565b61104881611036565b82525050565b5f6020820190506110615f83018461103f565b92915050565b5f5f83601f84011261107c5761107b610d45565b5b8235905067ffffffffffffffff81111561109957611098610d49565b5b6020830191508360018202830111156110b5576110b4610d4d565b5b9250929050565b5f5f5f5f604085870312156110d4576110d3610d3d565b5b5f85013567ffffffffffffffff8111156110f1576110f0610d41565b5b6110fd87828801611067565b9450945050602085013567ffffffffffffffff8111156111205761111f610d41565b5b61112c87828801611067565b925092505092959194509250565b5f61114482610e24565b9050919050565b6111548161113a565b811461115e575f5ffd5b50565b5f8135905061116f8161114b565b92915050565b5f6020828403121561118a57611189610d3d565b5b5f61119784828501611161565b91505092915050565b5f67ffffffffffffffff82169050919050565b6111bc816111a0565b82525050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f6111f4826111c2565b6111fe81856111cc565b935061120e8185602086016111dc565b61121781610ebb565b840191505092915050565b5f60a0820190506112355f8301886111b3565b818103602083015261124781876111ea565b9050818103604083015261125b81866111ea565b905061126a606083018561103f565b6112776080830184610dfc565b9695505050505050565b61128a81610df1565b8114611294575f5ffd5b50565b5f813590506112a581611281565b92915050565b5f5f5f604084860312156112c2576112c1610d3d565b5b5f84013567ffffffffffffffff8111156112df576112de610d41565b5b6112eb86828701610d51565b935093505060206112fe86828701611297565b9150509250925092565b611311816111a0565b811461131b575f5ffd5b50565b5f8135905061132c81611308565b92915050565b5f5f5f5f5f5f5f5f5f60a08a8c03121561134f5761134e610d3d565b5b5f61135c8c828d0161131e565b99505060208a013567ffffffffffffffff81111561137d5761137c610d41565b5b6113898c828d01610d51565b985098505060408a013567ffffffffffffffff8111156113ac576113ab610d41565b5b6113b88c828d01610d51565b965096505060608a013567ffffffffffffffff8111156113db576113da610d41565b5b6113e78c828d01611067565b945094505060808a013567ffffffffffffffff81111561140a57611409610d41565b5b6114168c828d01611067565b92509250509295985092959850929598565b5f60608201905061143b5f8301866111b3565b6114486020830185610dfc565b611455604083018461103f565b949350505050565b5f819050919050565b61146f8161145d565b82525050565b5f6020820190506114885f830184611466565b92915050565b5f81905092915050565b5f6114a3838561148e565b93506114b0838584610f73565b82840190509392505050565b5f6114c8828486611498565b91508190509392505050565b5f81905092915050565b5f6114e983856114d4565b93506114f6838584610f73565b82840190509392505050565b5f61150e8284866114de565b91508190509392505050565b6115238161145d565b811461152d575f5ffd5b50565b5f8151905061153e8161151a565b92915050565b5f6020828403121561155957611558610d3d565b5b5f61156684828501611530565b91505092915050565b5f82825260208201905092915050565b5f61158a838561156f565b9350611597838584610f73565b6115a083610ebb565b840190509392505050565b5f6060820190508181035f8301526115c481868861157f565b90506115d36020830185611466565b6115e06040830184611466565b95945050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061162d57607f821691505b6020821081036116405761163f6115e9565b5b50919050565b5f61165183856111cc565b935061165e838584610f73565b61166783610ebb565b840190509392505050565b5f6040820190508181035f83015261168b818587611646565b905061169a6020830184610dfc565b949350505050565b7f54726164466920736572766572206e6f7420617574686f72697a6564000000005f82015250565b5f6116d6601c836111cc565b91506116e1826116a2565b602082019050919050565b5f6020820190508181035f830152611703816116ca565b9050919050565b7f537461746520726f6f742070726f7669646572206e6f7420617574686f72697a5f8201527f6564000000000000000000000000000000000000000000000000000000000000602082015250565b5f6117646022836111cc565b915061176f8261170a565b604082019050919050565b5f6020820190508181035f83015261179181611758565b9050919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026117f47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826117b9565b6117fe86836117b9565b95508019841693508086168417925050509392505050565b5f61183061182b61182684611036565b610e43565b611036565b9050919050565b5f819050919050565b61184983611816565b61185d61185582611837565b8484546117c5565b825550505050565b5f5f905090565b611874611865565b61187f818484611840565b505050565b5b818110156118a2576118975f8261186c565b600181019050611885565b5050565b601f8211156118e7576118b881611798565b6118c1846117aa565b810160208510156118d0578190505b6118e46118dc856117aa565b830182611884565b50505b505050565b5f82821c905092915050565b5f6119075f19846008026118ec565b1980831691505092915050565b5f61191f83836118f8565b9150826002028217905092915050565b611938826111c2565b67ffffffffffffffff81111561195157611950610ecb565b5b61195b8254611616565b6119668282856118a6565b5f60209050601f831160018114611997575f8415611985578287015190505b61198f8582611914565b8655506119f6565b601f1984166119a586611798565b5f5b828110156119cc578489015182556001820191506020850194506020810190506119a7565b868310156119e957848901516119e5601f8916826118f8565b8355505b6001600288020188555050505b505050505050565b5f608082019050611a115f8301896111b3565b8181036020830152611a24818789611646565b90508181036040830152611a39818587611646565b9050611a48606083018461103f565b979650505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f611a8a82611036565b9150611a9583611036565b9250828203905081811115611aad57611aac611a53565b5b9291505056fea26469706673582212200a9af86e9f738d5d4c9aa2f50a2db68e24d6356d9d90d292d60a16205aeb261564736f6c634300081e0033",
+    "sourceMap": "174:3849:0:-:0;;;1044:474;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1106:9;1095:20;;;;;;;;;;1161:4;1126:17;:32;;;;;:::i;:::-;;;;;;;;;;;;;;:39;;;;;;;;;;;;;;;;;;1247:4;1175:17;:69;;;;;:::i;:::-;;;;;;;;;;;;;;:76;;;;;;;;;;;;;;;;;;1365:4;1332:17;:30;;;;;:::i;:::-;;;;;;;;;;;;;;:37;;;;;;;;;;;;;;;;;;1448:4;1388:28;:57;;;;;:::i;:::-;;;;;;;;;;;;;;:64;;;;;;;;;;;;;;;;;;1507:4;1462:28;:42;;;;;:::i;:::-;;;;;;;;;;;;;;:49;;;;;;;;;;;;;;;;;;1044:474;174:3849;;88:117:35;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:123::-;632:7;661:24;679:5;661:24;:::i;:::-;650:35;;568:123;;;:::o;697:176::-;797:51;842:5;797:51;:::i;:::-;790:5;787:62;777:90;;863:1;860;853:12;777:90;697:176;:::o;879:197::-;963:5;994:6;988:13;979:22;;1010:60;1064:5;1010:60;:::i;:::-;879:197;;;;:::o;1082:405::-;1179:6;1228:2;1216:9;1207:7;1203:23;1199:32;1196:119;;;1234:79;;:::i;:::-;1196:119;1354:1;1379:91;1462:7;1453:6;1442:9;1438:22;1379:91;:::i;:::-;1369:101;;1325:155;1082:405;;;;:::o;1493:148::-;1595:11;1632:3;1617:18;;1493:148;;;;:::o;1647:161::-;1787:13;1783:1;1775:6;1771:14;1764:37;1647:161;:::o;1814:402::-;1974:3;1995:85;2077:2;2072:3;1995:85;:::i;:::-;1988:92;;2089:93;2178:3;2089:93;:::i;:::-;2207:2;2202:3;2198:12;2191:19;;1814:402;;;:::o;2222:381::-;2407:3;2429:148;2573:3;2429:148;:::i;:::-;2422:155;;2594:3;2587:10;;2222:381;;;:::o;2609:235::-;2749:34;2745:1;2737:6;2733:14;2726:58;2818:18;2813:2;2805:6;2801:15;2794:43;2609:235;:::o;2850:402::-;3010:3;3031:85;3113:2;3108:3;3031:85;:::i;:::-;3024:92;;3125:93;3214:3;3125:93;:::i;:::-;3243:2;3238:3;3234:12;3227:19;;2850:402;;;:::o;3258:381::-;3443:3;3465:148;3609:3;3465:148;:::i;:::-;3458:155;;3630:3;3623:10;;3258:381;;;:::o;3645:159::-;3785:11;3781:1;3773:6;3769:14;3762:35;3645:159;:::o;3810:400::-;3970:3;3991:84;4073:1;4068:3;3991:84;:::i;:::-;3984:91;;4084:93;4173:3;4084:93;:::i;:::-;4202:1;4197:3;4193:11;4186:18;;3810:400;;;:::o;4216:381::-;4401:3;4423:148;4567:3;4423:148;:::i;:::-;4416:155;;4588:3;4581:10;;4216:381;;;:::o;4603:175::-;4743:27;4739:1;4731:6;4727:14;4720:51;4603:175;:::o;4784:402::-;4944:3;4965:85;5047:2;5042:3;4965:85;:::i;:::-;4958:92;;5059:93;5148:3;5059:93;:::i;:::-;5177:2;5172:3;5168:12;5161:19;;4784:402;;;:::o;5192:381::-;5377:3;5399:148;5543:3;5399:148;:::i;:::-;5392:155;;5564:3;5557:10;;5192:381;;;:::o;5579:160::-;5719:12;5715:1;5707:6;5703:14;5696:36;5579:160;:::o;5745:402::-;5905:3;5926:85;6008:2;6003:3;5926:85;:::i;:::-;5919:92;;6020:93;6109:3;6020:93;:::i;:::-;6138:2;6133:3;6129:12;6122:19;;5745:402;;;:::o;6153:381::-;6338:3;6360:148;6504:3;6360:148;:::i;:::-;6353:155;;6525:3;6518:10;;6153:381;;;:::o;174:3849:0:-;;;;;;;;;;;;;;;;;;;;;;;",
+    "linkReferences": {}
+  },
+  "deployedBytecode": {
+    "object": "0x608060405234801561000f575f5ffd5b50600436106100cd575f3560e01c806380bb72731161008a5780639688417a116100645780639688417a1461024d578063d3dd2bdf14610269578063ef3f7dd51461029b578063fbc4a11d146102b9576100cd565b806380bb7273146101cd57806382e949af146102015780638a2489f51461021d576100cd565b8063230928ae146100d15780632b7ac3f31461010157806344298b481461011f57806359705bb31461014f578063617530b81461016d5780636b2522c51461019d575b5f5ffd5b6100eb60048036038101906100e69190610da6565b6102d5565b6040516100f89190610e0b565b60405180910390f35b61010961030a565b6040516101169190610e9e565b60405180910390f35b61013960048036038101906101349190610fef565b61032e565b6040516101469190610e0b565b60405180910390f35b610157610362565b604051610164919061104e565b60405180910390f35b610187600480360381019061018291906110bc565b610369565b6040516101949190610e0b565b60405180910390f35b6101b760048036038101906101b29190610da6565b610477565b6040516101c49190610e0b565b60405180910390f35b6101e760048036038101906101e29190611175565b6104ad565b6040516101f8959493929190611222565b60405180910390f35b61021b600480360381019061021691906112ab565b61060a565b005b61023760048036038101906102329190610fef565b610681565b6040516102449190610e0b565b60405180910390f35b61026760048036038101906102629190611332565b6106b6565b005b610283600480360381019061027e9190611175565b610a6c565b60405161029293929190611428565b60405180910390f35b6102a3610c98565b6040516102b09190611475565b60405180910390f35b6102d360048036038101906102ce91906112ab565b610cbe565b005b5f5f83836040516102e79291906114bc565b90815260200160405180910390205f9054906101000a900460ff16905092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b5f818051602081018201805184825260208301602085012081835280955050505050505f915054906101000a900460ff1681565b6276a70081565b5f5f6002848460405161037d929190611502565b602060405180830381855afa158015610398573d5f5f3e3d5ffd5b5050506040513d601f19601f820116820180604052508101906103bb9190611544565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ab750e7587877fec4b63f6cd5bccd5b35d572b11fb788c0ab007024c24bf6bc94147efd242ab7b5f1b856040518563ffffffff1660e01b815260040161043e94939291906115ab565b5f6040518083038186803b158015610454575f5ffd5b505afa158015610466573d5f5f3e3d5ffd5b505050506001915050949350505050565b5f6001838360405161048a9291906114bc565b90815260200160405180910390205f9054906101000a900460ff16905092915050565b6002602052805f5260405f205f91509050805f015f9054906101000a900467ffffffffffffffff16908060010180546104e590611616565b80601f016020809104026020016040519081016040528092919081815260200182805461051190611616565b801561055c5780601f106105335761010080835404028352916020019161055c565b820191905f5260205f20905b81548152906001019060200180831161053f57829003601f168201915b50505050509080600201805461057190611616565b80601f016020809104026020016040519081016040528092919081815260200182805461059d90611616565b80156105e85780601f106105bf576101008083540402835291602001916105e8565b820191905f5260205f20905b8154815290600101906020018083116105cb57829003601f168201915b505050505090806003015490806004015f9054906101000a900460ff16905085565b806001848460405161061d9291906114bc565b90815260200160405180910390205f6101000a81548160ff0219169083151502179055507f8b30677d9def807fe752143a75db409c4815b5af551373236a7c11d43c5cf26283838360405161067493929190611672565b60405180910390a1505050565b6001818051602081018201805184825260208301602085012081835280955050505050505f915054906101000a900460ff1681565b5f88886040516106c79291906114bc565b90815260200160405180910390205f9054906101000a900460ff16610721576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610718906116ec565b60405180910390fd5b600186866040516107339291906114bc565b90815260200160405180910390205f9054906101000a900460ff1661078d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107849061177a565b60405180910390fd5b5f600283836040516107a0929190611502565b602060405180830381855afa1580156107bb573d5f5f3e3d5ffd5b5050506040513d601f19601f820116820180604052508101906107de9190611544565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ab750e7586867fec4b63f6cd5bccd5b35d572b11fb788c0ab007024c24bf6bc94147efd242ab7b5f1b856040518563ffffffff1660e01b815260040161086194939291906115ab565b5f6040518083038186803b158015610877575f5ffd5b505afa158015610889573d5f5f3e3d5ffd5b505050506040518060a001604052808b67ffffffffffffffff1681526020018a8a8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f82011690508083019250505050505050815260200188888080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505081526020014281526020016001151581525060025f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f820151815f015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060208201518160010190816109c5919061192f565b5060408201518160020190816109db919061192f565b50606082015181600301556080820151816004015f6101000a81548160ff0219169083151502179055509050503373ffffffffffffffffffffffffffffffffffffffff167f59abdce84fc86d3bcee9a9e6742207b50d88729f45d7b77fe797b44516ece6138b8b8b8b8b42604051610a58969594939291906119fe565b60405180910390a250505050505050505050565b5f5f5f5f60025f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206040518060a00160405290815f82015f9054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff168152602001600182018054610af890611616565b80601f0160208091040260200160405190810160405280929190818152602001828054610b2490611616565b8015610b6f5780601f10610b4657610100808354040283529160200191610b6f565b820191905f5260205f20905b815481529060010190602001808311610b5257829003601f168201915b50505050508152602001600282018054610b8890611616565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb490611616565b8015610bff5780601f10610bd657610100808354040283529160200191610bff565b820191905f5260205f20905b815481529060010190602001808311610be257829003601f168201915b5050505050815260200160038201548152602001600482015f9054906101000a900460ff16151515158152505090505f81608001518015610c4357505f8260600151115b8015610c6157506276a700826060015142610c5e9190611a80565b11155b90508015610c8157815f0151600183606001519450945094505050610c91565b5f5f836060015194509450945050505b9193909250565b7fec4b63f6cd5bccd5b35d572b11fb788c0ab007024c24bf6bc94147efd242ab7b5f1b81565b805f8484604051610cd09291906114bc565b90815260200160405180910390205f6101000a81548160ff0219169083151502179055507f4e15ca8481fedc5644b291bafb21560ebdf28f6f0b2ecdf7f0e841032c15cf67838383604051610d2793929190611672565b60405180910390a1505050565b5f604051905090565b5f5ffd5b5f5ffd5b5f5ffd5b5f5ffd5b5f5ffd5b5f5f83601f840112610d6657610d65610d45565b5b8235905067ffffffffffffffff811115610d8357610d82610d49565b5b602083019150836001820283011115610d9f57610d9e610d4d565b5b9250929050565b5f5f60208385031215610dbc57610dbb610d3d565b5b5f83013567ffffffffffffffff811115610dd957610dd8610d41565b5b610de585828601610d51565b92509250509250929050565b5f8115159050919050565b610e0581610df1565b82525050565b5f602082019050610e1e5f830184610dfc565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f819050919050565b5f610e66610e61610e5c84610e24565b610e43565b610e24565b9050919050565b5f610e7782610e4c565b9050919050565b5f610e8882610e6d565b9050919050565b610e9881610e7e565b82525050565b5f602082019050610eb15f830184610e8f565b92915050565b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610f0182610ebb565b810181811067ffffffffffffffff82111715610f2057610f1f610ecb565b5b80604052505050565b5f610f32610d34565b9050610f3e8282610ef8565b919050565b5f67ffffffffffffffff821115610f5d57610f5c610ecb565b5b610f6682610ebb565b9050602081019050919050565b828183375f83830152505050565b5f610f93610f8e84610f43565b610f29565b905082815260208101848484011115610faf57610fae610eb7565b5b610fba848285610f73565b509392505050565b5f82601f830112610fd657610fd5610d45565b5b8135610fe6848260208601610f81565b91505092915050565b5f6020828403121561100457611003610d3d565b5b5f82013567ffffffffffffffff81111561102157611020610d41565b5b61102d84828501610fc2565b91505092915050565b5f819050919050565b61104881611036565b82525050565b5f6020820190506110615f83018461103f565b92915050565b5f5f83601f84011261107c5761107b610d45565b5b8235905067ffffffffffffffff81111561109957611098610d49565b5b6020830191508360018202830111156110b5576110b4610d4d565b5b9250929050565b5f5f5f5f604085870312156110d4576110d3610d3d565b5b5f85013567ffffffffffffffff8111156110f1576110f0610d41565b5b6110fd87828801611067565b9450945050602085013567ffffffffffffffff8111156111205761111f610d41565b5b61112c87828801611067565b925092505092959194509250565b5f61114482610e24565b9050919050565b6111548161113a565b811461115e575f5ffd5b50565b5f8135905061116f8161114b565b92915050565b5f6020828403121561118a57611189610d3d565b5b5f61119784828501611161565b91505092915050565b5f67ffffffffffffffff82169050919050565b6111bc816111a0565b82525050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f6111f4826111c2565b6111fe81856111cc565b935061120e8185602086016111dc565b61121781610ebb565b840191505092915050565b5f60a0820190506112355f8301886111b3565b818103602083015261124781876111ea565b9050818103604083015261125b81866111ea565b905061126a606083018561103f565b6112776080830184610dfc565b9695505050505050565b61128a81610df1565b8114611294575f5ffd5b50565b5f813590506112a581611281565b92915050565b5f5f5f604084860312156112c2576112c1610d3d565b5b5f84013567ffffffffffffffff8111156112df576112de610d41565b5b6112eb86828701610d51565b935093505060206112fe86828701611297565b9150509250925092565b611311816111a0565b811461131b575f5ffd5b50565b5f8135905061132c81611308565b92915050565b5f5f5f5f5f5f5f5f5f60a08a8c03121561134f5761134e610d3d565b5b5f61135c8c828d0161131e565b99505060208a013567ffffffffffffffff81111561137d5761137c610d41565b5b6113898c828d01610d51565b985098505060408a013567ffffffffffffffff8111156113ac576113ab610d41565b5b6113b88c828d01610d51565b965096505060608a013567ffffffffffffffff8111156113db576113da610d41565b5b6113e78c828d01611067565b945094505060808a013567ffffffffffffffff81111561140a57611409610d41565b5b6114168c828d01611067565b92509250509295985092959850929598565b5f60608201905061143b5f8301866111b3565b6114486020830185610dfc565b611455604083018461103f565b949350505050565b5f819050919050565b61146f8161145d565b82525050565b5f6020820190506114885f830184611466565b92915050565b5f81905092915050565b5f6114a3838561148e565b93506114b0838584610f73565b82840190509392505050565b5f6114c8828486611498565b91508190509392505050565b5f81905092915050565b5f6114e983856114d4565b93506114f6838584610f73565b82840190509392505050565b5f61150e8284866114de565b91508190509392505050565b6115238161145d565b811461152d575f5ffd5b50565b5f8151905061153e8161151a565b92915050565b5f6020828403121561155957611558610d3d565b5b5f61156684828501611530565b91505092915050565b5f82825260208201905092915050565b5f61158a838561156f565b9350611597838584610f73565b6115a083610ebb565b840190509392505050565b5f6060820190508181035f8301526115c481868861157f565b90506115d36020830185611466565b6115e06040830184611466565b95945050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061162d57607f821691505b6020821081036116405761163f6115e9565b5b50919050565b5f61165183856111cc565b935061165e838584610f73565b61166783610ebb565b840190509392505050565b5f6040820190508181035f83015261168b818587611646565b905061169a6020830184610dfc565b949350505050565b7f54726164466920736572766572206e6f7420617574686f72697a6564000000005f82015250565b5f6116d6601c836111cc565b91506116e1826116a2565b602082019050919050565b5f6020820190508181035f830152611703816116ca565b9050919050565b7f537461746520726f6f742070726f7669646572206e6f7420617574686f72697a5f8201527f6564000000000000000000000000000000000000000000000000000000000000602082015250565b5f6117646022836111cc565b915061176f8261170a565b604082019050919050565b5f6020820190508181035f83015261179181611758565b9050919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026117f47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826117b9565b6117fe86836117b9565b95508019841693508086168417925050509392505050565b5f61183061182b61182684611036565b610e43565b611036565b9050919050565b5f819050919050565b61184983611816565b61185d61185582611837565b8484546117c5565b825550505050565b5f5f905090565b611874611865565b61187f818484611840565b505050565b5b818110156118a2576118975f8261186c565b600181019050611885565b5050565b601f8211156118e7576118b881611798565b6118c1846117aa565b810160208510156118d0578190505b6118e46118dc856117aa565b830182611884565b50505b505050565b5f82821c905092915050565b5f6119075f19846008026118ec565b1980831691505092915050565b5f61191f83836118f8565b9150826002028217905092915050565b611938826111c2565b67ffffffffffffffff81111561195157611950610ecb565b5b61195b8254611616565b6119668282856118a6565b5f60209050601f831160018114611997575f8415611985578287015190505b61198f8582611914565b8655506119f6565b601f1984166119a586611798565b5f5b828110156119cc578489015182556001820191506020850194506020810190506119a7565b868310156119e957848901516119e5601f8916826118f8565b8355505b6001600288020188555050505b505050505050565b5f608082019050611a115f8301896111b3565b8181036020830152611a24818789611646565b90508181036040830152611a39818587611646565b9050611a48606083018461103f565b979650505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f611a8a82611036565b9150611a9583611036565b9250828203905081811115611aad57611aac611a53565b5b9291505056fea26469706673582212200a9af86e9f738d5d4c9aa2f50a2db68e24d6356d9d90d292d60a16205aeb261564736f6c634300081e0033",
+    "sourceMap": "174:3849:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3713:138;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;201:43;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;375:48;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;311:53;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3455:252;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3857:164;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;494:55;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;3217:232;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;429:59;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1524:851;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2381:631;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;250:50;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3018:193;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3713:138;3792:4;3815:17;3833:10;;3815:29;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;3808:36;;3713:138;;;;:::o;201:43::-;;;:::o;375:48::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;311:53::-;357:7;311:53;:::o;3455:252::-;3569:4;3585:19;3607;3614:11;;3607:19;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3585:41;;3636:8;:15;;;3652:4;;767:66:2;759:75;;3667:11:0;3636:43;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3696:4;3689:11;;;3455:252;;;;;;:::o;3857:164::-;3949:4;3972:28;4001:12;;3972:42;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;3965:49;;3857:164;;;;:::o;494:55::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;3217:232::-;3364:10;3319:28;3348:12;;3319:42;;;;;;;:::i;:::-;;;;;;;;;;;;;;:55;;;;;;;;;;;;;;;;;;3389:53;3417:12;;3431:10;3389:53;;;;;;;;:::i;:::-;;;;;;;;3217:232;;;:::o;429:59::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1524:851::-;1750:17;1768:10;;1750:29;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1742:70;;;;;;;;;;;;:::i;:::-;;;;;;;;;1830:28;1859:17;;1830:47;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1822:94;;;;;;;;;;;;:::i;:::-;;;;;;;;;1927:19;1949;1956:11;;1949:19;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1927:41;;1978:8;:15;;;1994:4;;767:66:2;759:75;;2009:11:0;1978:43;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2059:206;;;;;;;;2096:5;2059:206;;;;;;2127:10;;2059:206;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2170:17;;2059:206;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2212:15;2059:206;;;;2250:4;2059:206;;;;;2032:12;:24;2045:10;2032:24;;;;;;;;;;;;;;;:233;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2302:10;2281:87;;;2314:5;2321:10;;2333:17;;2352:15;2281:87;;;;;;;;;;;:::i;:::-;;;;;;;;1732:643;1524:851;;;;;;;;;:::o;2381:631::-;2451:12;2473;2495:17;2529:31;2563:12;:18;2576:4;2563:18;;;;;;;;;;;;;;;2529:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2652:15;2670:8;:16;;;:68;;;;;2737:1;2716:8;:18;;;:22;2670:68;:159;;;;;357:7;2787:8;:18;;;2769:15;:36;;;;:::i;:::-;2768:61;;2670:159;2652:177;;2852:10;2848:158;;;2886:8;:14;;;2902:4;2908:8;:18;;;2878:49;;;;;;;;;;2848:158;2966:1;2969:5;2976:8;:18;;;2958:37;;;;;;;;2381:631;;;;;;:::o;250:50::-;767:66:2;759:75;;250:50:0;:::o;3018:193::-;3139:10;3107:17;3125:10;;3107:29;;;;;;;:::i;:::-;;;;;;;;;;;;;;:42;;;;;;;;;;;;;;;;;;3164:40;3181:10;;3193;3164:40;;;;;;;;:::i;:::-;;;;;;;;3018:193;;;:::o;7:75:35:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:117;443:1;440;433:12;457:117;566:1;563;556:12;580:117;689:1;686;679:12;717:553;775:8;785:6;835:3;828:4;820:6;816:17;812:27;802:122;;843:79;;:::i;:::-;802:122;956:6;943:20;933:30;;986:18;978:6;975:30;972:117;;;1008:79;;:::i;:::-;972:117;1122:4;1114:6;1110:17;1098:29;;1176:3;1168:4;1160:6;1156:17;1146:8;1142:32;1139:41;1136:128;;;1183:79;;:::i;:::-;1136:128;717:553;;;;;:::o;1276:529::-;1347:6;1355;1404:2;1392:9;1383:7;1379:23;1375:32;1372:119;;;1410:79;;:::i;:::-;1372:119;1558:1;1547:9;1543:17;1530:31;1588:18;1580:6;1577:30;1574:117;;;1610:79;;:::i;:::-;1574:117;1723:65;1780:7;1771:6;1760:9;1756:22;1723:65;:::i;:::-;1705:83;;;;1501:297;1276:529;;;;;:::o;1811:90::-;1845:7;1888:5;1881:13;1874:21;1863:32;;1811:90;;;:::o;1907:109::-;1988:21;2003:5;1988:21;:::i;:::-;1983:3;1976:34;1907:109;;:::o;2022:210::-;2109:4;2147:2;2136:9;2132:18;2124:26;;2160:65;2222:1;2211:9;2207:17;2198:6;2160:65;:::i;:::-;2022:210;;;;:::o;2238:126::-;2275:7;2315:42;2308:5;2304:54;2293:65;;2238:126;;;:::o;2370:60::-;2398:3;2419:5;2412:12;;2370:60;;;:::o;2436:142::-;2486:9;2519:53;2537:34;2546:24;2564:5;2546:24;:::i;:::-;2537:34;:::i;:::-;2519:53;:::i;:::-;2506:66;;2436:142;;;:::o;2584:126::-;2634:9;2667:37;2698:5;2667:37;:::i;:::-;2654:50;;2584:126;;;:::o;2716:153::-;2793:9;2826:37;2857:5;2826:37;:::i;:::-;2813:50;;2716:153;;;:::o;2875:185::-;2989:64;3047:5;2989:64;:::i;:::-;2984:3;2977:77;2875:185;;:::o;3066:276::-;3186:4;3224:2;3213:9;3209:18;3201:26;;3237:98;3332:1;3321:9;3317:17;3308:6;3237:98;:::i;:::-;3066:276;;;;:::o;3348:117::-;3457:1;3454;3447:12;3471:102;3512:6;3563:2;3559:7;3554:2;3547:5;3543:14;3539:28;3529:38;;3471:102;;;:::o;3579:180::-;3627:77;3624:1;3617:88;3724:4;3721:1;3714:15;3748:4;3745:1;3738:15;3765:281;3848:27;3870:4;3848:27;:::i;:::-;3840:6;3836:40;3978:6;3966:10;3963:22;3942:18;3930:10;3927:34;3924:62;3921:88;;;3989:18;;:::i;:::-;3921:88;4029:10;4025:2;4018:22;3808:238;3765:281;;:::o;4052:129::-;4086:6;4113:20;;:::i;:::-;4103:30;;4142:33;4170:4;4162:6;4142:33;:::i;:::-;4052:129;;;:::o;4187:308::-;4249:4;4339:18;4331:6;4328:30;4325:56;;;4361:18;;:::i;:::-;4325:56;4399:29;4421:6;4399:29;:::i;:::-;4391:37;;4483:4;4477;4473:15;4465:23;;4187:308;;;:::o;4501:148::-;4599:6;4594:3;4589;4576:30;4640:1;4631:6;4626:3;4622:16;4615:27;4501:148;;;:::o;4655:425::-;4733:5;4758:66;4774:49;4816:6;4774:49;:::i;:::-;4758:66;:::i;:::-;4749:75;;4847:6;4840:5;4833:21;4885:4;4878:5;4874:16;4923:3;4914:6;4909:3;4905:16;4902:25;4899:112;;;4930:79;;:::i;:::-;4899:112;5020:54;5067:6;5062:3;5057;5020:54;:::i;:::-;4739:341;4655:425;;;;;:::o;5100:340::-;5156:5;5205:3;5198:4;5190:6;5186:17;5182:27;5172:122;;5213:79;;:::i;:::-;5172:122;5330:6;5317:20;5355:79;5430:3;5422:6;5415:4;5407:6;5403:17;5355:79;:::i;:::-;5346:88;;5162:278;5100:340;;;;:::o;5446:509::-;5515:6;5564:2;5552:9;5543:7;5539:23;5535:32;5532:119;;;5570:79;;:::i;:::-;5532:119;5718:1;5707:9;5703:17;5690:31;5748:18;5740:6;5737:30;5734:117;;;5770:79;;:::i;:::-;5734:117;5875:63;5930:7;5921:6;5910:9;5906:22;5875:63;:::i;:::-;5865:73;;5661:287;5446:509;;;;:::o;5961:77::-;5998:7;6027:5;6016:16;;5961:77;;;:::o;6044:118::-;6131:24;6149:5;6131:24;:::i;:::-;6126:3;6119:37;6044:118;;:::o;6168:222::-;6261:4;6299:2;6288:9;6284:18;6276:26;;6312:71;6380:1;6369:9;6365:17;6356:6;6312:71;:::i;:::-;6168:222;;;;:::o;6409:552::-;6466:8;6476:6;6526:3;6519:4;6511:6;6507:17;6503:27;6493:122;;6534:79;;:::i;:::-;6493:122;6647:6;6634:20;6624:30;;6677:18;6669:6;6666:30;6663:117;;;6699:79;;:::i;:::-;6663:117;6813:4;6805:6;6801:17;6789:29;;6867:3;6859:4;6851:6;6847:17;6837:8;6833:32;6830:41;6827:128;;;6874:79;;:::i;:::-;6827:128;6409:552;;;;;:::o;6967:870::-;7057:6;7065;7073;7081;7130:2;7118:9;7109:7;7105:23;7101:32;7098:119;;;7136:79;;:::i;:::-;7098:119;7284:1;7273:9;7269:17;7256:31;7314:18;7306:6;7303:30;7300:117;;;7336:79;;:::i;:::-;7300:117;7449:64;7505:7;7496:6;7485:9;7481:22;7449:64;:::i;:::-;7431:82;;;;7227:296;7590:2;7579:9;7575:18;7562:32;7621:18;7613:6;7610:30;7607:117;;;7643:79;;:::i;:::-;7607:117;7756:64;7812:7;7803:6;7792:9;7788:22;7756:64;:::i;:::-;7738:82;;;;7533:297;6967:870;;;;;;;:::o;7843:96::-;7880:7;7909:24;7927:5;7909:24;:::i;:::-;7898:35;;7843:96;;;:::o;7945:122::-;8018:24;8036:5;8018:24;:::i;:::-;8011:5;8008:35;7998:63;;8057:1;8054;8047:12;7998:63;7945:122;:::o;8073:139::-;8119:5;8157:6;8144:20;8135:29;;8173:33;8200:5;8173:33;:::i;:::-;8073:139;;;;:::o;8218:329::-;8277:6;8326:2;8314:9;8305:7;8301:23;8297:32;8294:119;;;8332:79;;:::i;:::-;8294:119;8452:1;8477:53;8522:7;8513:6;8502:9;8498:22;8477:53;:::i;:::-;8467:63;;8423:117;8218:329;;;;:::o;8553:101::-;8589:7;8629:18;8622:5;8618:30;8607:41;;8553:101;;;:::o;8660:115::-;8745:23;8762:5;8745:23;:::i;:::-;8740:3;8733:36;8660:115;;:::o;8781:99::-;8833:6;8867:5;8861:12;8851:22;;8781:99;;;:::o;8886:169::-;8970:11;9004:6;8999:3;8992:19;9044:4;9039:3;9035:14;9020:29;;8886:169;;;;:::o;9061:139::-;9150:6;9145:3;9140;9134:23;9191:1;9182:6;9177:3;9173:16;9166:27;9061:139;;;:::o;9206:377::-;9294:3;9322:39;9355:5;9322:39;:::i;:::-;9377:71;9441:6;9436:3;9377:71;:::i;:::-;9370:78;;9457:65;9515:6;9510:3;9503:4;9496:5;9492:16;9457:65;:::i;:::-;9547:29;9569:6;9547:29;:::i;:::-;9542:3;9538:39;9531:46;;9298:285;9206:377;;;;:::o;9589:830::-;9826:4;9864:3;9853:9;9849:19;9841:27;;9878:69;9944:1;9933:9;9929:17;9920:6;9878:69;:::i;:::-;9994:9;9988:4;9984:20;9979:2;9968:9;9964:18;9957:48;10022:78;10095:4;10086:6;10022:78;:::i;:::-;10014:86;;10147:9;10141:4;10137:20;10132:2;10121:9;10117:18;10110:48;10175:78;10248:4;10239:6;10175:78;:::i;:::-;10167:86;;10263:72;10331:2;10320:9;10316:18;10307:6;10263:72;:::i;:::-;10345:67;10407:3;10396:9;10392:19;10383:6;10345:67;:::i;:::-;9589:830;;;;;;;;:::o;10425:116::-;10495:21;10510:5;10495:21;:::i;:::-;10488:5;10485:32;10475:60;;10531:1;10528;10521:12;10475:60;10425:116;:::o;10547:133::-;10590:5;10628:6;10615:20;10606:29;;10644:30;10668:5;10644:30;:::i;:::-;10547:133;;;;:::o;10686:668::-;10763:6;10771;10779;10828:2;10816:9;10807:7;10803:23;10799:32;10796:119;;;10834:79;;:::i;:::-;10796:119;10982:1;10971:9;10967:17;10954:31;11012:18;11004:6;11001:30;10998:117;;;11034:79;;:::i;:::-;10998:117;11147:65;11204:7;11195:6;11184:9;11180:22;11147:65;:::i;:::-;11129:83;;;;10925:297;11261:2;11287:50;11329:7;11320:6;11309:9;11305:22;11287:50;:::i;:::-;11277:60;;11232:115;10686:668;;;;;:::o;11360:120::-;11432:23;11449:5;11432:23;:::i;:::-;11425:5;11422:34;11412:62;;11470:1;11467;11460:12;11412:62;11360:120;:::o;11486:137::-;11531:5;11569:6;11556:20;11547:29;;11585:32;11611:5;11585:32;:::i;:::-;11486:137;;;;:::o;11629:1705::-;11769:6;11777;11785;11793;11801;11809;11817;11825;11833;11882:3;11870:9;11861:7;11857:23;11853:33;11850:120;;;11889:79;;:::i;:::-;11850:120;12009:1;12034:52;12078:7;12069:6;12058:9;12054:22;12034:52;:::i;:::-;12024:62;;11980:116;12163:2;12152:9;12148:18;12135:32;12194:18;12186:6;12183:30;12180:117;;;12216:79;;:::i;:::-;12180:117;12329:65;12386:7;12377:6;12366:9;12362:22;12329:65;:::i;:::-;12311:83;;;;12106:298;12471:2;12460:9;12456:18;12443:32;12502:18;12494:6;12491:30;12488:117;;;12524:79;;:::i;:::-;12488:117;12637:65;12694:7;12685:6;12674:9;12670:22;12637:65;:::i;:::-;12619:83;;;;12414:298;12779:2;12768:9;12764:18;12751:32;12810:18;12802:6;12799:30;12796:117;;;12832:79;;:::i;:::-;12796:117;12945:64;13001:7;12992:6;12981:9;12977:22;12945:64;:::i;:::-;12927:82;;;;12722:297;13086:3;13075:9;13071:19;13058:33;13118:18;13110:6;13107:30;13104:117;;;13140:79;;:::i;:::-;13104:117;13253:64;13309:7;13300:6;13289:9;13285:22;13253:64;:::i;:::-;13235:82;;;;13029:298;11629:1705;;;;;;;;;;;:::o;13340:426::-;13481:4;13519:2;13508:9;13504:18;13496:26;;13532:69;13598:1;13587:9;13583:17;13574:6;13532:69;:::i;:::-;13611:66;13673:2;13662:9;13658:18;13649:6;13611:66;:::i;:::-;13687:72;13755:2;13744:9;13740:18;13731:6;13687:72;:::i;:::-;13340:426;;;;;;:::o;13772:77::-;13809:7;13838:5;13827:16;;13772:77;;;:::o;13855:118::-;13942:24;13960:5;13942:24;:::i;:::-;13937:3;13930:37;13855:118;;:::o;13979:222::-;14072:4;14110:2;14099:9;14095:18;14087:26;;14123:71;14191:1;14180:9;14176:17;14167:6;14123:71;:::i;:::-;13979:222;;;;:::o;14207:148::-;14309:11;14346:3;14331:18;;14207:148;;;;:::o;14385:330::-;14501:3;14522:89;14604:6;14599:3;14522:89;:::i;:::-;14515:96;;14621:56;14670:6;14665:3;14658:5;14621:56;:::i;:::-;14702:6;14697:3;14693:16;14686:23;;14385:330;;;;;:::o;14721:295::-;14863:3;14885:105;14986:3;14977:6;14969;14885:105;:::i;:::-;14878:112;;15007:3;15000:10;;14721:295;;;;;:::o;15022:147::-;15123:11;15160:3;15145:18;;15022:147;;;;:::o;15197:327::-;15311:3;15332:88;15413:6;15408:3;15332:88;:::i;:::-;15325:95;;15430:56;15479:6;15474:3;15467:5;15430:56;:::i;:::-;15511:6;15506:3;15502:16;15495:23;;15197:327;;;;;:::o;15530:291::-;15670:3;15692:103;15791:3;15782:6;15774;15692:103;:::i;:::-;15685:110;;15812:3;15805:10;;15530:291;;;;;:::o;15827:122::-;15900:24;15918:5;15900:24;:::i;:::-;15893:5;15890:35;15880:63;;15939:1;15936;15929:12;15880:63;15827:122;:::o;15955:143::-;16012:5;16043:6;16037:13;16028:22;;16059:33;16086:5;16059:33;:::i;:::-;15955:143;;;;:::o;16104:351::-;16174:6;16223:2;16211:9;16202:7;16198:23;16194:32;16191:119;;;16229:79;;:::i;:::-;16191:119;16349:1;16374:64;16430:7;16421:6;16410:9;16406:22;16374:64;:::i;:::-;16364:74;;16320:128;16104:351;;;;:::o;16461:168::-;16544:11;16578:6;16573:3;16566:19;16618:4;16613:3;16609:14;16594:29;;16461:168;;;;:::o;16657:314::-;16753:3;16774:70;16837:6;16832:3;16774:70;:::i;:::-;16767:77;;16854:56;16903:6;16898:3;16891:5;16854:56;:::i;:::-;16935:29;16957:6;16935:29;:::i;:::-;16930:3;16926:39;16919:46;;16657:314;;;;;:::o;16977:549::-;17154:4;17192:2;17181:9;17177:18;17169:26;;17241:9;17235:4;17231:20;17227:1;17216:9;17212:17;17205:47;17269:86;17350:4;17341:6;17333;17269:86;:::i;:::-;17261:94;;17365:72;17433:2;17422:9;17418:18;17409:6;17365:72;:::i;:::-;17447;17515:2;17504:9;17500:18;17491:6;17447:72;:::i;:::-;16977:549;;;;;;;:::o;17532:180::-;17580:77;17577:1;17570:88;17677:4;17674:1;17667:15;17701:4;17698:1;17691:15;17718:320;17762:6;17799:1;17793:4;17789:12;17779:22;;17846:1;17840:4;17836:12;17867:18;17857:81;;17923:4;17915:6;17911:17;17901:27;;17857:81;17985:2;17977:6;17974:14;17954:18;17951:38;17948:84;;18004:18;;:::i;:::-;17948:84;17769:269;17718:320;;;:::o;18068:317::-;18166:3;18187:71;18251:6;18246:3;18187:71;:::i;:::-;18180:78;;18268:56;18317:6;18312:3;18305:5;18268:56;:::i;:::-;18349:29;18371:6;18349:29;:::i;:::-;18344:3;18340:39;18333:46;;18068:317;;;;;:::o;18391:431::-;18536:4;18574:2;18563:9;18559:18;18551:26;;18623:9;18617:4;18613:20;18609:1;18598:9;18594:17;18587:47;18651:88;18734:4;18725:6;18717;18651:88;:::i;:::-;18643:96;;18749:66;18811:2;18800:9;18796:18;18787:6;18749:66;:::i;:::-;18391:431;;;;;;:::o;18828:178::-;18968:30;18964:1;18956:6;18952:14;18945:54;18828:178;:::o;19012:366::-;19154:3;19175:67;19239:2;19234:3;19175:67;:::i;:::-;19168:74;;19251:93;19340:3;19251:93;:::i;:::-;19369:2;19364:3;19360:12;19353:19;;19012:366;;;:::o;19384:419::-;19550:4;19588:2;19577:9;19573:18;19565:26;;19637:9;19631:4;19627:20;19623:1;19612:9;19608:17;19601:47;19665:131;19791:4;19665:131;:::i;:::-;19657:139;;19384:419;;;:::o;19809:221::-;19949:34;19945:1;19937:6;19933:14;19926:58;20018:4;20013:2;20005:6;20001:15;19994:29;19809:221;:::o;20036:366::-;20178:3;20199:67;20263:2;20258:3;20199:67;:::i;:::-;20192:74;;20275:93;20364:3;20275:93;:::i;:::-;20393:2;20388:3;20384:12;20377:19;;20036:366;;;:::o;20408:419::-;20574:4;20612:2;20601:9;20597:18;20589:26;;20661:9;20655:4;20651:20;20647:1;20636:9;20632:17;20625:47;20689:131;20815:4;20689:131;:::i;:::-;20681:139;;20408:419;;;:::o;20833:141::-;20882:4;20905:3;20897:11;;20928:3;20925:1;20918:14;20962:4;20959:1;20949:18;20941:26;;20833:141;;;:::o;20980:93::-;21017:6;21064:2;21059;21052:5;21048:14;21044:23;21034:33;;20980:93;;;:::o;21079:107::-;21123:8;21173:5;21167:4;21163:16;21142:37;;21079:107;;;;:::o;21192:393::-;21261:6;21311:1;21299:10;21295:18;21334:97;21364:66;21353:9;21334:97;:::i;:::-;21452:39;21482:8;21471:9;21452:39;:::i;:::-;21440:51;;21524:4;21520:9;21513:5;21509:21;21500:30;;21573:4;21563:8;21559:19;21552:5;21549:30;21539:40;;21268:317;;21192:393;;;;;:::o;21591:142::-;21641:9;21674:53;21692:34;21701:24;21719:5;21701:24;:::i;:::-;21692:34;:::i;:::-;21674:53;:::i;:::-;21661:66;;21591:142;;;:::o;21739:75::-;21782:3;21803:5;21796:12;;21739:75;;;:::o;21820:269::-;21930:39;21961:7;21930:39;:::i;:::-;21991:91;22040:41;22064:16;22040:41;:::i;:::-;22032:6;22025:4;22019:11;21991:91;:::i;:::-;21985:4;21978:105;21896:193;21820:269;;;:::o;22095:73::-;22140:3;22161:1;22154:8;;22095:73;:::o;22174:189::-;22251:32;;:::i;:::-;22292:65;22350:6;22342;22336:4;22292:65;:::i;:::-;22227:136;22174:189;;:::o;22369:186::-;22429:120;22446:3;22439:5;22436:14;22429:120;;;22500:39;22537:1;22530:5;22500:39;:::i;:::-;22473:1;22466:5;22462:13;22453:22;;22429:120;;;22369:186;;:::o;22561:543::-;22662:2;22657:3;22654:11;22651:446;;;22696:38;22728:5;22696:38;:::i;:::-;22780:29;22798:10;22780:29;:::i;:::-;22770:8;22766:44;22963:2;22951:10;22948:18;22945:49;;;22984:8;22969:23;;22945:49;23007:80;23063:22;23081:3;23063:22;:::i;:::-;23053:8;23049:37;23036:11;23007:80;:::i;:::-;22666:431;;22651:446;22561:543;;;:::o;23110:117::-;23164:8;23214:5;23208:4;23204:16;23183:37;;23110:117;;;;:::o;23233:169::-;23277:6;23310:51;23358:1;23354:6;23346:5;23343:1;23339:13;23310:51;:::i;:::-;23306:56;23391:4;23385;23381:15;23371:25;;23284:118;23233:169;;;;:::o;23407:295::-;23483:4;23629:29;23654:3;23648:4;23629:29;:::i;:::-;23621:37;;23691:3;23688:1;23684:11;23678:4;23675:21;23667:29;;23407:295;;;;:::o;23707:1395::-;23824:37;23857:3;23824:37;:::i;:::-;23926:18;23918:6;23915:30;23912:56;;;23948:18;;:::i;:::-;23912:56;23992:38;24024:4;24018:11;23992:38;:::i;:::-;24077:67;24137:6;24129;24123:4;24077:67;:::i;:::-;24171:1;24195:4;24182:17;;24227:2;24219:6;24216:14;24244:1;24239:618;;;;24901:1;24918:6;24915:77;;;24967:9;24962:3;24958:19;24952:26;24943:35;;24915:77;25018:67;25078:6;25071:5;25018:67;:::i;:::-;25012:4;25005:81;24874:222;24209:887;;24239:618;24291:4;24287:9;24279:6;24275:22;24325:37;24357:4;24325:37;:::i;:::-;24384:1;24398:208;24412:7;24409:1;24406:14;24398:208;;;24491:9;24486:3;24482:19;24476:26;24468:6;24461:42;24542:1;24534:6;24530:14;24520:24;;24589:2;24578:9;24574:18;24561:31;;24435:4;24432:1;24428:12;24423:17;;24398:208;;;24634:6;24625:7;24622:19;24619:179;;;24692:9;24687:3;24683:19;24677:26;24735:48;24777:4;24769:6;24765:17;24754:9;24735:48;:::i;:::-;24727:6;24720:64;24642:156;24619:179;24844:1;24840;24832:6;24828:14;24824:22;24818:4;24811:36;24246:611;;;24209:887;;23799:1303;;;23707:1395;;:::o;25108:771::-;25343:4;25381:3;25370:9;25366:19;25358:27;;25395:69;25461:1;25450:9;25446:17;25437:6;25395:69;:::i;:::-;25511:9;25505:4;25501:20;25496:2;25485:9;25481:18;25474:48;25539:88;25622:4;25613:6;25605;25539:88;:::i;:::-;25531:96;;25674:9;25668:4;25664:20;25659:2;25648:9;25644:18;25637:48;25702:88;25785:4;25776:6;25768;25702:88;:::i;:::-;25694:96;;25800:72;25868:2;25857:9;25853:18;25844:6;25800:72;:::i;:::-;25108:771;;;;;;;;;:::o;25885:180::-;25933:77;25930:1;25923:88;26030:4;26027:1;26020:15;26054:4;26051:1;26044:15;26071:194;26111:4;26131:20;26149:1;26131:20;:::i;:::-;26126:25;;26165:20;26183:1;26165:20;:::i;:::-;26160:25;;26209:1;26206;26202:9;26194:17;;26233:1;26227:4;26224:11;26221:37;;;26238:18;;:::i;:::-;26221:37;26071:194;;;;:::o",
+    "linkReferences": {},
+    "immutableReferences": {
+      "8": [
+        { "start": 780, "length": 32 },
+        { "start": 959, "length": 32 },
+        { "start": 2018, "length": 32 }
+      ]
+    }
+  },
+  "methodIdentifiers": {
+    "SCORE_EXPIRY_PERIOD()": "59705bb3",
+    "authorizeServer(string,bool)": "fbc4a11d",
+    "authorizeStateRootProvider(string,bool)": "82e949af",
+    "authorizedServers(string)": "44298b48",
+    "authorizedStateRootProviders(string)": "8a2489f5",
+    "creditScores(address)": "80bb7273",
+    "getCreditScore(address)": "d3dd2bdf",
+    "imageId()": "ef3f7dd5",
+    "isServerAuthorized(string)": "230928ae",
+    "isStateRootProviderAuthorized(string)": "6b2522c5",
+    "submitCreditScore(uint64,string,string,bytes,bytes)": "9688417a",
+    "testVerify(bytes,bytes)": "617530b8",
+    "verifier()": "2b7ac3f3"
+  },
+  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IRiscZeroVerifier\",\"name\":\"_verifier\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"score\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"serverName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"stateRootProvider\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"CreditScoreSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"serverName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"authorized\",\"type\":\"bool\"}],\"name\":\"ServerAuthorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"providerName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"authorized\",\"type\":\"bool\"}],\"name\":\"StateRootProviderAuthorized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SCORE_EXPIRY_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"serverName\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"authorized\",\"type\":\"bool\"}],\"name\":\"authorizeServer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"providerName\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"authorized\",\"type\":\"bool\"}],\"name\":\"authorizeStateRootProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"authorizedServers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"authorizedStateRootProviders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"creditScores\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"score\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"serverName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"stateRootProvider\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getCreditScore\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"score\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"imageId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"serverName\",\"type\":\"string\"}],\"name\":\"isServerAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"providerName\",\"type\":\"string\"}],\"name\":\"isStateRootProviderAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"score\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"serverName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"stateRootProvider\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"seal\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"journalData\",\"type\":\"bytes\"}],\"name\":\"submitCreditScore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"seal\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"journalData\",\"type\":\"bytes\"}],\"name\":\"testVerify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"contract IRiscZeroVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CreditScore.sol\":\"CreditScore\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":erc4626-tests/=lib/risc0-ethereum/lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/risc0-ethereum/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/\",\":risc0-ethereum/=lib/risc0-ethereum/\",\":risc0/=lib/risc0-ethereum/contracts/src/\"]},\"sources\":{\"contracts/CreditScore.sol\":{\"keccak256\":\"0xa857281571dacc73fbed34099d891d77fc8becf2ad407c3c1c9091ea717e0aed\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://de37c952935e6e05c582b4f731a986794503410ba222c0fb43dc0755be9fdbf9\",\"dweb:/ipfs/QmdZpSq1nbPp4mj6h17Fd8xEiPvLs8y8iZ1ynug4AEYTB6\"]},\"contracts/risc0/ImageID.sol\":{\"keccak256\":\"0x6c1c3d1b6fd772694bf3f0e94a8317bff3d98c1747f3e1aa13ddf16d3433adf8\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://081a17b4135b058af633efccfcd9a04aae92acf31a96313fabb16948ba612c70\",\"dweb:/ipfs/QmQgA4QwqC5y8dDFSy88uTAYvKKPzPZw85cG4BSVBGZMKZ\"]},\"lib/risc0-ethereum/contracts/src/IRiscZeroVerifier.sol\":{\"keccak256\":\"0x3e74a4b2940b88837fb8399a0012b435d1d513a622d3ea3ba58088af9ad7e2fd\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://b06299cc68e3c79e4eb22705bb814ce816a7fd549e78614b318ae44d35e56f9b\",\"dweb:/ipfs/QmPpX5ciRdEH6MVRVt7qYQqy7B68qxG5v3mxkgYm3kGxi5\"]},\"lib/risc0-ethereum/contracts/src/Util.sol\":{\"keccak256\":\"0x230a9a58bb2b0c68d4921ecc3672783f941890a2fa3a238dbe5188cfb7658b82\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://586cb5296c564761609ca8aaae5b1fbbdb19ab1e174f7197f602572d9e82b70c\",\"dweb:/ipfs/QmWxDmucSfg3Wgdk1rVcheDHwkziTsXWvKpKSCnxtpQBqg\"]}},\"version\":1}",
+  "metadata": {
+    "compiler": { "version": "0.8.30+commit.73712a01" },
+    "language": "Solidity",
+    "output": {
+      "abi": [
+        {
+          "inputs": [
+            {
+              "internalType": "contract IRiscZeroVerifier",
+              "name": "_verifier",
+              "type": "address"
+            }
+          ],
+          "stateMutability": "nonpayable",
+          "type": "constructor"
+        },
+        {
+          "inputs": [
+            {
+              "internalType": "address",
+              "name": "user",
+              "type": "address",
+              "indexed": true
+            },
+            {
+              "internalType": "uint64",
+              "name": "score",
+              "type": "uint64",
+              "indexed": false
+            },
+            {
+              "internalType": "string",
+              "name": "serverName",
+              "type": "string",
+              "indexed": false
+            },
+            {
+              "internalType": "string",
+              "name": "stateRootProvider",
+              "type": "string",
+              "indexed": false
+            },
+            {
+              "internalType": "uint256",
+              "name": "timestamp",
+              "type": "uint256",
+              "indexed": false
+            }
+          ],
+          "type": "event",
+          "name": "CreditScoreSubmitted",
+          "anonymous": false
+        },
+        {
+          "inputs": [
+            {
+              "internalType": "string",
+              "name": "serverName",
+              "type": "string",
+              "indexed": false
+            },
+            {
+              "internalType": "bool",
+              "name": "authorized",
+              "type": "bool",
+              "indexed": false
+            }
+          ],
+          "type": "event",
+          "name": "ServerAuthorized",
+          "anonymous": false
+        },
+        {
+          "inputs": [
+            {
+              "internalType": "string",
+              "name": "providerName",
+              "type": "string",
+              "indexed": false
+            },
+            {
+              "internalType": "bool",
+              "name": "authorized",
+              "type": "bool",
+              "indexed": false
+            }
+          ],
+          "type": "event",
+          "name": "StateRootProviderAuthorized",
+          "anonymous": false
+        },
+        {
+          "inputs": [],
+          "stateMutability": "view",
+          "type": "function",
+          "name": "SCORE_EXPIRY_PERIOD",
+          "outputs": [
+            { "internalType": "uint256", "name": "", "type": "uint256" }
+          ]
+        },
+        {
+          "inputs": [
+            {
+              "internalType": "string",
+              "name": "serverName",
+              "type": "string"
+            },
+            { "internalType": "bool", "name": "authorized", "type": "bool" }
+          ],
+          "stateMutability": "nonpayable",
+          "type": "function",
+          "name": "authorizeServer"
+        },
+        {
+          "inputs": [
+            {
+              "internalType": "string",
+              "name": "providerName",
+              "type": "string"
+            },
+            { "internalType": "bool", "name": "authorized", "type": "bool" }
+          ],
+          "stateMutability": "nonpayable",
+          "type": "function",
+          "name": "authorizeStateRootProvider"
+        },
+        {
+          "inputs": [
+            { "internalType": "string", "name": "", "type": "string" }
+          ],
+          "stateMutability": "view",
+          "type": "function",
+          "name": "authorizedServers",
+          "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }]
+        },
+        {
+          "inputs": [
+            { "internalType": "string", "name": "", "type": "string" }
+          ],
+          "stateMutability": "view",
+          "type": "function",
+          "name": "authorizedStateRootProviders",
+          "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }]
+        },
+        {
+          "inputs": [
+            { "internalType": "address", "name": "", "type": "address" }
+          ],
+          "stateMutability": "view",
+          "type": "function",
+          "name": "creditScores",
+          "outputs": [
+            { "internalType": "uint64", "name": "score", "type": "uint64" },
+            {
+              "internalType": "string",
+              "name": "serverName",
+              "type": "string"
+            },
+            {
+              "internalType": "string",
+              "name": "stateRootProvider",
+              "type": "string"
+            },
+            {
+              "internalType": "uint256",
+              "name": "timestamp",
+              "type": "uint256"
+            },
+            { "internalType": "bool", "name": "isValid", "type": "bool" }
+          ]
+        },
+        {
+          "inputs": [
+            { "internalType": "address", "name": "user", "type": "address" }
+          ],
+          "stateMutability": "view",
+          "type": "function",
+          "name": "getCreditScore",
+          "outputs": [
+            { "internalType": "uint64", "name": "score", "type": "uint64" },
+            { "internalType": "bool", "name": "isValid", "type": "bool" },
+            {
+              "internalType": "uint256",
+              "name": "timestamp",
+              "type": "uint256"
+            }
+          ]
+        },
+        {
+          "inputs": [],
+          "stateMutability": "view",
+          "type": "function",
+          "name": "imageId",
+          "outputs": [
+            { "internalType": "bytes32", "name": "", "type": "bytes32" }
+          ]
+        },
+        {
+          "inputs": [
+            { "internalType": "string", "name": "serverName", "type": "string" }
+          ],
+          "stateMutability": "view",
+          "type": "function",
+          "name": "isServerAuthorized",
+          "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }]
+        },
+        {
+          "inputs": [
+            {
+              "internalType": "string",
+              "name": "providerName",
+              "type": "string"
+            }
+          ],
+          "stateMutability": "view",
+          "type": "function",
+          "name": "isStateRootProviderAuthorized",
+          "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }]
+        },
+        {
+          "inputs": [
+            { "internalType": "uint64", "name": "score", "type": "uint64" },
+            {
+              "internalType": "string",
+              "name": "serverName",
+              "type": "string"
+            },
+            {
+              "internalType": "string",
+              "name": "stateRootProvider",
+              "type": "string"
+            },
+            { "internalType": "bytes", "name": "seal", "type": "bytes" },
+            { "internalType": "bytes", "name": "journalData", "type": "bytes" }
+          ],
+          "stateMutability": "nonpayable",
+          "type": "function",
+          "name": "submitCreditScore"
+        },
+        {
+          "inputs": [
+            { "internalType": "bytes", "name": "seal", "type": "bytes" },
+            { "internalType": "bytes", "name": "journalData", "type": "bytes" }
+          ],
+          "stateMutability": "view",
+          "type": "function",
+          "name": "testVerify",
+          "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }]
+        },
+        {
+          "inputs": [],
+          "stateMutability": "view",
+          "type": "function",
+          "name": "verifier",
+          "outputs": [
+            {
+              "internalType": "contract IRiscZeroVerifier",
+              "name": "",
+              "type": "address"
+            }
+          ]
+        }
+      ],
+      "devdoc": { "kind": "dev", "methods": {}, "version": 1 },
+      "userdoc": { "kind": "user", "methods": {}, "version": 1 }
+    },
+    "settings": {
+      "remappings": [
+        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
+        "erc4626-tests/=lib/risc0-ethereum/lib/openzeppelin-contracts/lib/erc4626-tests/",
+        "forge-std/=lib/forge-std/src/",
+        "halmos-cheatcodes/=lib/risc0-ethereum/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
+        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
+        "openzeppelin/=lib/openzeppelin-contracts/",
+        "risc0-ethereum/=lib/risc0-ethereum/",
+        "risc0/=lib/risc0-ethereum/contracts/src/"
+      ],
+      "optimizer": { "enabled": false, "runs": 200 },
+      "metadata": { "bytecodeHash": "ipfs" },
+      "compilationTarget": { "contracts/CreditScore.sol": "CreditScore" },
+      "evmVersion": "cancun",
+      "libraries": {}
+    },
+    "sources": {
+      "contracts/CreditScore.sol": {
+        "keccak256": "0xa857281571dacc73fbed34099d891d77fc8becf2ad407c3c1c9091ea717e0aed",
+        "urls": [
+          "bzz-raw://de37c952935e6e05c582b4f731a986794503410ba222c0fb43dc0755be9fdbf9",
+          "dweb:/ipfs/QmdZpSq1nbPp4mj6h17Fd8xEiPvLs8y8iZ1ynug4AEYTB6"
+        ],
+        "license": "Apache-2.0"
+      },
+      "contracts/risc0/ImageID.sol": {
+        "keccak256": "0x6c1c3d1b6fd772694bf3f0e94a8317bff3d98c1747f3e1aa13ddf16d3433adf8",
+        "urls": [
+          "bzz-raw://081a17b4135b058af633efccfcd9a04aae92acf31a96313fabb16948ba612c70",
+          "dweb:/ipfs/QmQgA4QwqC5y8dDFSy88uTAYvKKPzPZw85cG4BSVBGZMKZ"
+        ],
+        "license": "Apache-2.0"
+      },
+      "lib/risc0-ethereum/contracts/src/IRiscZeroVerifier.sol": {
+        "keccak256": "0x3e74a4b2940b88837fb8399a0012b435d1d513a622d3ea3ba58088af9ad7e2fd",
+        "urls": [
+          "bzz-raw://b06299cc68e3c79e4eb22705bb814ce816a7fd549e78614b318ae44d35e56f9b",
+          "dweb:/ipfs/QmPpX5ciRdEH6MVRVt7qYQqy7B68qxG5v3mxkgYm3kGxi5"
+        ],
+        "license": "Apache-2.0"
+      },
+      "lib/risc0-ethereum/contracts/src/Util.sol": {
+        "keccak256": "0x230a9a58bb2b0c68d4921ecc3672783f941890a2fa3a238dbe5188cfb7658b82",
+        "urls": [
+          "bzz-raw://586cb5296c564761609ca8aaae5b1fbbdb19ab1e174f7197f602572d9e82b70c",
+          "dweb:/ipfs/QmWxDmucSfg3Wgdk1rVcheDHwkziTsXWvKpKSCnxtpQBqg"
+        ],
+        "license": "Apache-2.0"
+      }
+    },
+    "version": 1
+  },
+  "id": 0
 }
diff --git a/Lending (BC) + frontend/loan-management/frontend/src/abis/IVotingToken.json b/Lending (BC) + frontend/loan-management/frontend/src/abis/IVotingToken.json
deleted file mode 100644
index 4f8d5af..0000000
--- a/Lending (BC) + frontend/loan-management/frontend/src/abis/IVotingToken.json	
+++ /dev/null
@@ -1,48 +0,0 @@
-{
-  "_format": "hh-sol-artifact-1",
-  "contractName": "IVotingToken",
-  "sourceName": "contracts/interfaces/IVotingToken.sol",
-  "abi": [
-    {
-      "inputs": [
-        {
-          "internalType": "address",
-          "name": "account",
-          "type": "address"
-        }
-      ],
-      "name": "balanceOf",
-      "outputs": [
-        {
-          "internalType": "uint256",
-          "name": "",
-          "type": "uint256"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "address",
-          "name": "to",
-          "type": "address"
-        },
-        {
-          "internalType": "uint256",
-          "name": "amount",
-          "type": "uint256"
-        }
-      ],
-      "name": "mint",
-      "outputs": [],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    }
-  ],
-  "bytecode": "0x",
-  "deployedBytecode": "0x",
-  "linkReferences": {},
-  "deployedLinkReferences": {}
-}
diff --git a/Lending (BC) + frontend/loan-management/frontend/src/abis/IntegratedCreditSystem.json b/Lending (BC) + frontend/loan-management/frontend/src/abis/IntegratedCreditSystem.json
index f00ec10..c706365 100644
--- a/Lending (BC) + frontend/loan-management/frontend/src/abis/IntegratedCreditSystem.json	
+++ b/Lending (BC) + frontend/loan-management/frontend/src/abis/IntegratedCreditSystem.json	
@@ -767,8 +767,8 @@
       "type": "function"
     }
   ],
-  "bytecode": "0x60a034620000b957601f6200263b38819003918201601f19168301916001600160401b03831184841017620000bd578084926040948552833981010312620000b9576200005a60206200005283620000d1565b9201620000d1565b6032600255601e60035560146004556001600160a01b039182166080525f80546001600160a01b031916919092161790556040516125549081620000e782396080518181816101640152818161080101528181610e3a0152610e7f0152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b51906001600160a01b0382168203620000b95756fe6080604081815260049182361015610015575f80fd5b5f925f3560e01c9182630a49cf4d146118595750816345171f26146116e95781634f0ca97114610e695781635c9770c514610e255781636087c89f14610e065781636277f6c614610c84578163665a11ca14610c5c5781636b0ad6fe14610ab55783826374601a8e146107e0575081637fa408d9146106d35781638922f3e3146106b557816393e30a6a146106975781639de1b1ee146104e2578163b7161fac146104c6578163da4561e41461014157508063f25d4f33146101005763f511cab2146100df575f80fd5b346100fc57816003193601126100fc576020906002549051908152f35b5080fd5b50346100fc5760203660031901126100fc5760209160ff90600a9083906001600160a01b0361012d611872565b168152600186522001541690519015158152f35b919050346104c2578261015336611c57565b90936001600160a01b0393919290917f0000000000000000000000000000000000000000000000000000000000000000851691823b156104be5786928492838b6101b1898d5198899788968795634295e81760e01b87528601611cc2565b03925af180156104b45790859291610499575b505060e0916101d1611dd6565b5081010312610495578251906101e682611935565b6101ef83611888565b92838352602093848401968583013588528685019487840135865260608101906060850135825260808101926080860135845261024560a083019560a0880135875260c080850198013588528833911614611d0a565b60146102518951612473565b8101809111610482578b92916102728e9261026c86516124c5565b90611ce9565b907fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470865103610452575b509760118b98610406986031985f805160206124ff8339815191529f9d969861042b9f96988f9a61043a9f9b8b6103a89d6103a19d50606481115f146104495750600160649b5b33835252209761010061ff00198a54161789554260028a01558960058a0155600b89019151166bffffffffffffffffffffffff60a01b82541617905551600c8701558751600d87015551600e86015551600f850155516010840155519101557ff3e9df557a77817375ddbb676dd4856f795b087c5aa2761c428d196445cba70889516060815261038b6060820160409060078152661058d8dbdd5b9d60ca1b60208201520190565b9289820152428b8201528033930390a251612399565b9851612399565b9785519889916802130b630b731b29d160bd1b868401526103d28151809288602987019101611b2e565b8201670102737b731b29d160c51b60298201526103f782518093888785019101611b2e565b0103601181018952018761196d565b8251938385948552840160409060078152661058d8dbdd5b9d60ca1b60208201520190565b90838203908401523395611b4f565b0390a261044633612127565b80f35b6001909b6102e3565b9150919250600f820180921161046f57508a91908c90601161029c565b634e487b7160e01b8d526011905260248cfd5b634e487b7160e01b8d526011825260248dfd5b8480fd5b6104a49192506118d4565b6104b05782865f6101c4565b8580fd5b86513d84823e3d90fd5b8380fd5b8280fd5b5050346100fc57816003193601126100fc576020905160238152f35b8284346106945760203660031901126106945781906104ff611872565b610507611dd6565b50610510611d49565b50610519611e0c565b506001600160a01b03168152600160205220815192610690906101e09061065790610543876118fc565b60ff855481811615158952818160081c16151560208a015260101c161515868801526001850154606088015260028501546080880152600385015460a08801528401549360c08701948552600581015460e08801908152600682015490610100890191825260078301546101208a01526105bf6008840161198f565b61014090818b015261064c600985015498610160998a8d015260ff600a8701541615156101808d01526105f4600b8701611a31565b9b6101a081019c8d5261061d601761060e60128a01611a8a565b986101c08401998a5201611ae9565b988991015251925193519a519451948a519b8c9b8c966020610200988998815201528c015260608b0190611b74565b880152860190611bbd565b928401906080809160018060a01b0381511684526020810151602085015260408101516040850152606081015160608501520151910152565b0390f35b80fd5b5050346100fc57816003193601126100fc576020905162278d008152f35b9050346104c257826003193601126104c25760209250549051908152f35b919050346104c257602091826003193601126104be57803567ffffffffffffffff918282116104b05761070891369101611c29565b610713929192611d49565b5082019184818403126104b0578035908282116107dc570160a0818403126104b05783519561074187611919565b81358381116100fc5784610756918401611d90565b8752858201358381116100fc578461076f918401611d90565b86880152848201358381116100fc578461078a918401611d90565b8588015260608201358381116100fc57846107a6918401611d90565b606088015260808201359283116106945750916107c891610690949301611d90565b608085015251928284938452830190611bbd565b8680fd5b915091346100fc576107f136611c57565b929094919560018060a01b0396877f000000000000000000000000000000000000000000000000000000000000000016803b1561049557879385809461084b898b51988997889687956318e4a27760e21b87528601611cc2565b03925af18015610aab5790859291610a94575b505060a09161086b611e0c565b50810103126104be578080519261088184611919565b61088a81611888565b938481526020958682019287810135845284830196858201358852606084019060608301358252608085019260800135835283339116146108ca90611d0a565b805193338b5260018a52868b209362ff00001985541662010000178555426003860155856006860155601785019151166bffffffffffffffffffffffff60a01b825416179055845160188401558751601984015551601a8301555190601b0155825160608152606081016109539060409060078152664e657374696e6760c81b60208201520190565b9082888201524285820152803392037ff3e9df557a77817375ddbb676dd4856f795b087c5aa2761c428d196445cba70891a261098e90612399565b905161099990612399565b93516109a490612399565b82519485928784016d0243cb13934b21029b1b7b9329d160951b90528051908189602e87019201916109d592611b2e565b8301602e810167010142232a3349d160c51b90528151918289603684019201916109fe92611b2e565b0160368101680102a3930b223349d160bd1b90528151918288603f8401920191610a2792611b2e565b01603f8101602960f81b905203848101845201610a44908361196d565b80518181526007918101918252664e657374696e6760c81b602083015291829160400193828503908301523393610a7a91611b4f565b035f805160206124ff83398151915291a261044633612127565b610a9f9192506118d4565b6104955782855f61085e565b84513d84823e3d90fd5b919050346104c25760203660031901126104c25760c09281906001600160a01b03610ade611872565b168152600160205220815190610af3826118fc565b80549260ff841615158352602083019460ff8560081c161515865260ff8285019560101c1615158552600183015495606085019687526002840154956080860196875260038501549260a0870193845285015489870152600585015460e087015260068501546101008701526007850154916101208701928352610b796008870161198f565b6101408801526009860154966101608101978852610bcf601760ff600a8a0154169861018084019915158a52610bb1600b8201611a31565b6101a0850152610bc360128201611a8a565b6101c085015201611ae9565b6101e08201525115159889610c49575b505115159687610c36575b505115159182610c23575b50519251151593519482519615158752151560208701521515908501526060840152608083015260a0820152f35b610c2f9192505161234e565b905f610bf5565b610c429197505161234e565b955f610bea565b610c559199505161234e565b975f610bdf565b5050346100fc57816003193601126100fc57905490516001600160a01b039091168152602090f35b9050346104c25760603660031901126104c257825482516334cc866d60e21b815282359360443593909260243592602092916001600160a01b039081169184818581865afa8a9181610dca575b50610dc55750815b163314908115610dbb575b5015610d86576064610cff86610cfa868a611ce9565b611ce9565b03610d45576002869055600383905584905582519485528401528201527fb2f6c02fac42195bee702ac23b7ad51c3d4905613c1448c1cb9fb3496184d16d90606090a180f35b60649184519162461bcd60e51b8352820152601760248201527f57656967687473206d7573742073756d20746f203130300000000000000000006044820152fd5b60649184519162461bcd60e51b835282015260116024820152704f6e6c792044414f2f54696d656c6f636b60781b6044820152fd5b905033145f610ce4565b610cd9565b9091508581813d8311610dff575b610de2818361196d565b81010312610dfb57518281168103610dfb57905f610cd1565b8a80fd5b503d610dd8565b5050346100fc57816003193601126100fc576020906003549051908152f35b5050346100fc57816003193601126100fc57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b919050346116e557610e7a36611c57565b9290917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169190823b156116e55783925f928389610ed4898b519889978896879563247ccb9560e01b87528601611cc2565b03925af180156116db576116c2575b5090610eee91611e78565b91610ef883612057565b338552600191602092808452848720908060ff19835416178255428183015583838301558487015180519267ffffffffffffffff938481116116af5780610f42600884015461189c565b93601f9485811161165b575b5089908d8684116001146115f757926115ec575b50505f19600383901b1c191690841b1760088201555b8851805190858211611390578190610f93601285015461189c565b858111611598575b5089908d8684116001146115345792611529575b50505f19600383901b1c191690841b1760128201555b86890151805190858211611390578190610fe2601385015461189c565b8581116114d5575b5089908d8684116001146114715792611466575b50505f19600383901b1c191690841b1760138201555b87890151805190858211611390578190611031601485015461189c565b858111611412575b5089908d8684116001146113ae57926113a3575b50505f19600383901b1c191690841b1760148201555b60608901519081518581116113905761107f601583015461189c565b848111611348575b50888c8583116001146112e25790601694836112d7575b50505f19600383901b1c191690851b1760158201555b019360808901519081519485116112c457506110d0855461189c565b828111611281575b5089879285116001146112075793805f805160206124ff83398151915299979461043a9794829461042b9b98946111fc575b50501b915f199060031b1c19161790555b7ff3e9df557a77817375ddbb676dd4856f795b087c5aa2761c428d196445cba70884516060815261116360608201604090600681526554726164466960d01b60208201520190565b928482015242868201528033930390a26111d8602d82885198015197855198899166029b1b7b9329d160cd1b868401526111a68151809288602787019101611b2e565b820165010333937b6960d51b60278201526111c982518093888785019101611b2e565b0103600d81018952018761196d565b82519383859485528401604090600681526554726164466960d01b60208201520190565b015192505f8061110a565b50848a52868a209293929190601f1984168b5b81811061126c57509261042b98959285925f805160206124ff8339815191529b999661043a999610611254575b505050811b01905561111b565b01515f1960f88460031b161c191690555f8080611247565b8284015185559386019392890192890161121a565b858b52878b208380870160051c8201928a88106112bb575b0160051c019084905b8281106112b05750506110d8565b8c81550184906112a2565b92508192611299565b634e487b7160e01b8b526041905260248afd5b015190505f8061109e565b869291601f1983166015860183528c8320925b8d82821061133257505095836016971061131a575b505050811b0160158201556110b4565b01515f1960f88460031b161c191690555f808061130a565b8389015185558a969094019392830192016112f5565b601583018d52898d208580840160051c8201928c8510611387575b0160051c019086908e5b83821061137c57505050611087565b81550186908e61136d565b92508192611363565b634e487b7160e01b8c526041875260248cfd5b015190505f8061104d565b9190879450601f1984166014870184528c8420935b8d8282106113fc57505084116113e4575b505050811b016014820155611063565b01515f1960f88460031b161c191690555f80806113d4565b8385015186558a979095019493840193016113c3565b909150601484018d52898d208580850160051c8201928c861061145d575b859493910160051c9091019087908f5b83821061144f57505050611039565b81558594508891018f611440565b92508192611430565b015190505f80610ffe565b9190879450601f1984166013870184528c8420935b8d8282106114bf57505084116114a7575b505050811b016013820155611014565b01515f1960f88460031b161c191690555f8080611497565b8385015186558a97909501949384019301611486565b909150601384018d52898d208580850160051c8201928c8610611520575b859493910160051c9091019087908f5b83821061151257505050610fea565b81558594508891018f611503565b925081926114f3565b015190505f80610faf565b9190879450601f1984166012870184528c8420935b8d828210611582575050841161156a575b505050811b016012820155610fc5565b01515f1960f88460031b161c191690555f808061155a565b8385015186558a97909501949384019301611549565b909150601284018d52898d208580850160051c8201928c86106115e3575b859493910160051c9091019087908f5b8382106115d557505050610f9b565b81558594508891018f6115c6565b925081926115b6565b015190505f80610f62565b9190879450601f1984166008870184528c8420935b8d828210611645575050841161162d575b505050811b016008820155610f78565b01515f1960f88460031b161c191690555f808061161d565b8385015186558a9790950194938401930161160c565b909150600884018d52898d208580850160051c8201928c86106116a6575b859493910160051c9091019087908f5b83821061169857505050610f4e565b81558594508891018f611689565b92508192611679565b634e487b7160e01b8b526041865260248bfd5b610eee929195506116d2906118d4565b5f949091610ee3565b84513d5f823e3d90fd5b5f80fd5b9050346116e55760203660031901126116e5576001600160a01b0361170c611872565b165f52600160205281805f2080546001820154936002830154906003840154908401549260058501549060068601546007870154906008880161174e9061198f565b93600989015497600a8a015460ff1696600b8b0161176b90611a31565b9861177860128d01611a8a565b9b60170161178590611ae9565b9c519e8f9e8f916103409960ff8116151584528060081c60ff161515602085015260101c60ff1615159083015260608201526080015260a08d015260c08c015260e08b01526101008a01526101208901528061014089015287016117e891611b4f565b9261016087015215156101808601526101a0850161180591611b74565b83810361028085015261181791611bbd565b81516001600160a01b03166102a084015260208201516102c084015260408201516102e084015260608201516103008401526080909101516103208301520390f35b346116e5575f3660031901126116e55780602360209252f35b600435906001600160a01b03821682036116e557565b35906001600160a01b03821682036116e557565b90600182811c921680156118ca575b60208310146118b657565b634e487b7160e01b5f52602260045260245ffd5b91607f16916118ab565b67ffffffffffffffff81116118e857604052565b634e487b7160e01b5f52604160045260245ffd5b610200810190811067ffffffffffffffff8211176118e857604052565b60a0810190811067ffffffffffffffff8211176118e857604052565b60e0810190811067ffffffffffffffff8211176118e857604052565b6040810190811067ffffffffffffffff8211176118e857604052565b90601f8019910116810190811067ffffffffffffffff8211176118e857604052565b9060405191825f82546119a18161189c565b908184526020946001916001811690815f14611a0f57506001146119d1575b5050506119cf9250038361196d565b565b5f90815285812095935091905b8183106119f75750506119cf93508201015f80806119c0565b855488840185015294850194879450918301916119de565b925050506119cf94925060ff191682840152151560051b8201015f80806119c0565b90604051611a3e81611935565b82546001600160a01b0316815260018301546020820152600283015460408201526003830154606082015260048301546080820152600583015460a082015260069092015460c0830152565b90604051611a9781611919565b6080611ae460048395611aa98161198f565b8552611ab76001820161198f565b6020860152611ac86002820161198f565b6040860152611ad96003820161198f565b60608601520161198f565b910152565b90604051611af681611919565b82546001600160a01b031681526001830154602082015260028301546040820152600383015460608201526004909201546080830152565b5f5b838110611b3f5750505f910152565b8181015183820152602001611b30565b90602091611b6881518092818552858086019101611b2e565b601f01601f1916010190565b60c0809160018060a01b0381511684526020810151602085015260408101516040850152606081015160608501526080810151608085015260a081015160a08501520151910152565b611c26916080611c15611c03611bf1611bdf865160a0875260a0870190611b4f565b60208701518682036020880152611b4f565b60408601518582036040870152611b4f565b60608501518482036060860152611b4f565b920151906080818403910152611b4f565b90565b9181601f840112156116e55782359167ffffffffffffffff83116116e557602083818601950101116116e557565b60406003198201126116e55767ffffffffffffffff916004358381116116e55782611c8491600401611c29565b939093926024359182116116e557611c9e91600401611c29565b9091565b908060209392818452848401375f828201840152601f01601f1916010190565b9290611cdb90611c269593604086526040860191611ca2565b926020818503910152611ca2565b91908201809211611cf657565b634e487b7160e01b5f52601160045260245ffd5b15611d1157565b60405162461bcd60e51b815260206004820152601060248201526f082c6c6deeadce840dad2e6dac2e8c6d60831b6044820152606490fd5b60405190611d5682611919565b81608060609182815282602082015282604082015282808201520152565b67ffffffffffffffff81116118e857601f01601f191660200190565b81601f820112156116e557803590611da782611d74565b92611db5604051948561196d565b828452602083830101116116e557815f926020809301838601378301015290565b60405190611de382611935565b5f60c0838281528260208201528260408201528260608201528260808201528260a08201520152565b60405190611e1982611919565b5f6080838281528260208201528260408201528260608201520152565b81601f820112156116e5578051611e4c81611d74565b92611e5a604051948561196d565b818452602082840101116116e557611c269160208085019101611b2e565b90611e81611d49565b50611eac5f604093845180938192637fa408d960e01b83526020968760048501526024840191611ca2565b0381305afa5f9181611f83575b50611f7d5750671d995c9a599a595960c21b825192611ed784611919565b8051611ee281611951565b600381526203735360ec1b8482015284528051611efe81611951565b600d81526c1d1b1cdb8b5d995c9a599a5959609a1b84820152838501528051611f2681611951565b600a815269323032342d30312d313560b01b84820152818501528051611f4b81611951565b60078152663ab735b737bbb760c91b8482015260608501525191611f6e83611951565b60088352820152608082015290565b91505090565b9091503d805f833e611f95818361196d565b810183828203126116e557815167ffffffffffffffff928382116116e557019060a0828203126116e557855192611fcb84611919565b82518181116116e55782611fe0918501611e36565b8452858301518181116116e55782611ff9918501611e36565b86850152868301518181116116e55782612014918501611e36565b8785015260608301518181116116e55782612030918501611e36565b606085015260808301519081116116e55761204b9201611e36565b6080820152905f611eb9565b51905f915f5b81518110156120d1576120708183612374565b5160f81c6030811015806120c6575b61208d575b5060010161205d565b600a94919491828102928184041490151715611cf657602f190160ff91828211611cf6576001926120bf921690611ce9565b9390612084565b50603981111561207f565b505090610320811015612121576102ee81101561211b576102bc8110156121155761028a81101561210f57610258111561210a57601e90565b603290565b50604190565b50604b90565b50605590565b50605f90565b60018060a01b0380911690815f5260016020526040805f205f905f93815460ff81168061233b575b61231d575b60ff8160081c168061230a575b6122de575b60101c60ff16806122cb575b6122a3575b6007820180549095909381158061229857612284570480955b5542600983015584612231575b50600a0160ff8154867f2743c09acd09f346fca50195f8b4ebf3056ef088f466f98e2bcfc562277146c8606060238910159687968688168719871617905588519081528960208201528689820152a2161515036121fb575b50505050565b7f74e405d0b260e01bf8bb805b85863b0197c75af32ab8952941f349c81f67492c9282519182526020820152a25f8080806121f5565b5f5416803b156116e5575f8091604486518094819363a75b24c760e01b83523360048401528a60248401525af180156116db5790600a9291612275575b509061219d565b61227e906118d4565b5f61226e565b634e487b7160e01b5f52601260045260245ffd5b5050505f8095612190565b93916122c5906122bf60068401549161026c6004548094612361565b93611ce9565b93612177565b506122d9600383015461234e565b612172565b949261230260ff916122fc60058601549161026c6003548094612361565b95611ce9565b959050612166565b50612318600284015461234e565b612161565b945091506004810154916123346002548094612361565b9294612154565b50612349600184015461234e565b61214f565b62278d008101809111611cf65742111590565b81810292918115918404141715611cf657565b908151811015612385570160200190565b634e487b7160e01b5f52603260045260245ffd5b80156124555780815f925b61243e5750806123b383611d74565b926123c1604051948561196d565b808452601f196123d082611d74565b01366020860137915b6123e257505090565b5f198201918211611cf65781600a9182810492808402908482041484151715611cf6578103908111611cf65760ff809116603001908111611cf65760f81b6001600160f81b0319165f1a906124379085612374565b53806123d9565b915f198114611cf6576001600a91019204806123a4565b5060405161246281611951565b60018152600360fc1b602082015290565b670de0b6b3a7640000810460648110156124be57600a8110156124b757600111156124b15767016345785d8a000011156124ac57600a90565b600f90565b50601490565b5050601990565b5050601e90565b6103e88110156124f85760648110156124b157600a8110156124f257600111156124ed575f90565b600a90565b50600f90565b5060199056fe52fd0ce03bb9cae00f43ca137835ddd590733f99ab7866f37f67bd582d2c16dea2646970667358221220960c3cfdee9ed63ce644474e2e5a08c1405ee4ce037393e8925c6f29740ef4c764736f6c63430008180033",
-  "deployedBytecode": "0x6080604081815260049182361015610015575f80fd5b5f925f3560e01c9182630a49cf4d146118595750816345171f26146116e95781634f0ca97114610e695781635c9770c514610e255781636087c89f14610e065781636277f6c614610c84578163665a11ca14610c5c5781636b0ad6fe14610ab55783826374601a8e146107e0575081637fa408d9146106d35781638922f3e3146106b557816393e30a6a146106975781639de1b1ee146104e2578163b7161fac146104c6578163da4561e41461014157508063f25d4f33146101005763f511cab2146100df575f80fd5b346100fc57816003193601126100fc576020906002549051908152f35b5080fd5b50346100fc5760203660031901126100fc5760209160ff90600a9083906001600160a01b0361012d611872565b168152600186522001541690519015158152f35b919050346104c2578261015336611c57565b90936001600160a01b0393919290917f0000000000000000000000000000000000000000000000000000000000000000851691823b156104be5786928492838b6101b1898d5198899788968795634295e81760e01b87528601611cc2565b03925af180156104b45790859291610499575b505060e0916101d1611dd6565b5081010312610495578251906101e682611935565b6101ef83611888565b92838352602093848401968583013588528685019487840135865260608101906060850135825260808101926080860135845261024560a083019560a0880135875260c080850198013588528833911614611d0a565b60146102518951612473565b8101809111610482578b92916102728e9261026c86516124c5565b90611ce9565b907fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470865103610452575b509760118b98610406986031985f805160206124ff8339815191529f9d969861042b9f96988f9a61043a9f9b8b6103a89d6103a19d50606481115f146104495750600160649b5b33835252209761010061ff00198a54161789554260028a01558960058a0155600b89019151166bffffffffffffffffffffffff60a01b82541617905551600c8701558751600d87015551600e86015551600f850155516010840155519101557ff3e9df557a77817375ddbb676dd4856f795b087c5aa2761c428d196445cba70889516060815261038b6060820160409060078152661058d8dbdd5b9d60ca1b60208201520190565b9289820152428b8201528033930390a251612399565b9851612399565b9785519889916802130b630b731b29d160bd1b868401526103d28151809288602987019101611b2e565b8201670102737b731b29d160c51b60298201526103f782518093888785019101611b2e565b0103601181018952018761196d565b8251938385948552840160409060078152661058d8dbdd5b9d60ca1b60208201520190565b90838203908401523395611b4f565b0390a261044633612127565b80f35b6001909b6102e3565b9150919250600f820180921161046f57508a91908c90601161029c565b634e487b7160e01b8d526011905260248cfd5b634e487b7160e01b8d526011825260248dfd5b8480fd5b6104a49192506118d4565b6104b05782865f6101c4565b8580fd5b86513d84823e3d90fd5b8380fd5b8280fd5b5050346100fc57816003193601126100fc576020905160238152f35b8284346106945760203660031901126106945781906104ff611872565b610507611dd6565b50610510611d49565b50610519611e0c565b506001600160a01b03168152600160205220815192610690906101e09061065790610543876118fc565b60ff855481811615158952818160081c16151560208a015260101c161515868801526001850154606088015260028501546080880152600385015460a08801528401549360c08701948552600581015460e08801908152600682015490610100890191825260078301546101208a01526105bf6008840161198f565b61014090818b015261064c600985015498610160998a8d015260ff600a8701541615156101808d01526105f4600b8701611a31565b9b6101a081019c8d5261061d601761060e60128a01611a8a565b986101c08401998a5201611ae9565b988991015251925193519a519451948a519b8c9b8c966020610200988998815201528c015260608b0190611b74565b880152860190611bbd565b928401906080809160018060a01b0381511684526020810151602085015260408101516040850152606081015160608501520151910152565b0390f35b80fd5b5050346100fc57816003193601126100fc576020905162278d008152f35b9050346104c257826003193601126104c25760209250549051908152f35b919050346104c257602091826003193601126104be57803567ffffffffffffffff918282116104b05761070891369101611c29565b610713929192611d49565b5082019184818403126104b0578035908282116107dc570160a0818403126104b05783519561074187611919565b81358381116100fc5784610756918401611d90565b8752858201358381116100fc578461076f918401611d90565b86880152848201358381116100fc578461078a918401611d90565b8588015260608201358381116100fc57846107a6918401611d90565b606088015260808201359283116106945750916107c891610690949301611d90565b608085015251928284938452830190611bbd565b8680fd5b915091346100fc576107f136611c57565b929094919560018060a01b0396877f000000000000000000000000000000000000000000000000000000000000000016803b1561049557879385809461084b898b51988997889687956318e4a27760e21b87528601611cc2565b03925af18015610aab5790859291610a94575b505060a09161086b611e0c565b50810103126104be578080519261088184611919565b61088a81611888565b938481526020958682019287810135845284830196858201358852606084019060608301358252608085019260800135835283339116146108ca90611d0a565b805193338b5260018a52868b209362ff00001985541662010000178555426003860155856006860155601785019151166bffffffffffffffffffffffff60a01b825416179055845160188401558751601984015551601a8301555190601b0155825160608152606081016109539060409060078152664e657374696e6760c81b60208201520190565b9082888201524285820152803392037ff3e9df557a77817375ddbb676dd4856f795b087c5aa2761c428d196445cba70891a261098e90612399565b905161099990612399565b93516109a490612399565b82519485928784016d0243cb13934b21029b1b7b9329d160951b90528051908189602e87019201916109d592611b2e565b8301602e810167010142232a3349d160c51b90528151918289603684019201916109fe92611b2e565b0160368101680102a3930b223349d160bd1b90528151918288603f8401920191610a2792611b2e565b01603f8101602960f81b905203848101845201610a44908361196d565b80518181526007918101918252664e657374696e6760c81b602083015291829160400193828503908301523393610a7a91611b4f565b035f805160206124ff83398151915291a261044633612127565b610a9f9192506118d4565b6104955782855f61085e565b84513d84823e3d90fd5b919050346104c25760203660031901126104c25760c09281906001600160a01b03610ade611872565b168152600160205220815190610af3826118fc565b80549260ff841615158352602083019460ff8560081c161515865260ff8285019560101c1615158552600183015495606085019687526002840154956080860196875260038501549260a0870193845285015489870152600585015460e087015260068501546101008701526007850154916101208701928352610b796008870161198f565b6101408801526009860154966101608101978852610bcf601760ff600a8a0154169861018084019915158a52610bb1600b8201611a31565b6101a0850152610bc360128201611a8a565b6101c085015201611ae9565b6101e08201525115159889610c49575b505115159687610c36575b505115159182610c23575b50519251151593519482519615158752151560208701521515908501526060840152608083015260a0820152f35b610c2f9192505161234e565b905f610bf5565b610c429197505161234e565b955f610bea565b610c559199505161234e565b975f610bdf565b5050346100fc57816003193601126100fc57905490516001600160a01b039091168152602090f35b9050346104c25760603660031901126104c257825482516334cc866d60e21b815282359360443593909260243592602092916001600160a01b039081169184818581865afa8a9181610dca575b50610dc55750815b163314908115610dbb575b5015610d86576064610cff86610cfa868a611ce9565b611ce9565b03610d45576002869055600383905584905582519485528401528201527fb2f6c02fac42195bee702ac23b7ad51c3d4905613c1448c1cb9fb3496184d16d90606090a180f35b60649184519162461bcd60e51b8352820152601760248201527f57656967687473206d7573742073756d20746f203130300000000000000000006044820152fd5b60649184519162461bcd60e51b835282015260116024820152704f6e6c792044414f2f54696d656c6f636b60781b6044820152fd5b905033145f610ce4565b610cd9565b9091508581813d8311610dff575b610de2818361196d565b81010312610dfb57518281168103610dfb57905f610cd1565b8a80fd5b503d610dd8565b5050346100fc57816003193601126100fc576020906003549051908152f35b5050346100fc57816003193601126100fc57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b919050346116e557610e7a36611c57565b9290917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169190823b156116e55783925f928389610ed4898b519889978896879563247ccb9560e01b87528601611cc2565b03925af180156116db576116c2575b5090610eee91611e78565b91610ef883612057565b338552600191602092808452848720908060ff19835416178255428183015583838301558487015180519267ffffffffffffffff938481116116af5780610f42600884015461189c565b93601f9485811161165b575b5089908d8684116001146115f757926115ec575b50505f19600383901b1c191690841b1760088201555b8851805190858211611390578190610f93601285015461189c565b858111611598575b5089908d8684116001146115345792611529575b50505f19600383901b1c191690841b1760128201555b86890151805190858211611390578190610fe2601385015461189c565b8581116114d5575b5089908d8684116001146114715792611466575b50505f19600383901b1c191690841b1760138201555b87890151805190858211611390578190611031601485015461189c565b858111611412575b5089908d8684116001146113ae57926113a3575b50505f19600383901b1c191690841b1760148201555b60608901519081518581116113905761107f601583015461189c565b848111611348575b50888c8583116001146112e25790601694836112d7575b50505f19600383901b1c191690851b1760158201555b019360808901519081519485116112c457506110d0855461189c565b828111611281575b5089879285116001146112075793805f805160206124ff83398151915299979461043a9794829461042b9b98946111fc575b50501b915f199060031b1c19161790555b7ff3e9df557a77817375ddbb676dd4856f795b087c5aa2761c428d196445cba70884516060815261116360608201604090600681526554726164466960d01b60208201520190565b928482015242868201528033930390a26111d8602d82885198015197855198899166029b1b7b9329d160cd1b868401526111a68151809288602787019101611b2e565b820165010333937b6960d51b60278201526111c982518093888785019101611b2e565b0103600d81018952018761196d565b82519383859485528401604090600681526554726164466960d01b60208201520190565b015192505f8061110a565b50848a52868a209293929190601f1984168b5b81811061126c57509261042b98959285925f805160206124ff8339815191529b999661043a999610611254575b505050811b01905561111b565b01515f1960f88460031b161c191690555f8080611247565b8284015185559386019392890192890161121a565b858b52878b208380870160051c8201928a88106112bb575b0160051c019084905b8281106112b05750506110d8565b8c81550184906112a2565b92508192611299565b634e487b7160e01b8b526041905260248afd5b015190505f8061109e565b869291601f1983166015860183528c8320925b8d82821061133257505095836016971061131a575b505050811b0160158201556110b4565b01515f1960f88460031b161c191690555f808061130a565b8389015185558a969094019392830192016112f5565b601583018d52898d208580840160051c8201928c8510611387575b0160051c019086908e5b83821061137c57505050611087565b81550186908e61136d565b92508192611363565b634e487b7160e01b8c526041875260248cfd5b015190505f8061104d565b9190879450601f1984166014870184528c8420935b8d8282106113fc57505084116113e4575b505050811b016014820155611063565b01515f1960f88460031b161c191690555f80806113d4565b8385015186558a979095019493840193016113c3565b909150601484018d52898d208580850160051c8201928c861061145d575b859493910160051c9091019087908f5b83821061144f57505050611039565b81558594508891018f611440565b92508192611430565b015190505f80610ffe565b9190879450601f1984166013870184528c8420935b8d8282106114bf57505084116114a7575b505050811b016013820155611014565b01515f1960f88460031b161c191690555f8080611497565b8385015186558a97909501949384019301611486565b909150601384018d52898d208580850160051c8201928c8610611520575b859493910160051c9091019087908f5b83821061151257505050610fea565b81558594508891018f611503565b925081926114f3565b015190505f80610faf565b9190879450601f1984166012870184528c8420935b8d828210611582575050841161156a575b505050811b016012820155610fc5565b01515f1960f88460031b161c191690555f808061155a565b8385015186558a97909501949384019301611549565b909150601284018d52898d208580850160051c8201928c86106115e3575b859493910160051c9091019087908f5b8382106115d557505050610f9b565b81558594508891018f6115c6565b925081926115b6565b015190505f80610f62565b9190879450601f1984166008870184528c8420935b8d828210611645575050841161162d575b505050811b016008820155610f78565b01515f1960f88460031b161c191690555f808061161d565b8385015186558a9790950194938401930161160c565b909150600884018d52898d208580850160051c8201928c86106116a6575b859493910160051c9091019087908f5b83821061169857505050610f4e565b81558594508891018f611689565b92508192611679565b634e487b7160e01b8b526041865260248bfd5b610eee929195506116d2906118d4565b5f949091610ee3565b84513d5f823e3d90fd5b5f80fd5b9050346116e55760203660031901126116e5576001600160a01b0361170c611872565b165f52600160205281805f2080546001820154936002830154906003840154908401549260058501549060068601546007870154906008880161174e9061198f565b93600989015497600a8a015460ff1696600b8b0161176b90611a31565b9861177860128d01611a8a565b9b60170161178590611ae9565b9c519e8f9e8f916103409960ff8116151584528060081c60ff161515602085015260101c60ff1615159083015260608201526080015260a08d015260c08c015260e08b01526101008a01526101208901528061014089015287016117e891611b4f565b9261016087015215156101808601526101a0850161180591611b74565b83810361028085015261181791611bbd565b81516001600160a01b03166102a084015260208201516102c084015260408201516102e084015260608201516103008401526080909101516103208301520390f35b346116e5575f3660031901126116e55780602360209252f35b600435906001600160a01b03821682036116e557565b35906001600160a01b03821682036116e557565b90600182811c921680156118ca575b60208310146118b657565b634e487b7160e01b5f52602260045260245ffd5b91607f16916118ab565b67ffffffffffffffff81116118e857604052565b634e487b7160e01b5f52604160045260245ffd5b610200810190811067ffffffffffffffff8211176118e857604052565b60a0810190811067ffffffffffffffff8211176118e857604052565b60e0810190811067ffffffffffffffff8211176118e857604052565b6040810190811067ffffffffffffffff8211176118e857604052565b90601f8019910116810190811067ffffffffffffffff8211176118e857604052565b9060405191825f82546119a18161189c565b908184526020946001916001811690815f14611a0f57506001146119d1575b5050506119cf9250038361196d565b565b5f90815285812095935091905b8183106119f75750506119cf93508201015f80806119c0565b855488840185015294850194879450918301916119de565b925050506119cf94925060ff191682840152151560051b8201015f80806119c0565b90604051611a3e81611935565b82546001600160a01b0316815260018301546020820152600283015460408201526003830154606082015260048301546080820152600583015460a082015260069092015460c0830152565b90604051611a9781611919565b6080611ae460048395611aa98161198f565b8552611ab76001820161198f565b6020860152611ac86002820161198f565b6040860152611ad96003820161198f565b60608601520161198f565b910152565b90604051611af681611919565b82546001600160a01b031681526001830154602082015260028301546040820152600383015460608201526004909201546080830152565b5f5b838110611b3f5750505f910152565b8181015183820152602001611b30565b90602091611b6881518092818552858086019101611b2e565b601f01601f1916010190565b60c0809160018060a01b0381511684526020810151602085015260408101516040850152606081015160608501526080810151608085015260a081015160a08501520151910152565b611c26916080611c15611c03611bf1611bdf865160a0875260a0870190611b4f565b60208701518682036020880152611b4f565b60408601518582036040870152611b4f565b60608501518482036060860152611b4f565b920151906080818403910152611b4f565b90565b9181601f840112156116e55782359167ffffffffffffffff83116116e557602083818601950101116116e557565b60406003198201126116e55767ffffffffffffffff916004358381116116e55782611c8491600401611c29565b939093926024359182116116e557611c9e91600401611c29565b9091565b908060209392818452848401375f828201840152601f01601f1916010190565b9290611cdb90611c269593604086526040860191611ca2565b926020818503910152611ca2565b91908201809211611cf657565b634e487b7160e01b5f52601160045260245ffd5b15611d1157565b60405162461bcd60e51b815260206004820152601060248201526f082c6c6deeadce840dad2e6dac2e8c6d60831b6044820152606490fd5b60405190611d5682611919565b81608060609182815282602082015282604082015282808201520152565b67ffffffffffffffff81116118e857601f01601f191660200190565b81601f820112156116e557803590611da782611d74565b92611db5604051948561196d565b828452602083830101116116e557815f926020809301838601378301015290565b60405190611de382611935565b5f60c0838281528260208201528260408201528260608201528260808201528260a08201520152565b60405190611e1982611919565b5f6080838281528260208201528260408201528260608201520152565b81601f820112156116e5578051611e4c81611d74565b92611e5a604051948561196d565b818452602082840101116116e557611c269160208085019101611b2e565b90611e81611d49565b50611eac5f604093845180938192637fa408d960e01b83526020968760048501526024840191611ca2565b0381305afa5f9181611f83575b50611f7d5750671d995c9a599a595960c21b825192611ed784611919565b8051611ee281611951565b600381526203735360ec1b8482015284528051611efe81611951565b600d81526c1d1b1cdb8b5d995c9a599a5959609a1b84820152838501528051611f2681611951565b600a815269323032342d30312d313560b01b84820152818501528051611f4b81611951565b60078152663ab735b737bbb760c91b8482015260608501525191611f6e83611951565b60088352820152608082015290565b91505090565b9091503d805f833e611f95818361196d565b810183828203126116e557815167ffffffffffffffff928382116116e557019060a0828203126116e557855192611fcb84611919565b82518181116116e55782611fe0918501611e36565b8452858301518181116116e55782611ff9918501611e36565b86850152868301518181116116e55782612014918501611e36565b8785015260608301518181116116e55782612030918501611e36565b606085015260808301519081116116e55761204b9201611e36565b6080820152905f611eb9565b51905f915f5b81518110156120d1576120708183612374565b5160f81c6030811015806120c6575b61208d575b5060010161205d565b600a94919491828102928184041490151715611cf657602f190160ff91828211611cf6576001926120bf921690611ce9565b9390612084565b50603981111561207f565b505090610320811015612121576102ee81101561211b576102bc8110156121155761028a81101561210f57610258111561210a57601e90565b603290565b50604190565b50604b90565b50605590565b50605f90565b60018060a01b0380911690815f5260016020526040805f205f905f93815460ff81168061233b575b61231d575b60ff8160081c168061230a575b6122de575b60101c60ff16806122cb575b6122a3575b6007820180549095909381158061229857612284570480955b5542600983015584612231575b50600a0160ff8154867f2743c09acd09f346fca50195f8b4ebf3056ef088f466f98e2bcfc562277146c8606060238910159687968688168719871617905588519081528960208201528689820152a2161515036121fb575b50505050565b7f74e405d0b260e01bf8bb805b85863b0197c75af32ab8952941f349c81f67492c9282519182526020820152a25f8080806121f5565b5f5416803b156116e5575f8091604486518094819363a75b24c760e01b83523360048401528a60248401525af180156116db5790600a9291612275575b509061219d565b61227e906118d4565b5f61226e565b634e487b7160e01b5f52601260045260245ffd5b5050505f8095612190565b93916122c5906122bf60068401549161026c6004548094612361565b93611ce9565b93612177565b506122d9600383015461234e565b612172565b949261230260ff916122fc60058601549161026c6003548094612361565b95611ce9565b959050612166565b50612318600284015461234e565b612161565b945091506004810154916123346002548094612361565b9294612154565b50612349600184015461234e565b61214f565b62278d008101809111611cf65742111590565b81810292918115918404141715611cf657565b908151811015612385570160200190565b634e487b7160e01b5f52603260045260245ffd5b80156124555780815f925b61243e5750806123b383611d74565b926123c1604051948561196d565b808452601f196123d082611d74565b01366020860137915b6123e257505090565b5f198201918211611cf65781600a9182810492808402908482041484151715611cf6578103908111611cf65760ff809116603001908111611cf65760f81b6001600160f81b0319165f1a906124379085612374565b53806123d9565b915f198114611cf6576001600a91019204806123a4565b5060405161246281611951565b60018152600360fc1b602082015290565b670de0b6b3a7640000810460648110156124be57600a8110156124b757600111156124b15767016345785d8a000011156124ac57600a90565b600f90565b50601490565b5050601990565b5050601e90565b6103e88110156124f85760648110156124b157600a8110156124f257600111156124ed575f90565b600a90565b50600f90565b5060199056fe52fd0ce03bb9cae00f43ca137835ddd590733f99ab7866f37f67bd582d2c16dea2646970667358221220960c3cfdee9ed63ce644474e2e5a08c1405ee4ce037393e8925c6f29740ef4c764736f6c63430008180033",
+  "bytecode": "0x60a034620000b957601f6200263b38819003918201601f19168301916001600160401b03831184841017620000bd578084926040948552833981010312620000b9576200005a60206200005283620000d1565b9201620000d1565b6032600255601e60035560146004556001600160a01b039182166080525f80546001600160a01b031916919092161790556040516125549081620000e782396080518181816101640152818161080101528181610e3a0152610e7f0152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b51906001600160a01b0382168203620000b95756fe6080604081815260049182361015610015575f80fd5b5f925f3560e01c9182630a49cf4d146118595750816345171f26146116e95781634f0ca97114610e695781635c9770c514610e255781636087c89f14610e065781636277f6c614610c84578163665a11ca14610c5c5781636b0ad6fe14610ab55783826374601a8e146107e0575081637fa408d9146106d35781638922f3e3146106b557816393e30a6a146106975781639de1b1ee146104e2578163b7161fac146104c6578163da4561e41461014157508063f25d4f33146101005763f511cab2146100df575f80fd5b346100fc57816003193601126100fc576020906002549051908152f35b5080fd5b50346100fc5760203660031901126100fc5760209160ff90600a9083906001600160a01b0361012d611872565b168152600186522001541690519015158152f35b919050346104c2578261015336611c57565b90936001600160a01b0393919290917f0000000000000000000000000000000000000000000000000000000000000000851691823b156104be5786928492838b6101b1898d5198899788968795634295e81760e01b87528601611cc2565b03925af180156104b45790859291610499575b505060e0916101d1611dd6565b5081010312610495578251906101e682611935565b6101ef83611888565b92838352602093848401968583013588528685019487840135865260608101906060850135825260808101926080860135845261024560a083019560a0880135875260c080850198013588528833911614611d0a565b60146102518951612473565b8101809111610482578b92916102728e9261026c86516124c5565b90611ce9565b907fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470865103610452575b509760118b98610406986031985f805160206124ff8339815191529f9d969861042b9f96988f9a61043a9f9b8b6103a89d6103a19d50606481115f146104495750600160649b5b33835252209761010061ff00198a54161789554260028a01558960058a0155600b89019151166bffffffffffffffffffffffff60a01b82541617905551600c8701558751600d87015551600e86015551600f850155516010840155519101557ff3e9df557a77817375ddbb676dd4856f795b087c5aa2761c428d196445cba70889516060815261038b6060820160409060078152661058d8dbdd5b9d60ca1b60208201520190565b9289820152428b8201528033930390a251612399565b9851612399565b9785519889916802130b630b731b29d160bd1b868401526103d28151809288602987019101611b2e565b8201670102737b731b29d160c51b60298201526103f782518093888785019101611b2e565b0103601181018952018761196d565b8251938385948552840160409060078152661058d8dbdd5b9d60ca1b60208201520190565b90838203908401523395611b4f565b0390a261044633612127565b80f35b6001909b6102e3565b9150919250600f820180921161046f57508a91908c90601161029c565b634e487b7160e01b8d526011905260248cfd5b634e487b7160e01b8d526011825260248dfd5b8480fd5b6104a49192506118d4565b6104b05782865f6101c4565b8580fd5b86513d84823e3d90fd5b8380fd5b8280fd5b5050346100fc57816003193601126100fc576020905160238152f35b8284346106945760203660031901126106945781906104ff611872565b610507611dd6565b50610510611d49565b50610519611e0c565b506001600160a01b03168152600160205220815192610690906101e09061065790610543876118fc565b60ff855481811615158952818160081c16151560208a015260101c161515868801526001850154606088015260028501546080880152600385015460a08801528401549360c08701948552600581015460e08801908152600682015490610100890191825260078301546101208a01526105bf6008840161198f565b61014090818b015261064c600985015498610160998a8d015260ff600a8701541615156101808d01526105f4600b8701611a31565b9b6101a081019c8d5261061d601761060e60128a01611a8a565b986101c08401998a5201611ae9565b988991015251925193519a519451948a519b8c9b8c966020610200988998815201528c015260608b0190611b74565b880152860190611bbd565b928401906080809160018060a01b0381511684526020810151602085015260408101516040850152606081015160608501520151910152565b0390f35b80fd5b5050346100fc57816003193601126100fc576020905162278d008152f35b9050346104c257826003193601126104c25760209250549051908152f35b919050346104c257602091826003193601126104be57803567ffffffffffffffff918282116104b05761070891369101611c29565b610713929192611d49565b5082019184818403126104b0578035908282116107dc570160a0818403126104b05783519561074187611919565b81358381116100fc5784610756918401611d90565b8752858201358381116100fc578461076f918401611d90565b86880152848201358381116100fc578461078a918401611d90565b8588015260608201358381116100fc57846107a6918401611d90565b606088015260808201359283116106945750916107c891610690949301611d90565b608085015251928284938452830190611bbd565b8680fd5b915091346100fc576107f136611c57565b929094919560018060a01b0396877f000000000000000000000000000000000000000000000000000000000000000016803b1561049557879385809461084b898b51988997889687956318e4a27760e21b87528601611cc2565b03925af18015610aab5790859291610a94575b505060a09161086b611e0c565b50810103126104be578080519261088184611919565b61088a81611888565b938481526020958682019287810135845284830196858201358852606084019060608301358252608085019260800135835283339116146108ca90611d0a565b805193338b5260018a52868b209362ff00001985541662010000178555426003860155856006860155601785019151166bffffffffffffffffffffffff60a01b825416179055845160188401558751601984015551601a8301555190601b0155825160608152606081016109539060409060078152664e657374696e6760c81b60208201520190565b9082888201524285820152803392037ff3e9df557a77817375ddbb676dd4856f795b087c5aa2761c428d196445cba70891a261098e90612399565b905161099990612399565b93516109a490612399565b82519485928784016d0243cb13934b21029b1b7b9329d160951b90528051908189602e87019201916109d592611b2e565b8301602e810167010142232a3349d160c51b90528151918289603684019201916109fe92611b2e565b0160368101680102a3930b223349d160bd1b90528151918288603f8401920191610a2792611b2e565b01603f8101602960f81b905203848101845201610a44908361196d565b80518181526007918101918252664e657374696e6760c81b602083015291829160400193828503908301523393610a7a91611b4f565b035f805160206124ff83398151915291a261044633612127565b610a9f9192506118d4565b6104955782855f61085e565b84513d84823e3d90fd5b919050346104c25760203660031901126104c25760c09281906001600160a01b03610ade611872565b168152600160205220815190610af3826118fc565b80549260ff841615158352602083019460ff8560081c161515865260ff8285019560101c1615158552600183015495606085019687526002840154956080860196875260038501549260a0870193845285015489870152600585015460e087015260068501546101008701526007850154916101208701928352610b796008870161198f565b6101408801526009860154966101608101978852610bcf601760ff600a8a0154169861018084019915158a52610bb1600b8201611a31565b6101a0850152610bc360128201611a8a565b6101c085015201611ae9565b6101e08201525115159889610c49575b505115159687610c36575b505115159182610c23575b50519251151593519482519615158752151560208701521515908501526060840152608083015260a0820152f35b610c2f9192505161234e565b905f610bf5565b610c429197505161234e565b955f610bea565b610c559199505161234e565b975f610bdf565b5050346100fc57816003193601126100fc57905490516001600160a01b039091168152602090f35b9050346104c25760603660031901126104c257825482516334cc866d60e21b815282359360443593909260243592602092916001600160a01b039081169184818581865afa8a9181610dca575b50610dc55750815b163314908115610dbb575b5015610d86576064610cff86610cfa868a611ce9565b611ce9565b03610d45576002869055600383905584905582519485528401528201527fb2f6c02fac42195bee702ac23b7ad51c3d4905613c1448c1cb9fb3496184d16d90606090a180f35b60649184519162461bcd60e51b8352820152601760248201527f57656967687473206d7573742073756d20746f203130300000000000000000006044820152fd5b60649184519162461bcd60e51b835282015260116024820152704f6e6c792044414f2f54696d656c6f636b60781b6044820152fd5b905033145f610ce4565b610cd9565b9091508581813d8311610dff575b610de2818361196d565b81010312610dfb57518281168103610dfb57905f610cd1565b8a80fd5b503d610dd8565b5050346100fc57816003193601126100fc576020906003549051908152f35b5050346100fc57816003193601126100fc57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b919050346116e557610e7a36611c57565b9290917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169190823b156116e55783925f928389610ed4898b519889978896879563247ccb9560e01b87528601611cc2565b03925af180156116db576116c2575b5090610eee91611e78565b91610ef883612057565b338552600191602092808452848720908060ff19835416178255428183015583838301558487015180519267ffffffffffffffff938481116116af5780610f42600884015461189c565b93601f9485811161165b575b5089908d8684116001146115f757926115ec575b50505f19600383901b1c191690841b1760088201555b8851805190858211611390578190610f93601285015461189c565b858111611598575b5089908d8684116001146115345792611529575b50505f19600383901b1c191690841b1760128201555b86890151805190858211611390578190610fe2601385015461189c565b8581116114d5575b5089908d8684116001146114715792611466575b50505f19600383901b1c191690841b1760138201555b87890151805190858211611390578190611031601485015461189c565b858111611412575b5089908d8684116001146113ae57926113a3575b50505f19600383901b1c191690841b1760148201555b60608901519081518581116113905761107f601583015461189c565b848111611348575b50888c8583116001146112e25790601694836112d7575b50505f19600383901b1c191690851b1760158201555b019360808901519081519485116112c457506110d0855461189c565b828111611281575b5089879285116001146112075793805f805160206124ff83398151915299979461043a9794829461042b9b98946111fc575b50501b915f199060031b1c19161790555b7ff3e9df557a77817375ddbb676dd4856f795b087c5aa2761c428d196445cba70884516060815261116360608201604090600681526554726164466960d01b60208201520190565b928482015242868201528033930390a26111d8602d82885198015197855198899166029b1b7b9329d160cd1b868401526111a68151809288602787019101611b2e565b820165010333937b6960d51b60278201526111c982518093888785019101611b2e565b0103600d81018952018761196d565b82519383859485528401604090600681526554726164466960d01b60208201520190565b015192505f8061110a565b50848a52868a209293929190601f1984168b5b81811061126c57509261042b98959285925f805160206124ff8339815191529b999661043a999610611254575b505050811b01905561111b565b01515f1960f88460031b161c191690555f8080611247565b8284015185559386019392890192890161121a565b858b52878b208380870160051c8201928a88106112bb575b0160051c019084905b8281106112b05750506110d8565b8c81550184906112a2565b92508192611299565b634e487b7160e01b8b526041905260248afd5b015190505f8061109e565b869291601f1983166015860183528c8320925b8d82821061133257505095836016971061131a575b505050811b0160158201556110b4565b01515f1960f88460031b161c191690555f808061130a565b8389015185558a969094019392830192016112f5565b601583018d52898d208580840160051c8201928c8510611387575b0160051c019086908e5b83821061137c57505050611087565b81550186908e61136d565b92508192611363565b634e487b7160e01b8c526041875260248cfd5b015190505f8061104d565b9190879450601f1984166014870184528c8420935b8d8282106113fc57505084116113e4575b505050811b016014820155611063565b01515f1960f88460031b161c191690555f80806113d4565b8385015186558a979095019493840193016113c3565b909150601484018d52898d208580850160051c8201928c861061145d575b859493910160051c9091019087908f5b83821061144f57505050611039565b81558594508891018f611440565b92508192611430565b015190505f80610ffe565b9190879450601f1984166013870184528c8420935b8d8282106114bf57505084116114a7575b505050811b016013820155611014565b01515f1960f88460031b161c191690555f8080611497565b8385015186558a97909501949384019301611486565b909150601384018d52898d208580850160051c8201928c8610611520575b859493910160051c9091019087908f5b83821061151257505050610fea565b81558594508891018f611503565b925081926114f3565b015190505f80610faf565b9190879450601f1984166012870184528c8420935b8d828210611582575050841161156a575b505050811b016012820155610fc5565b01515f1960f88460031b161c191690555f808061155a565b8385015186558a97909501949384019301611549565b909150601284018d52898d208580850160051c8201928c86106115e3575b859493910160051c9091019087908f5b8382106115d557505050610f9b565b81558594508891018f6115c6565b925081926115b6565b015190505f80610f62565b9190879450601f1984166008870184528c8420935b8d828210611645575050841161162d575b505050811b016008820155610f78565b01515f1960f88460031b161c191690555f808061161d565b8385015186558a9790950194938401930161160c565b909150600884018d52898d208580850160051c8201928c86106116a6575b859493910160051c9091019087908f5b83821061169857505050610f4e565b81558594508891018f611689565b92508192611679565b634e487b7160e01b8b526041865260248bfd5b610eee929195506116d2906118d4565b5f949091610ee3565b84513d5f823e3d90fd5b5f80fd5b9050346116e55760203660031901126116e5576001600160a01b0361170c611872565b165f52600160205281805f2080546001820154936002830154906003840154908401549260058501549060068601546007870154906008880161174e9061198f565b93600989015497600a8a015460ff1696600b8b0161176b90611a31565b9861177860128d01611a8a565b9b60170161178590611ae9565b9c519e8f9e8f916103409960ff8116151584528060081c60ff161515602085015260101c60ff1615159083015260608201526080015260a08d015260c08c015260e08b01526101008a01526101208901528061014089015287016117e891611b4f565b9261016087015215156101808601526101a0850161180591611b74565b83810361028085015261181791611bbd565b81516001600160a01b03166102a084015260208201516102c084015260408201516102e084015260608201516103008401526080909101516103208301520390f35b346116e5575f3660031901126116e55780602360209252f35b600435906001600160a01b03821682036116e557565b35906001600160a01b03821682036116e557565b90600182811c921680156118ca575b60208310146118b657565b634e487b7160e01b5f52602260045260245ffd5b91607f16916118ab565b67ffffffffffffffff81116118e857604052565b634e487b7160e01b5f52604160045260245ffd5b610200810190811067ffffffffffffffff8211176118e857604052565b60a0810190811067ffffffffffffffff8211176118e857604052565b60e0810190811067ffffffffffffffff8211176118e857604052565b6040810190811067ffffffffffffffff8211176118e857604052565b90601f8019910116810190811067ffffffffffffffff8211176118e857604052565b9060405191825f82546119a18161189c565b908184526020946001916001811690815f14611a0f57506001146119d1575b5050506119cf9250038361196d565b565b5f90815285812095935091905b8183106119f75750506119cf93508201015f80806119c0565b855488840185015294850194879450918301916119de565b925050506119cf94925060ff191682840152151560051b8201015f80806119c0565b90604051611a3e81611935565b82546001600160a01b0316815260018301546020820152600283015460408201526003830154606082015260048301546080820152600583015460a082015260069092015460c0830152565b90604051611a9781611919565b6080611ae460048395611aa98161198f565b8552611ab76001820161198f565b6020860152611ac86002820161198f565b6040860152611ad96003820161198f565b60608601520161198f565b910152565b90604051611af681611919565b82546001600160a01b031681526001830154602082015260028301546040820152600383015460608201526004909201546080830152565b5f5b838110611b3f5750505f910152565b8181015183820152602001611b30565b90602091611b6881518092818552858086019101611b2e565b601f01601f1916010190565b60c0809160018060a01b0381511684526020810151602085015260408101516040850152606081015160608501526080810151608085015260a081015160a08501520151910152565b611c26916080611c15611c03611bf1611bdf865160a0875260a0870190611b4f565b60208701518682036020880152611b4f565b60408601518582036040870152611b4f565b60608501518482036060860152611b4f565b920151906080818403910152611b4f565b90565b9181601f840112156116e55782359167ffffffffffffffff83116116e557602083818601950101116116e557565b60406003198201126116e55767ffffffffffffffff916004358381116116e55782611c8491600401611c29565b939093926024359182116116e557611c9e91600401611c29565b9091565b908060209392818452848401375f828201840152601f01601f1916010190565b9290611cdb90611c269593604086526040860191611ca2565b926020818503910152611ca2565b91908201809211611cf657565b634e487b7160e01b5f52601160045260245ffd5b15611d1157565b60405162461bcd60e51b815260206004820152601060248201526f082c6c6deeadce840dad2e6dac2e8c6d60831b6044820152606490fd5b60405190611d5682611919565b81608060609182815282602082015282604082015282808201520152565b67ffffffffffffffff81116118e857601f01601f191660200190565b81601f820112156116e557803590611da782611d74565b92611db5604051948561196d565b828452602083830101116116e557815f926020809301838601378301015290565b60405190611de382611935565b5f60c0838281528260208201528260408201528260608201528260808201528260a08201520152565b60405190611e1982611919565b5f6080838281528260208201528260408201528260608201520152565b81601f820112156116e5578051611e4c81611d74565b92611e5a604051948561196d565b818452602082840101116116e557611c269160208085019101611b2e565b90611e81611d49565b50611eac5f604093845180938192637fa408d960e01b83526020968760048501526024840191611ca2565b0381305afa5f9181611f83575b50611f7d5750671d995c9a599a595960c21b825192611ed784611919565b8051611ee281611951565b600381526203735360ec1b8482015284528051611efe81611951565b600d81526c1d1b1cdb8b5d995c9a599a5959609a1b84820152838501528051611f2681611951565b600a815269323032342d30312d313560b01b84820152818501528051611f4b81611951565b60078152663ab735b737bbb760c91b8482015260608501525191611f6e83611951565b60088352820152608082015290565b91505090565b9091503d805f833e611f95818361196d565b810183828203126116e557815167ffffffffffffffff928382116116e557019060a0828203126116e557855192611fcb84611919565b82518181116116e55782611fe0918501611e36565b8452858301518181116116e55782611ff9918501611e36565b86850152868301518181116116e55782612014918501611e36565b8785015260608301518181116116e55782612030918501611e36565b606085015260808301519081116116e55761204b9201611e36565b6080820152905f611eb9565b51905f915f5b81518110156120d1576120708183612374565b5160f81c6030811015806120c6575b61208d575b5060010161205d565b600a94919491828102928184041490151715611cf657602f190160ff91828211611cf6576001926120bf921690611ce9565b9390612084565b50603981111561207f565b505090610320811015612121576102ee81101561211b576102bc8110156121155761028a81101561210f57610258111561210a57601e90565b603290565b50604190565b50604b90565b50605590565b50605f90565b60018060a01b0380911690815f5260016020526040805f205f905f93815460ff81168061233b575b61231d575b60ff8160081c168061230a575b6122de575b60101c60ff16806122cb575b6122a3575b6007820180549095909381158061229857612284570480955b5542600983015584612231575b50600a0160ff8154867f2743c09acd09f346fca50195f8b4ebf3056ef088f466f98e2bcfc562277146c8606060238910159687968688168719871617905588519081528960208201528689820152a2161515036121fb575b50505050565b7f74e405d0b260e01bf8bb805b85863b0197c75af32ab8952941f349c81f67492c9282519182526020820152a25f8080806121f5565b5f5416803b156116e5575f809160448651809481936397ed81cf60e01b83523360048401528a60248401525af180156116db5790600a9291612275575b509061219d565b61227e906118d4565b5f61226e565b634e487b7160e01b5f52601260045260245ffd5b5050505f8095612190565b93916122c5906122bf60068401549161026c6004548094612361565b93611ce9565b93612177565b506122d9600383015461234e565b612172565b949261230260ff916122fc60058601549161026c6003548094612361565b95611ce9565b959050612166565b50612318600284015461234e565b612161565b945091506004810154916123346002548094612361565b9294612154565b50612349600184015461234e565b61214f565b62278d008101809111611cf65742111590565b81810292918115918404141715611cf657565b908151811015612385570160200190565b634e487b7160e01b5f52603260045260245ffd5b80156124555780815f925b61243e5750806123b383611d74565b926123c1604051948561196d565b808452601f196123d082611d74565b01366020860137915b6123e257505090565b5f198201918211611cf65781600a9182810492808402908482041484151715611cf6578103908111611cf65760ff809116603001908111611cf65760f81b6001600160f81b0319165f1a906124379085612374565b53806123d9565b915f198114611cf6576001600a91019204806123a4565b5060405161246281611951565b60018152600360fc1b602082015290565b670de0b6b3a7640000810460648110156124be57600a8110156124b757600111156124b15767016345785d8a000011156124ac57600a90565b600f90565b50601490565b5050601990565b5050601e90565b6103e88110156124f85760648110156124b157600a8110156124f257600111156124ed575f90565b600a90565b50600f90565b5060199056fe52fd0ce03bb9cae00f43ca137835ddd590733f99ab7866f37f67bd582d2c16dea2646970667358221220b646b43027be3cbfce737327427b438b88a32f9b0ab9e9682cd4a8300a0f47f064736f6c63430008180033",
+  "deployedBytecode": "0x6080604081815260049182361015610015575f80fd5b5f925f3560e01c9182630a49cf4d146118595750816345171f26146116e95781634f0ca97114610e695781635c9770c514610e255781636087c89f14610e065781636277f6c614610c84578163665a11ca14610c5c5781636b0ad6fe14610ab55783826374601a8e146107e0575081637fa408d9146106d35781638922f3e3146106b557816393e30a6a146106975781639de1b1ee146104e2578163b7161fac146104c6578163da4561e41461014157508063f25d4f33146101005763f511cab2146100df575f80fd5b346100fc57816003193601126100fc576020906002549051908152f35b5080fd5b50346100fc5760203660031901126100fc5760209160ff90600a9083906001600160a01b0361012d611872565b168152600186522001541690519015158152f35b919050346104c2578261015336611c57565b90936001600160a01b0393919290917f0000000000000000000000000000000000000000000000000000000000000000851691823b156104be5786928492838b6101b1898d5198899788968795634295e81760e01b87528601611cc2565b03925af180156104b45790859291610499575b505060e0916101d1611dd6565b5081010312610495578251906101e682611935565b6101ef83611888565b92838352602093848401968583013588528685019487840135865260608101906060850135825260808101926080860135845261024560a083019560a0880135875260c080850198013588528833911614611d0a565b60146102518951612473565b8101809111610482578b92916102728e9261026c86516124c5565b90611ce9565b907fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470865103610452575b509760118b98610406986031985f805160206124ff8339815191529f9d969861042b9f96988f9a61043a9f9b8b6103a89d6103a19d50606481115f146104495750600160649b5b33835252209761010061ff00198a54161789554260028a01558960058a0155600b89019151166bffffffffffffffffffffffff60a01b82541617905551600c8701558751600d87015551600e86015551600f850155516010840155519101557ff3e9df557a77817375ddbb676dd4856f795b087c5aa2761c428d196445cba70889516060815261038b6060820160409060078152661058d8dbdd5b9d60ca1b60208201520190565b9289820152428b8201528033930390a251612399565b9851612399565b9785519889916802130b630b731b29d160bd1b868401526103d28151809288602987019101611b2e565b8201670102737b731b29d160c51b60298201526103f782518093888785019101611b2e565b0103601181018952018761196d565b8251938385948552840160409060078152661058d8dbdd5b9d60ca1b60208201520190565b90838203908401523395611b4f565b0390a261044633612127565b80f35b6001909b6102e3565b9150919250600f820180921161046f57508a91908c90601161029c565b634e487b7160e01b8d526011905260248cfd5b634e487b7160e01b8d526011825260248dfd5b8480fd5b6104a49192506118d4565b6104b05782865f6101c4565b8580fd5b86513d84823e3d90fd5b8380fd5b8280fd5b5050346100fc57816003193601126100fc576020905160238152f35b8284346106945760203660031901126106945781906104ff611872565b610507611dd6565b50610510611d49565b50610519611e0c565b506001600160a01b03168152600160205220815192610690906101e09061065790610543876118fc565b60ff855481811615158952818160081c16151560208a015260101c161515868801526001850154606088015260028501546080880152600385015460a08801528401549360c08701948552600581015460e08801908152600682015490610100890191825260078301546101208a01526105bf6008840161198f565b61014090818b015261064c600985015498610160998a8d015260ff600a8701541615156101808d01526105f4600b8701611a31565b9b6101a081019c8d5261061d601761060e60128a01611a8a565b986101c08401998a5201611ae9565b988991015251925193519a519451948a519b8c9b8c966020610200988998815201528c015260608b0190611b74565b880152860190611bbd565b928401906080809160018060a01b0381511684526020810151602085015260408101516040850152606081015160608501520151910152565b0390f35b80fd5b5050346100fc57816003193601126100fc576020905162278d008152f35b9050346104c257826003193601126104c25760209250549051908152f35b919050346104c257602091826003193601126104be57803567ffffffffffffffff918282116104b05761070891369101611c29565b610713929192611d49565b5082019184818403126104b0578035908282116107dc570160a0818403126104b05783519561074187611919565b81358381116100fc5784610756918401611d90565b8752858201358381116100fc578461076f918401611d90565b86880152848201358381116100fc578461078a918401611d90565b8588015260608201358381116100fc57846107a6918401611d90565b606088015260808201359283116106945750916107c891610690949301611d90565b608085015251928284938452830190611bbd565b8680fd5b915091346100fc576107f136611c57565b929094919560018060a01b0396877f000000000000000000000000000000000000000000000000000000000000000016803b1561049557879385809461084b898b51988997889687956318e4a27760e21b87528601611cc2565b03925af18015610aab5790859291610a94575b505060a09161086b611e0c565b50810103126104be578080519261088184611919565b61088a81611888565b938481526020958682019287810135845284830196858201358852606084019060608301358252608085019260800135835283339116146108ca90611d0a565b805193338b5260018a52868b209362ff00001985541662010000178555426003860155856006860155601785019151166bffffffffffffffffffffffff60a01b825416179055845160188401558751601984015551601a8301555190601b0155825160608152606081016109539060409060078152664e657374696e6760c81b60208201520190565b9082888201524285820152803392037ff3e9df557a77817375ddbb676dd4856f795b087c5aa2761c428d196445cba70891a261098e90612399565b905161099990612399565b93516109a490612399565b82519485928784016d0243cb13934b21029b1b7b9329d160951b90528051908189602e87019201916109d592611b2e565b8301602e810167010142232a3349d160c51b90528151918289603684019201916109fe92611b2e565b0160368101680102a3930b223349d160bd1b90528151918288603f8401920191610a2792611b2e565b01603f8101602960f81b905203848101845201610a44908361196d565b80518181526007918101918252664e657374696e6760c81b602083015291829160400193828503908301523393610a7a91611b4f565b035f805160206124ff83398151915291a261044633612127565b610a9f9192506118d4565b6104955782855f61085e565b84513d84823e3d90fd5b919050346104c25760203660031901126104c25760c09281906001600160a01b03610ade611872565b168152600160205220815190610af3826118fc565b80549260ff841615158352602083019460ff8560081c161515865260ff8285019560101c1615158552600183015495606085019687526002840154956080860196875260038501549260a0870193845285015489870152600585015460e087015260068501546101008701526007850154916101208701928352610b796008870161198f565b6101408801526009860154966101608101978852610bcf601760ff600a8a0154169861018084019915158a52610bb1600b8201611a31565b6101a0850152610bc360128201611a8a565b6101c085015201611ae9565b6101e08201525115159889610c49575b505115159687610c36575b505115159182610c23575b50519251151593519482519615158752151560208701521515908501526060840152608083015260a0820152f35b610c2f9192505161234e565b905f610bf5565b610c429197505161234e565b955f610bea565b610c559199505161234e565b975f610bdf565b5050346100fc57816003193601126100fc57905490516001600160a01b039091168152602090f35b9050346104c25760603660031901126104c257825482516334cc866d60e21b815282359360443593909260243592602092916001600160a01b039081169184818581865afa8a9181610dca575b50610dc55750815b163314908115610dbb575b5015610d86576064610cff86610cfa868a611ce9565b611ce9565b03610d45576002869055600383905584905582519485528401528201527fb2f6c02fac42195bee702ac23b7ad51c3d4905613c1448c1cb9fb3496184d16d90606090a180f35b60649184519162461bcd60e51b8352820152601760248201527f57656967687473206d7573742073756d20746f203130300000000000000000006044820152fd5b60649184519162461bcd60e51b835282015260116024820152704f6e6c792044414f2f54696d656c6f636b60781b6044820152fd5b905033145f610ce4565b610cd9565b9091508581813d8311610dff575b610de2818361196d565b81010312610dfb57518281168103610dfb57905f610cd1565b8a80fd5b503d610dd8565b5050346100fc57816003193601126100fc576020906003549051908152f35b5050346100fc57816003193601126100fc57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b919050346116e557610e7a36611c57565b9290917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169190823b156116e55783925f928389610ed4898b519889978896879563247ccb9560e01b87528601611cc2565b03925af180156116db576116c2575b5090610eee91611e78565b91610ef883612057565b338552600191602092808452848720908060ff19835416178255428183015583838301558487015180519267ffffffffffffffff938481116116af5780610f42600884015461189c565b93601f9485811161165b575b5089908d8684116001146115f757926115ec575b50505f19600383901b1c191690841b1760088201555b8851805190858211611390578190610f93601285015461189c565b858111611598575b5089908d8684116001146115345792611529575b50505f19600383901b1c191690841b1760128201555b86890151805190858211611390578190610fe2601385015461189c565b8581116114d5575b5089908d8684116001146114715792611466575b50505f19600383901b1c191690841b1760138201555b87890151805190858211611390578190611031601485015461189c565b858111611412575b5089908d8684116001146113ae57926113a3575b50505f19600383901b1c191690841b1760148201555b60608901519081518581116113905761107f601583015461189c565b848111611348575b50888c8583116001146112e25790601694836112d7575b50505f19600383901b1c191690851b1760158201555b019360808901519081519485116112c457506110d0855461189c565b828111611281575b5089879285116001146112075793805f805160206124ff83398151915299979461043a9794829461042b9b98946111fc575b50501b915f199060031b1c19161790555b7ff3e9df557a77817375ddbb676dd4856f795b087c5aa2761c428d196445cba70884516060815261116360608201604090600681526554726164466960d01b60208201520190565b928482015242868201528033930390a26111d8602d82885198015197855198899166029b1b7b9329d160cd1b868401526111a68151809288602787019101611b2e565b820165010333937b6960d51b60278201526111c982518093888785019101611b2e565b0103600d81018952018761196d565b82519383859485528401604090600681526554726164466960d01b60208201520190565b015192505f8061110a565b50848a52868a209293929190601f1984168b5b81811061126c57509261042b98959285925f805160206124ff8339815191529b999661043a999610611254575b505050811b01905561111b565b01515f1960f88460031b161c191690555f8080611247565b8284015185559386019392890192890161121a565b858b52878b208380870160051c8201928a88106112bb575b0160051c019084905b8281106112b05750506110d8565b8c81550184906112a2565b92508192611299565b634e487b7160e01b8b526041905260248afd5b015190505f8061109e565b869291601f1983166015860183528c8320925b8d82821061133257505095836016971061131a575b505050811b0160158201556110b4565b01515f1960f88460031b161c191690555f808061130a565b8389015185558a969094019392830192016112f5565b601583018d52898d208580840160051c8201928c8510611387575b0160051c019086908e5b83821061137c57505050611087565b81550186908e61136d565b92508192611363565b634e487b7160e01b8c526041875260248cfd5b015190505f8061104d565b9190879450601f1984166014870184528c8420935b8d8282106113fc57505084116113e4575b505050811b016014820155611063565b01515f1960f88460031b161c191690555f80806113d4565b8385015186558a979095019493840193016113c3565b909150601484018d52898d208580850160051c8201928c861061145d575b859493910160051c9091019087908f5b83821061144f57505050611039565b81558594508891018f611440565b92508192611430565b015190505f80610ffe565b9190879450601f1984166013870184528c8420935b8d8282106114bf57505084116114a7575b505050811b016013820155611014565b01515f1960f88460031b161c191690555f8080611497565b8385015186558a97909501949384019301611486565b909150601384018d52898d208580850160051c8201928c8610611520575b859493910160051c9091019087908f5b83821061151257505050610fea565b81558594508891018f611503565b925081926114f3565b015190505f80610faf565b9190879450601f1984166012870184528c8420935b8d828210611582575050841161156a575b505050811b016012820155610fc5565b01515f1960f88460031b161c191690555f808061155a565b8385015186558a97909501949384019301611549565b909150601284018d52898d208580850160051c8201928c86106115e3575b859493910160051c9091019087908f5b8382106115d557505050610f9b565b81558594508891018f6115c6565b925081926115b6565b015190505f80610f62565b9190879450601f1984166008870184528c8420935b8d828210611645575050841161162d575b505050811b016008820155610f78565b01515f1960f88460031b161c191690555f808061161d565b8385015186558a9790950194938401930161160c565b909150600884018d52898d208580850160051c8201928c86106116a6575b859493910160051c9091019087908f5b83821061169857505050610f4e565b81558594508891018f611689565b92508192611679565b634e487b7160e01b8b526041865260248bfd5b610eee929195506116d2906118d4565b5f949091610ee3565b84513d5f823e3d90fd5b5f80fd5b9050346116e55760203660031901126116e5576001600160a01b0361170c611872565b165f52600160205281805f2080546001820154936002830154906003840154908401549260058501549060068601546007870154906008880161174e9061198f565b93600989015497600a8a015460ff1696600b8b0161176b90611a31565b9861177860128d01611a8a565b9b60170161178590611ae9565b9c519e8f9e8f916103409960ff8116151584528060081c60ff161515602085015260101c60ff1615159083015260608201526080015260a08d015260c08c015260e08b01526101008a01526101208901528061014089015287016117e891611b4f565b9261016087015215156101808601526101a0850161180591611b74565b83810361028085015261181791611bbd565b81516001600160a01b03166102a084015260208201516102c084015260408201516102e084015260608201516103008401526080909101516103208301520390f35b346116e5575f3660031901126116e55780602360209252f35b600435906001600160a01b03821682036116e557565b35906001600160a01b03821682036116e557565b90600182811c921680156118ca575b60208310146118b657565b634e487b7160e01b5f52602260045260245ffd5b91607f16916118ab565b67ffffffffffffffff81116118e857604052565b634e487b7160e01b5f52604160045260245ffd5b610200810190811067ffffffffffffffff8211176118e857604052565b60a0810190811067ffffffffffffffff8211176118e857604052565b60e0810190811067ffffffffffffffff8211176118e857604052565b6040810190811067ffffffffffffffff8211176118e857604052565b90601f8019910116810190811067ffffffffffffffff8211176118e857604052565b9060405191825f82546119a18161189c565b908184526020946001916001811690815f14611a0f57506001146119d1575b5050506119cf9250038361196d565b565b5f90815285812095935091905b8183106119f75750506119cf93508201015f80806119c0565b855488840185015294850194879450918301916119de565b925050506119cf94925060ff191682840152151560051b8201015f80806119c0565b90604051611a3e81611935565b82546001600160a01b0316815260018301546020820152600283015460408201526003830154606082015260048301546080820152600583015460a082015260069092015460c0830152565b90604051611a9781611919565b6080611ae460048395611aa98161198f565b8552611ab76001820161198f565b6020860152611ac86002820161198f565b6040860152611ad96003820161198f565b60608601520161198f565b910152565b90604051611af681611919565b82546001600160a01b031681526001830154602082015260028301546040820152600383015460608201526004909201546080830152565b5f5b838110611b3f5750505f910152565b8181015183820152602001611b30565b90602091611b6881518092818552858086019101611b2e565b601f01601f1916010190565b60c0809160018060a01b0381511684526020810151602085015260408101516040850152606081015160608501526080810151608085015260a081015160a08501520151910152565b611c26916080611c15611c03611bf1611bdf865160a0875260a0870190611b4f565b60208701518682036020880152611b4f565b60408601518582036040870152611b4f565b60608501518482036060860152611b4f565b920151906080818403910152611b4f565b90565b9181601f840112156116e55782359167ffffffffffffffff83116116e557602083818601950101116116e557565b60406003198201126116e55767ffffffffffffffff916004358381116116e55782611c8491600401611c29565b939093926024359182116116e557611c9e91600401611c29565b9091565b908060209392818452848401375f828201840152601f01601f1916010190565b9290611cdb90611c269593604086526040860191611ca2565b926020818503910152611ca2565b91908201809211611cf657565b634e487b7160e01b5f52601160045260245ffd5b15611d1157565b60405162461bcd60e51b815260206004820152601060248201526f082c6c6deeadce840dad2e6dac2e8c6d60831b6044820152606490fd5b60405190611d5682611919565b81608060609182815282602082015282604082015282808201520152565b67ffffffffffffffff81116118e857601f01601f191660200190565b81601f820112156116e557803590611da782611d74565b92611db5604051948561196d565b828452602083830101116116e557815f926020809301838601378301015290565b60405190611de382611935565b5f60c0838281528260208201528260408201528260608201528260808201528260a08201520152565b60405190611e1982611919565b5f6080838281528260208201528260408201528260608201520152565b81601f820112156116e5578051611e4c81611d74565b92611e5a604051948561196d565b818452602082840101116116e557611c269160208085019101611b2e565b90611e81611d49565b50611eac5f604093845180938192637fa408d960e01b83526020968760048501526024840191611ca2565b0381305afa5f9181611f83575b50611f7d5750671d995c9a599a595960c21b825192611ed784611919565b8051611ee281611951565b600381526203735360ec1b8482015284528051611efe81611951565b600d81526c1d1b1cdb8b5d995c9a599a5959609a1b84820152838501528051611f2681611951565b600a815269323032342d30312d313560b01b84820152818501528051611f4b81611951565b60078152663ab735b737bbb760c91b8482015260608501525191611f6e83611951565b60088352820152608082015290565b91505090565b9091503d805f833e611f95818361196d565b810183828203126116e557815167ffffffffffffffff928382116116e557019060a0828203126116e557855192611fcb84611919565b82518181116116e55782611fe0918501611e36565b8452858301518181116116e55782611ff9918501611e36565b86850152868301518181116116e55782612014918501611e36565b8785015260608301518181116116e55782612030918501611e36565b606085015260808301519081116116e55761204b9201611e36565b6080820152905f611eb9565b51905f915f5b81518110156120d1576120708183612374565b5160f81c6030811015806120c6575b61208d575b5060010161205d565b600a94919491828102928184041490151715611cf657602f190160ff91828211611cf6576001926120bf921690611ce9565b9390612084565b50603981111561207f565b505090610320811015612121576102ee81101561211b576102bc8110156121155761028a81101561210f57610258111561210a57601e90565b603290565b50604190565b50604b90565b50605590565b50605f90565b60018060a01b0380911690815f5260016020526040805f205f905f93815460ff81168061233b575b61231d575b60ff8160081c168061230a575b6122de575b60101c60ff16806122cb575b6122a3575b6007820180549095909381158061229857612284570480955b5542600983015584612231575b50600a0160ff8154867f2743c09acd09f346fca50195f8b4ebf3056ef088f466f98e2bcfc562277146c8606060238910159687968688168719871617905588519081528960208201528689820152a2161515036121fb575b50505050565b7f74e405d0b260e01bf8bb805b85863b0197c75af32ab8952941f349c81f67492c9282519182526020820152a25f8080806121f5565b5f5416803b156116e5575f809160448651809481936397ed81cf60e01b83523360048401528a60248401525af180156116db5790600a9291612275575b509061219d565b61227e906118d4565b5f61226e565b634e487b7160e01b5f52601260045260245ffd5b5050505f8095612190565b93916122c5906122bf60068401549161026c6004548094612361565b93611ce9565b93612177565b506122d9600383015461234e565b612172565b949261230260ff916122fc60058601549161026c6003548094612361565b95611ce9565b959050612166565b50612318600284015461234e565b612161565b945091506004810154916123346002548094612361565b9294612154565b50612349600184015461234e565b61214f565b62278d008101809111611cf65742111590565b81810292918115918404141715611cf657565b908151811015612385570160200190565b634e487b7160e01b5f52603260045260245ffd5b80156124555780815f925b61243e5750806123b383611d74565b926123c1604051948561196d565b808452601f196123d082611d74565b01366020860137915b6123e257505090565b5f198201918211611cf65781600a9182810492808402908482041484151715611cf6578103908111611cf65760ff809116603001908111611cf65760f81b6001600160f81b0319165f1a906124379085612374565b53806123d9565b915f198114611cf6576001600a91019204806123a4565b5060405161246281611951565b60018152600360fc1b602082015290565b670de0b6b3a7640000810460648110156124be57600a8110156124b757600111156124b15767016345785d8a000011156124ac57600a90565b600f90565b50601490565b5050601990565b5050601e90565b6103e88110156124f85760648110156124b157600a8110156124f257600111156124ed575f90565b600a90565b50600f90565b5060199056fe52fd0ce03bb9cae00f43ca137835ddd590733f99ab7866f37f67bd582d2c16dea2646970667358221220b646b43027be3cbfce737327427b438b88a32f9b0ab9e9682cd4a8300a0f47f064736f6c63430008180033",
   "linkReferences": {},
   "deployedLinkReferences": {}
 }
diff --git a/Lending (BC) + frontend/loan-management/frontend/src/abis/LendingManager.json b/Lending (BC) + frontend/loan-management/frontend/src/abis/LendingManager.json
index 9a8dbf9..3f0e74d 100644
--- a/Lending (BC) + frontend/loan-management/frontend/src/abis/LendingManager.json	
+++ b/Lending (BC) + frontend/loan-management/frontend/src/abis/LendingManager.json	
@@ -1659,8 +1659,8 @@
       "type": "receive"
     }
   ],
-  "bytecode": "0x608034620002135762004d64906001600160401b03601f38849003908101601f191683019082821184831017620001ff57808491604096879485528339810103126200021357620000508262000237565b6200005f602080940162000237565b60015f5560018060a01b03908160018060a01b0319931683600a541617600a551690600c541617600c556005600955670de12d4cc511c0009182600455620151804204600555620000d1620000b362000217565b678ac7230489e800008152670de13f20401b6000838201526200024c565b620000fd620000df62000217565b674563918244f400008152670de13607f1a8c000838201526200024c565b620001226200010b62000217565b670de0b6b3a764000094858252838201526200024c565b83519061018082019282841090841117620001ff575f93600b9386528483528183019085825286840190868252606085019081526080850187815260a0860188815260c087019189835260e08801938a85526101008901958b87526101208a01978c895260016101408c019a8e8c526101608d019e8f52335f52528d5f209a518b555160018b01555160028a015551600389015551600488015551600587015551600686015551600785015551600884015551600983015551600a820155019051151560ff8019835416911617905551614ac29081620002a28239f35b634e487b7160e01b5f52604160045260245ffd5b5f80fd5b60408051919082016001600160401b03811183821017620001ff57604052565b51906001600160a01b03821682036200021357565b60075468010000000000000000811015620001ff5760018101806007558110156200028d57602060019160075f52815f2090831b0192805184550151910155565b634e487b7160e01b5f52603260045260245ffdfe608080604052600436101561001c575b50361561001a575f80fd5b005b5f803560e01c918263071156871461356c575081630c196a741461354e57816314673d311461349c57816316c38b3c1461345a5781631876b415146133dd5781631a3f61cd1461334b5781631ea30fef1461332a57816321bf8985146132ed57816328fd10d7146132355781632cf58893146132095781632d6963ce146131c75781632ef55a0614612f9957816332aa9b6814612f76578163334bbd4d14612dee57816333ec339e14612cfa57816335981fd814612b2157816338e3ea1114612a805781633f4de62f14612a63578163480d1aee146129aa5781634c34a982146129875781634d56022f146128d957816352ace309146128b5578163537dd93a1461282957816355e87dbc146127ef5781635b12e7331461270d5781635c975abb146126eb578163665a11ca146126c35781636a2bb879146126435781636a7ebf4a146126295781636d7c218b1461260c578163709b8961146125ca5781637491687e1461241557816374f0314f146102f557816382ee21fc146123f85781638a2e98f31461238b57816394e95da31461236e578163962a0da5146123345781639ee679e8146121c9578163a1666b5414612104578163a6727ce7146120c9578163a7086ded14611ec1578163a74f099814611e87578163a8d9e5ba14611e4d578163ab19f09514611c71578163ade2854d14611c54578163b034012314611c2c578163b8bb5c4214611c0f578163b918ee2514611bf2578163bcebb1d7146115f7578163c0798fe41461133c578163c11feeb91461131f578163cca4391614611278578163d01cd45614610c71578163d33219b414610c49578163d704731014610c1c578163dc1df57214610ad9578163e03ff7cb1461085e578163e11932cf1461083b578163e2c41dbc146104a1578163e2d746281461042d578163e50649d114610370578163f6e180f51461034e578163f79ed94b14610326578163fccf6a1e146102fa575063feedab00146102f5575f61000f565b6136e4565b346103235760203660031901126103235760406020916004358152600683522054604051908152f35b80fd5b34610323578060031936011261032357600b546040516001600160a01b039091168152602090f35b3461032357806003193601126103235760206103686142ac565b604051908152f35b610379366136b6565b92915060018060a01b0361039281600a54163314613bf6565b848415801561039f575080f35b81808781936103b082341015613c2e565b86600b5416908390610424575bf115610419577f66aecc579aa1ef463c0ed1547c2cb6163370e6311a60cba815252acbb398f2139260a0926040519586526060602087015260046060870152636c61746560e01b608087015260408601521692a2818080808480f35b6040513d86823e3d90fd5b506108fc6103bd565b34610323576020366003190112610323576104466135a4565b600c546001600160a01b0391908216330361048f5716801561047d576bffffffffffffffffffffffff60a01b600854161760085580f35b60405163d92e233d60e01b8152600490fd5b6040516359f8b11760e11b8152600490fd5b806003193601126103235760ff600f541661080457662386f26fc100008034106107f257600a54604051633af7305960e21b81523360048201526020926001600160a01b039290919084908290602490829087165afa9081156107e75785916107ae575b5015610769573384526001835268056bc75e2d6310000061052a60408620543461398f565b116107195733845260018352604084206003810180546106e257670de0b6b3a7640000905542600182015542600282015542600a820155600b8101600160ff1982541617905561057933613ffa565b61058233614631565b61058d34825461398f565b81556009810161059e34825461398f565b9055600a429101556105b23460035461398f565b600355838080803486600a54165af16105c961399c565b50156106ac5734049060085416801515806106a3575b610614575b50507f543ba50a5eec5e6178218e364b1d0f396157b3c8fa278522c2cb7fd99407d474604051913483523392a280f35b803b1561069f576040516340c10f1960e01b81523360048201526024810183905290849081908390604490829084905af1918261068b575b5050610685576040519081527f5c0b206f3618d350db41c606c827006e7e9a725fea435a1cd618f657f81ea352823392a25b82806105e4565b5061067e565b61069490613778565b61069f57838561064c565b8380fd5b508115156105df565b60405162461bcd60e51b815260048101849052600e60248201526d11195c1bdcda5d0819985a5b195960921b6044820152606490fd5b50600b8101805460ff81161580610710575b610700575b5050610579565b60ff1916600117905585806106f9565b508254156106f4565b60405162461bcd60e51b815260048101849052602260248201527f4465706f73697420776f756c6420657863656564206d6178696d756d206c696d6044820152611a5d60f21b6064820152608490fd5b60405162461bcd60e51b815260048101849052601d60248201527f4372656469742073636f726520726571756972656420746f206c656e640000006044820152606490fd5b90508381813d83116107e0575b6107c581836137a8565b810103126107dc576107d6906137ca565b85610505565b8480fd5b503d6107bb565b6040513d87823e3d90fd5b60405163162908e360e11b8152600490fd5b60405162461bcd60e51b815260206004820152600f60248201526e10dbdb9d1c9858dd081c185d5cd959608a1b6044820152606490fd5b346103235760203660031901126103235760206103686108596135a4565b61413d565b346103235780600319360112610323576108766145dd565b3381526020600181526040822090600b82019061089660ff835416613bb3565b6005830191825415610a9c576108ab33614631565b82549385936001820154620151808101809111610a88579087914210610a3b575b6108e06108d9878961398f565b8454613732565b83556108f76108ef878961398f565b600354613732565b6003555554156109ee575b50838060018060a01b03600a5416604051828582019163e19fb8f560e01b8352886024820152602481526109358161378c565b51925af161094161399c565b50156109aa5783808480156109a0575b8280929181923390f115610995576040519283528201527ffbc3a599b784fe88772fc5abcc07223f64ca0b13acc341f4fb1e46bef0510eb460403392a26001815580f35b6040513d85823e3d90fd5b6108fc9150610951565b6064906040519062461bcd60e51b82526004820152601760248201527f4661696c656420746f20657874726163742066756e64730000000000000000006044820152fd5b805460ff19169055604051610a028161375c565b600181528181019082368337805115610a2757610a21913390526147a1565b84610902565b634e487b7160e01b5f52603260045260245ffd5b959450610a576064610a4f60095488613701565b048096613732565b956040518681527fb6a45448c8250adf8d836e047d46f96410d632c7089720e3aed88fcb76644ded863392a26108cc565b634e487b7160e01b88526011600452602488fd5b60405162461bcd60e51b8152600481018390526015602482015274139bc81c195b991a5b99c81dda5d1a191c985dd85b605a1b6044820152606490fd5b34610323578060031936011261032357600c546001600160a01b039081163303610be757600254610b098161410b565b918391845b818110610b6857505081610b20578380f35b610b298261410b565b92845b838110610b475750505050610b40906147a1565b8180808380f35b8083610b556001938561403d565b5116610b61828861403d565b5201610b2c565b82610b7282613634565b90549060031b1c16808752600190816020526040882060ff600b82015416159081610bdd575b50610ba8575b5050600101610b0e565b610bb686889793949761403d565b525f198114610bc9570192600187610b9e565b634e487b7160e01b87526011600452602487fd5b9050541589610b98565b60405162461bcd60e51b815260206004820152600d60248201526c4f6e6c792074696d656c6f636b60981b6044820152606490fd5b34610323576020366003190112610323576020610c3f610c3a6135a4565b614051565b6040519015158152f35b34610323578060031936011261032357600c546040516001600160a01b039091168152602090f35b3461032357606036600319011261032357610c8a6135a4565b610c926135ba565b90610c9b6135d0565b610ca583836137d7565b15611240576040516339a37a4360e11b81526001600160a01b038281166004830181905294602494919260209284169083818881855afa9081156111c3578991611207575b50156111ce5760405163b69e5c7760e01b8152938216600485018190529483858881855afa9485156111c3578995611194575b506040516378e2eb6160e11b81526004810189905284818981865afa908115611189578a9161115c575b506040516356512fcd60e11b8152600481018a90529085828a81875afa918215610fd8578b9261112d575b5081156110fb5780156110b757604051630ef7fb6760e01b81528681600481885afa9081156110ac578c9161107f575b506064018060641161106c57610db89088613701565b91670de0b6b3a76400009283810293818504149015171561106c5790610ddd91613701565b9081156110185790610dee91613714565b60405163e7602b9d60e01b81526001600160a01b038381166004830152851660248201529097908581604481875afa908115610fd8578b91610feb575b50808911610fe3575b5060405163200a4deb60e21b81528581600481875afa908115610fd8578b91610fa7575b508810610f6c575090889291813b1561069f576040516001622b512560e01b031981526001600160a01b039182166004820152908316602482015233604482015260648101889052838160848183865af1908115610419578491610f58575b5050803b15610f54576040516378974cbb60e01b81526001600160a01b039290921660048301526024820185905282908290604490829084905af18015610f4957610f31575b50506040519384528301527f61a26dafe158573397cb85ec41fab65aa51d01855779276c8eb8c6915f7c577e60403393a480f35b610f3a90613778565b610f45578587610efd565b8580fd5b6040513d84823e3d90fd5b8280fd5b610f6190613778565b610f5457828a610eb7565b8460156064926040519262461bcd60e51b84526004840152820152742132b637bb9036b4b7103634b8bab4b230ba34b7b760591b6044820152fd5b90508581813d8311610fd1575b610fbe81836137a8565b81010312610fcd57518b610e58565b5f80fd5b503d610fb4565b6040513d8d823e3d90fd5b97508a610e34565b90508581813d8311611011575b61100281836137a8565b81010312610fcd57518b610e2b565b503d610ff8565b60405162461bcd60e51b8152600481018790526027818b01527f4469766973696f6e206279207a65726f20696e207061727469616c206c69717560448201526634b230ba34b7b760c91b6064820152608490fd5b634e487b7160e01b8c526011600452898cfd5b90508681813d83116110a5575b61109681836137a8565b81010312610fcd57518c610da2565b503d61108c565b6040513d8e823e3d90fd5b60405162461bcd60e51b8152600481018790526018818b01527f436f6c6c61746572616c207072696365206973207a65726f00000000000000006044820152606490fd5b60405162461bcd60e51b815260048101879052600b818b01526a131515881b9bdd081cd95d60aa1b6044820152606490fd5b9091508581813d8311611155575b61114581836137a8565b81010312610fcd5751908b610d72565b503d61113b565b90508481813d8311611182575b61117381836137a8565b81010312610fcd57518a610d47565b503d611169565b6040513d8c823e3d90fd5b9094508381813d83116111bc575b6111ac81836137a8565b81010312610fcd57519389610d1d565b503d6111a2565b6040513d8b823e3d90fd5b60405162461bcd60e51b81526004810184905260128188015271125b9d985b1a590818dbdb1b185d195c985b60721b6044820152606490fd5b90508381813d8311611239575b61121e81836137a8565b810103126112355761122f906137ca565b89610cea565b8880fd5b503d611214565b60405162461bcd60e51b815260206004820152601060248201526f506f736974696f6e206865616c74687960801b6044820152606490fd5b34610323578060031936011261032357338152600160205260408120600581019081549182156112da578391826006925501556040519081527f2eed97477f07c07ec48f8f678f4e84f7c0de55bf33f51c3dc989b1335308031960203392a280f35b60405162461bcd60e51b815260206004820152601f60248201527f4e6f2070656e64696e67207769746864726177616c20746f2063616e63656c006044820152606490fd5b346103235780600319360112610323576020600254604051908152f35b34610323576020908160031936011261032357600a546001600160a01b0391908216611369811515613fb6565b604051624b476b60e91b81528481600481855afa9081156109955783916115ca575b5060405163b8cdf56160e01b81528581600481865afa90811561041957849161159d575b50604051635e1ead1f60e11b8152908682600481875afa9081156107e757859161156c575b6113de9250613732565b811561156457670de0b6b3a764000090818102918183041490151715611550579061140891613714565b6040516379fed8ad60e11b8152908582600481865afa91821561041957908692918592611515575b506024906040519687938492634fd41dad60e11b84526004840152165afa928315610f495790849183946114e3575b50604051635467a5a960e11b81529190829060049082905afa9182156114d757916114a2575b5061149990670de0b6b3a764000092613701565b04604051908152f35b90508281813d83116114d0575b6114b981836137a8565b81010312610fcd5751670de0b6b3a7640000611485565b503d6114af565b604051903d90823e3d90fd5b8281939295503d831161150e575b6114fb81836137a8565b81010312610fcd5751918390600461145f565b503d6114f1565b8092508391933d8311611549575b61152d81836137a8565b8101031261069f579060246115428793613c92565b9190611430565b503d611523565b634e487b7160e01b84526011600452602484fd5b505081611408565b90508682813d8311611596575b61158381836137a8565b81010312610fcd576113de9151906113d4565b503d611579565b90508581813d83116115c3575b6115b481836137a8565b81010312610fcd5751866113af565b503d6115aa565b90508481813d83116115f0575b6115e181836137a8565b81010312610fcd57518561138b565b503d6115d7565b34610323576040366003190112610323576116106135a4565b906116196135ba565b60405163042e02cf60e01b81526001600160a01b0382811660048301819052946024946020949093918316929185818881875afa9081156107e7578591611bbd575b5015611b6e5760405163c23c69d560e01b81526004810188905285818881875afa9081156107e7578591611b41575b506040516360d143f160e11b8152908682600481885afa908115611b36578691611b05575b6116b9925061398f565b4210611ac85760405163cf17622560e01b8152908482600481875afa9182156107e7578592611a29575b50845b82518110156117b857836116fa828561403d565b51604051637781200d60e11b81529116600482015287818a81895afa9081156117ad578791611774575b5015611732576001016116e6565b606488886040519162461bcd60e51b83528160048401528201527f4f7261636c65206369726375697420627265616b6572207472696767657265646044820152fd5b90508781813d83116117a6575b61178b81836137a8565b810103126117a25761179c906137ca565b8a611724565b8680fd5b503d611781565b6040513d89823e3d90fd5b5094939684604051809863b69e5c7760e01b825283600483015281875afa968715611a1e5788976119ef575b50604051639b8621d560e01b81528581600481885afa9081156111c35789916119c1575b50606461181861181f928a613701565b048861398f565b9088805b8451811015611932576118708661183a838861403d565b5160405163e7602b9d60e01b815291166001600160a01b0381811660048401528c16602483015290918a90839081906044820190565b03818c5afa918215610419578492611900575b5081611894575b5050600101611823565b883b1561069f576040516001622b512560e01b031981526001600160a01b039182166004820152908b16602482015233604482015260648101919091528281608481838c5af19081156109955783911561188a576118f190613778565b6118fc57818c61188a565b5080fd5b935090508883813d811161192b575b61191981836137a8565b81010312610fcd578b9251908d611883565b503d61190f565b5094935095915095823b1561069f576040516378974cbb60e01b81526001600160a01b0392909216600483015260248201529082908290604490829084905af18015610f49576119ad575b50507f1175522017e08c2f400d7e516608eff60816ee9e8319158d174321234b602631906040519384523393a380f35b6119b690613778565b61069f57838561197d565b90508581813d83116119e8575b6119d881836137a8565b81010312610fcd57516064611808565b503d6119ce565b9096508481813d8311611a17575b611a0781836137a8565b81010312610fcd575195886117e4565b503d6119fd565b6040513d8a823e3d90fd5b9091503d8086833e611a3b81836137a8565b8101908681830312610f455780519067ffffffffffffffff82116117a257019080601f83011215610f45578151611a7181613c7a565b92611a7f60405194856137a8565b818452888085019260051b820101928311611ac45788809101915b838310611aac575050505090886116e3565b8190611ab784613c92565b8152019101908890611a9a565b8780fd5b60405162461bcd60e51b8152600481018690526016818801527511dc9858d9481c195c9a5bd9081b9bdd08195b99195960521b6044820152606490fd5b90508682813d8311611b2f575b611b1c81836137a8565b81010312610fcd576116b99151906116af565b503d611b12565b6040513d88823e3d90fd5b90508581813d8311611b67575b611b5881836137a8565b81010312610fcd57518861168a565b503d611b4e565b60405162461bcd60e51b8152600481018690526022818801527f4163636f756e74206e6f74206d61726b656420666f72206c697175696461746960448201526137b760f11b6064820152608490fd5b90508581813d8311611beb575b611bd481836137a8565b810103126107dc57611be5906137ca565b8861165b565b503d611bca565b346103235780600319360112610323576020600954604051908152f35b346103235780600319360112610323576020600d54604051908152f35b346103235780600319360112610323576008546040516001600160a01b039091168152602090f35b346103235780600319360112610323576020600754604051908152f35b3461032357602036600319011261032357611c8a6135a4565b6001600160a01b0381168252600160205260408083209051919280611cae8461373f565b8254938481526001840154928360208301526002850154604083015260038501549460608301958652600481015492836080820152600582015460a0820152600682015460c082015261016060ff600b60078501549460e0850195865260088101546101008601526009810154610120860152600a8101546101408601520154161515910152620151808501809511611e395751948615908115611d7d575b505050611d5b60c096614991565b91604051958652602086015260408501526060840152608083015260a0820152f35b9091979350611d8e815115156139db565b611d966144fd565b90670de0b6b3a7640000918289029389850484141715611e2557828102928184041490151715611e11576ec097ce7bc90715b34b9f1000000000611ded611d5b94611de760c09c958c955190613714565b90613701565b0481811115611e0957611e009250613732565b925b9688611d4d565b505092611e02565b634e487b7160e01b89526011600452602489fd5b634e487b7160e01b8a52601160045260248afd5b634e487b7160e01b82526011600452602482fd5b3461032357806003193601126103235760206040517fbc37299a3f6cccd6c755dd8bfdf2500dcaabe80313ae76769173dd12db1d5fd98152f35b3461032357806003193601126103235760206040517f358559da74e98365ce10a27dc62f2c5b6fa4992108fa51890f8203b09b80f2628152f35b3461032357611ecf36613669565b600c80546001600160a01b039392908416330361048f57801561209057845b818110611ef9578580f35b611f0c611f0782848761395b565b61396b565b908582161561205c578582168752600160205260408720546120245761201e600192604051611f3a8161373f565b898152896020820152896040820152670de0b6b3a764000060608201528960808201528960a08201528960c08201528960e0820152896101008201528961012082015289610140820152896101608201528882168a5284602052610160600b60408c208351815560208401518882015560408401516002820155606084015160038201556080840151600482015560a0840151600582015560c0840151600682015560e0840151600782015561010084015160088201556101208401516009820155610140840151600a82015501910151151560ff80198354169116179055613ffa565b01611eee565b60405162461bcd60e51b815260206004820152601060248201526f20b63932b0b23c9030903632b73232b960811b6044820152606490fd5b60405162461bcd60e51b815260206004820152602481018590526b5a65726f206164647265737360a01b6044820152606490fd5b60405162461bcd60e51b8152602060048201526011602482015270115b5c1d1e481b195b99195c881b1a5cdd607a1b6044820152606490fd5b34610323576020366003190112610323576120e26135a4565b50600a546120fa906001600160a01b03161515613fb6565b6020610368613ca6565b3461032357806003193601126103235760405180916002549081835260208093018092600283527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90835b8181106121ac57505050846121659103856137a8565b60405193838594850191818652518092526040850193925b82811061218c57505050500390f35b83516001600160a01b03168552869550938101939281019260010161217d565b82546001600160a01b03168452928601926001928301920161214f565b34610323576020806003193601126118fc5760043590338352600181526121f960ff600b60408620015416613b78565b3383526001815261221360ff600b60408620015416613bb3565b3383526001815260408320600881018054916201518092838101809111610bc95742106122ef57805485116122b357600381018054156122a3575b5061225833614631565b846005820155600642910155429055420190814211611550576040519283528201527f24b91f4f47caf44230a57777a9be744924e82bf666f2d5702faf97df35e60f9f60403392a280f35b6122ab6144fd565b90558661224e565b60405162461bcd60e51b8152600481018590526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606490fd5b60405162461bcd60e51b815260048101859052601d60248201527f4d757374207761697420666f7220636f6f6c646f776e20706572696f640000006044820152606490fd5b3461032357806003193601126103235760206040517f96737339a958f216173e690d06f324072e6dc3146e04c060bd723906d6b190768152f35b346103235780600319360112610323576020600554604051908152f35b3461032357602036600319011261032357600c54600435906001600160a01b0316330361048f57606481116123c05760095580f35b60405162461bcd60e51b815260206004820152601060248201526f0a0cadcc2d8e8f240e8dede40d0d2ced60831b6044820152606490fd5b346103235780600319360112610323576020600454604051908152f35b346103235760203660031901126103235761242e6135a4565b6001600160a01b031681526001602052604080822090519082906124518361373f565b80548352600181015492836020820152600282015460408201526003820154916060820192835260048101546080830152600581015460a0830152600681015460c083015260ff600b60078301549260e0850193845260088101546101008601526009810154610120860152600a81015461014086015201541615156101608301526201518091828601809611610bc95785421092835f146125c35760646124fd835160095490613701565b04925b51806125a45750804201804211611e11575b61251b4261397f565b81111561259857504201804211610a885760a09750935b8151612558575b5050604051948552602085015215604084015260608301526080820152f35b6125909295508061256e612588925115156139db565b6125806125796144fd565b8451613701565b905190613714565b905190613732565b928680612539565b905060a0975093612532565b8181018091111561251257634e487b7160e01b89526011600452602489fd5b8792612500565b346103235760203660031901126103235760209060ff90600b906040906001600160a01b036125f76135a4565b16815260018552200154166040519015158152f35b346103235780600319360112610323576020600354604051908152f35b346103235780600319360112610323576020610368613ca6565b346103235761265136613669565b600c546001600160a01b0392908316330361048f5761266f82613c7a565b9261267d60405194856137a8565b828452602092602085019060051b8301923684116117a257905b8382106126ab57866126a8876147a1565b80f35b81358381168103610fcd578152908401908401612697565b34610323578060031936011261032357600a546040516001600160a01b039091168152602090f35b34610323578060031936011261032357602060ff600f54166040519015158152f35b346103235761271b36613669565b9061272960328311156138d6565b612734821515613917565b825b82811061276c57837f9765ab3445c5a4a779f6eeaae39ac242850ea470c65f6dda83fbb8cffc7812a4602085604051908152a180f35b6001906001600160a01b0380612786611f0784888861395b565b1686528260208181526040882054151592836127c6575b5050506127ab575b01612736565b6127c16127bc611f0783878761395b565b614631565b6127a5565b909192506127d8611f0785898961395b565b1687525260ff600b6040872001541686808061279d565b3461032357806003193601126103235760206040517faacf4d9ce41c3977f13dda8d61dce041128ea08757d4cc0dab99105ca55f6d208152f35b346103235760203660031901126103235760043560075481101561287b576128526040916135fc565b50602082516128608161375c565b60018354938483520154918291015282519182526020820152f35b60405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c840e8d2cae440d2dcc8caf60731b6044820152606490fd5b34610323576020366003190112610323576128ce6135a4565b506020610368613ca6565b34610323576128e7366135e6565b600c546001600160a01b0316330361048f5761271080831115908161297c575b501561294857816040917f1ad8b45a83c0b03428f4eb1fc49e5e9e4ee40bea305c8dfde416980ea7d90c9893600d5580600e5582519182526020820152a180f35b60405162461bcd60e51b815260206004820152600c60248201526b08ccaca40e8dede40d0d2ced60a31b6044820152606490fd5b905081111584612907565b34610323578060031936011261032357602060405168056bc75e2d631000008152f35b6129b3366136b6565b92915060018060a01b036129cc81600a54163314613bf6565b84841580156129d9575080f35b81808781936129ea82341015613c2e565b86600b5416908390612a5a575bf115610419577f66aecc579aa1ef463c0ed1547c2cb6163370e6311a60cba815252acbb398f2139260a09260405195865260606020870152600b60608701526a37b934b3b4b730ba34b7b760a91b608087015260408601521692a2818080808480f35b506108fc6129f7565b346103235780600319360112610323576020600e54604051908152f35b34610fcd5760a0366003190112610fcd57612a996135a4565b612aa16135ba565b612aa96135d0565b91608435916003831015610fcd576001600160a01b0391821690813b15610fcd575f60849281958560405198899788966376e674df60e01b8852166004870152166024850152606435604485015260648401525af18015612b1657612b0c575080f35b61001a9150613778565b6040513d5f823e3d90fd5b34610fcd575f366003190112610fcd57612b396145dd565b335f52602060018152612b5560ff600b60405f20015416613b78565b335f5260018152612b6f60ff600b60405f20015416613bb3565b335f526001815260405f20805415612cc057600490612b8d33614631565b01908154918215612c84575f9055612ba782600354613732565b6003555f8060018060a01b03600a5416604051828582019163e19fb8f560e01b835287602482015260248152612bdc8161378c565b51925af1612be861399c565b5015612c2c575f808080853382f115612b16577ff9984c8173c4b4ff9cc454f76ed19c053f4490ccb224fd9ddffeb4ef4bea3530906040519283523392a260015f55005b6084906040519062461bcd60e51b82526004820152602b60248201527f4661696c656420746f20657874726163742066756e64732066726f6d206c697160448201526a1d5a591a5d1e481c1bdbdb60aa1b6064820152fd5b60405162461bcd60e51b81526004810183905260146024820152734e6f20696e74657265737420746f20636c61696d60601b6044820152606490fd5b60405162461bcd60e51b8152600481018390526012602482015271139bc8199d5b991cc819195c1bdcda5d195960721b6044820152606490fd5b34610fcd576060366003190112610fcd57600c546024359060443590600435906001600160a01b0316330361048f57670de0b6b3a76400008210612db5576007548110612d93575060405191612d4f8361375c565b8252602082015260075490600160401b821015612d7f57612d7982600161001a94016007556135fc565b90613b4f565b634e487b7160e01b5f52604160045260245ffd5b612d799061001a939260405193612da98561375c565b845260208401526135fc565b60405162461bcd60e51b815260206004820152601160248201527052617465206d757374206265203e3d203160781b6044820152606490fd5b34610fcd576020366003190112610fcd57612e076135a4565b5f610160604051612e178161373f565b8281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e0820152826101008201528261012082015282610140820152015260018060a01b03165f52600160205261018060405f20610160604051612e808161373f565b60ff600b84549485845260018101546020850152600281015460408501526003810154606085015260048101546080850152600581015460a0850152600681015460c0850152600781015460e085015260088101546101008501526009810154610120850152600a8101546101408501520154161515828201526040519283526020810151602084015260408101516040840152606081015160608401526080810151608084015260a081015160a084015260c081015160c084015260e081015160e084015261010081015161010084015261012081015161012084015261014081015161014084015201511515610160820152f35b34610fcd576020366003190112610fcd576020610368612f946135a4565b613a27565b34610fcd57612fa736613669565b90612fb560148311156138d6565b612fc0821515613917565b5f905f5b83811061309a57505080612fd457005b5f8060018060a01b03600a541660405182602082019163e19fb8f560e01b8352866024820152602481526130078161378c565b51925af161301361399c565b501561304b577f3d6423b78eecbf9e43153ccd5a4ad162e04ca046dca21adc4a009a10fc3570f49160409182519182526020820152a1005b60405162461bcd60e51b815260206004820152602160248201527f4661696c656420746f20657874726163742066756e64732066726f6d20706f6f6044820152601b60fa1b6064820152608490fd5b6001600160a01b03806130b1611f0784888761395b565b165f5260206001815260405f20916005830190815491821594851580613198575b6130e5575b505050505050600101612fc4565b92809496959891848280959654906130fc91613732565b905560038281549061310d91613732565b90555f905561311b9161398f565b9682613128868b8a61395b565b6131319061396b565b16905f80938493849392849361318f575bf115612b16576001937f1a39b9c5044b9f0ff56c5951e30c1ebe24911353aafcceb9250e83a24fe158c49161317b611f07868b8a61395b565b1692604051908152a29085808080806130d7565b506108fc613142565b5060068101546201518081018091116131b3574210156130d2565b634e487b7160e01b5f52601160045260245ffd5b34610fcd576020366003190112610fcd57600435600254811015610fcd576131f0602091613634565b905460405160039290921b1c6001600160a01b03168152f35b34610fcd576040366003190112610fcd576020610c3f6132276135a4565b61322f6135ba565b906137d7565b34610fcd576020366003190112610fcd576001600160a01b036132566135a4565b165f52600160205261018060405f20805490600181015490600281015460038201546004830154600584015460068501549060078601549260088701549460098801549660ff600b600a8b01549a015416996040519b8c5260208c015260408b015260608a0152608089015260a088015260c087015260e08601526101008501526101208401526101408301521515610160820152f35b34610fcd576020366003190112610fcd57600435600754811015610fcd576133166040916135fc565b506001815491015482519182526020820152f35b34610fcd575f366003190112610fcd576020604051662386f26fc100008152f35b34610fcd576020366003190112610fcd57600c54600435906001600160a01b0316330361048f57670de0b6b3a7640000811015806133cb575b1561339757600455620151804204600555005b60405162461bcd60e51b815260206004820152600c60248201526b496e76616c6964207261746560a01b6044820152606490fd5b50670df27a2cdf448000811115613384565b34610fcd576133eb366135e6565b6133f36144fd565b90811561344a575b81905f906004545b818310613428576020610368876134238861341e8984613701565b613714565b613732565b909192670de0b6b3a764000061344083600193613701565b0493019190613403565b670de0b6b3a764000091506133fb565b34610fcd576020366003190112610fcd57600435801515809103610fcd57600c546001600160a01b0316330361048f5760ff8019600f5416911617600f555f80f35b34610fcd576020366003190112610fcd576134b56135a4565b600c546001600160a01b0391908216330361048f5716801561350957600b80546001600160a01b031916821790557f279ea638680bba6a87fddd8bcdbc37d94eee92841e1dfec2ab0f79662c7093115f80a2005b60405162461bcd60e51b815260206004820152601760248201527f496e76616c6964207265736572766520616464726573730000000000000000006044820152606490fd5b34610fcd576020366003190112610fcd5760206103686004356144a9565b34610fcd575f366003190112610fcd57807f30d714d36be891ba5851837992c580dee4624dc21d19d9fecbcabfcb0e7ce28060209252f35b600435906001600160a01b0382168203610fcd57565b602435906001600160a01b0382168203610fcd57565b604435906001600160a01b0382168203610fcd57565b6040906003190112610fcd576004359060243590565b600754811015610a275760075f5260011b7fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801905f90565b600254811015610a275760025f527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace01905f90565b906020600319830112610fcd5760043567ffffffffffffffff92838211610fcd5780602383011215610fcd578160040135938411610fcd5760248460051b83010111610fcd576024019190565b6080906003190112610fcd576004356001600160a01b0381168103610fcd5790602435906044359060643590565b34610fcd575f366003190112610fcd576020604051620151808152f35b818102929181159184041417156131b357565b811561371e570490565b634e487b7160e01b5f52601260045260245ffd5b919082039182116131b357565b610180810190811067ffffffffffffffff821117612d7f57604052565b6040810190811067ffffffffffffffff821117612d7f57604052565b67ffffffffffffffff8111612d7f57604052565b6060810190811067ffffffffffffffff821117612d7f57604052565b90601f8019910116810190811067ffffffffffffffff821117612d7f57604052565b51908115158203610fcd57565b6040805163239ad4ef60e21b81526001600160a01b0393841660048201819052939192909116908281602481855afa9081156138cc575f91613897575b50159283613823575b50505090565b829350602460209293518094819363b69e5c7760e01b835260048301525afa91821561388e57505f9161385c575b5015155f808061381d565b90506020813d602011613886575b81613877602093836137a8565b81010312610fcd57515f613851565b3d915061386a565b513d5f823e3d90fd5b90508281813d83116138c5575b6138ae81836137a8565b81010312610fcd576138bf906137ca565b5f613814565b503d6138a4565b83513d5f823e3d90fd5b156138dd57565b60405162461bcd60e51b8152602060048201526012602482015271546f6f206d616e792061646472657373657360701b6044820152606490fd5b1561391e57565b60405162461bcd60e51b8152602060048201526015602482015274139bc81859191c995cdcd95cc81c1c9bdd9a591959605a1b6044820152606490fd5b9190811015610a275760051b0190565b356001600160a01b0381168103610fcd5790565b906202a30082018092116131b357565b919082018092116131b357565b3d156139d6573d9067ffffffffffffffff8211612d7f57604051916139cb601f8201601f1916602001846137a8565b82523d5f602084013e565b606090565b156139e257565b60405162461bcd60e51b815260206004820152601e60248201527f696e746572657374496e646578206d757374206e6f74206265207a65726f00006044820152606490fd5b60018060a01b03165f52600160205260405f2060405190613a478261373f565b8054808352600182015460208401526002820154604084015260038201549060ff600b606086019484865260048101546080880152600581015460a0880152600681015460c0880152600781015460e088015260088101546101008801526009810154610120880152600a810154610140880152015416151561016085015215613b4857613ad69015156139db565b613ade6144fd565b8251670de0b6b3a764000091828202918083048414901517156131b3578281029281840414901517156131b357611de7613b2a926ec097ce7bc90715b34b9f1000000000945190613714565b0490518082115f14613b4257613b3f91613732565b90565b50505f90565b5050505f90565b9190613b65576020816001925184550151910155565b634e487b7160e01b5f525f60045260245ffd5b15613b7f57565b60405162461bcd60e51b815260206004820152600c60248201526b2737ba1030903632b73232b960a11b6044820152606490fd5b15613bba57565b60405162461bcd60e51b81526020600482015260146024820152732737ba1030b71030b1ba34bb32903632b73232b960611b6044820152606490fd5b15613bfd57565b60405162461bcd60e51b815260206004820152600960248201526813db9b1e481c1bdbdb60ba1b6044820152606490fd5b15613c3557565b60405162461bcd60e51b815260206004820152601860248201527f496e73756666696369656e7420666565207061796d656e7400000000000000006044820152606490fd5b67ffffffffffffffff8111612d7f5760051b60200190565b51906001600160a01b0382168203610fcd57565b600354600a546040805163b8cdf56160e01b81526004926001600160a01b039160209183169082818781855afa908115613fac575f91613f7f575b508451635e1ead1f60e11b81529083828881865afa908115613f75575f91613f44575b613d0e9250613732565b958015613f3957670de0b6b3a76400009687810290808204891490151715613f265790613d3a91613714565b8451906379fed8ad60e11b9485835284838981875afa928315613eb6575f93613eef575b50848260248a848b519788948593634fd41dad60e11b8552840152165afa928315613eb6575f93613ec0575b50865195865284868981875afa958615613eb6575f96613e75575b50849291604491885197889485936301508d4560e51b85528c8501526024840152165afa928315613e6b575f93613e3c575b508190845195868092635467a5a960e11b82525afa92831561388e57505f92613e0a575b50613e069250613701565b0490565b90915082813d8311613e35575b613e2181836137a8565b81010312610fcd57613e069151905f613dfb565b503d613e17565b9092508181813d8311613e64575b613e5481836137a8565b81010312610fcd57519181613dd7565b503d613e4a565b84513d5f823e3d90fd5b9095508481819493943d8311613eaf575b613e9081836137a8565b81010312610fcd578492613ea5604492613c92565b9691509192613da5565b503d613e86565b87513d5f823e3d90fd5b9092508481813d8311613ee8575b613ed881836137a8565b81010312610fcd5751915f613d8a565b503d613ece565b9092508481813d8311613f1f575b613f0781836137a8565b81010312610fcd57613f1890613c92565b915f613d5e565b503d613efd565b601187634e487b7160e01b5f525260245ffd5b505050505090505490565b90508382813d8311613f6e575b613f5b81836137a8565b81010312610fcd57613d0e915190613d04565b503d613f51565b86513d5f823e3d90fd5b90508281813d8311613fa5575b613f9681836137a8565b81010312610fcd57515f613ce1565b503d613f8c565b85513d5f823e3d90fd5b15613fbd57565b60405162461bcd60e51b8152602060048201526015602482015274131a5c5d5a591a5d1e541bdbdb081b9bdd081cd95d605a1b6044820152606490fd5b60025490600160401b821015612d7f5761401d82600161403b9401600255613634565b90919060018060a01b038084549260031b9316831b921b1916179055565b565b8051821015610a275760209160051b010190565b60018060a01b03165f52600160205260405f206040516140708161373f565b81548152600182015460208201526002820154604082015260038201546060820152600482015460808201526005820154908160a082015261016060ff600b6006860154958660c0860152600781015460e086015260088101546101008601526009810154610120860152600a810154610140860152015416151591015215614106576201518081018091116131b35742101590565b505f90565b9061411582613c7a565b61412260405191826137a8565b8281528092614133601f1991613c7a565b0190602036910137565b60018060a01b03165f5260018060205260405f20906040519161415f8361373f565b805492838152600182015460208201526002820154936040820194855260038301549060ff600b606085019584875260048101546080870152600581015460a0870152600681015460c0870152600781015460e087015260088101546101008701526009810154610120870152600a8101546101408701520154161515610160840152156142a3576141f29015156139db565b6141fa6144fd565b91815191670de0b6b3a764000092838102908082048514901517156131b357838502918583048514861517156131b3576ec097ce7bc90715b34b9f100000000061425461425d93611de76142659662015180985190613714565b04905190613732565b955142613732565b049182614274575b5050505090565b9291905f935b828510614287575061426d565b9091928261429783839798613701565b0495019392919061427a565b50505050505f90565b60035480156144a257600a546040805163b8cdf56160e01b8152909260209290916001600160a01b039182169160049185818481875afa908115613eb6575f91614475575b508651635e1ead1f60e11b81529086828581885afa90811561446b575f9161443a575b61431e9250613732565b92831561442f57670de0b6b3a76400008402670de0b6b3a763ffff198582040161441c57839161434f878993613714565b5088516379fed8ad60e11b815292839182905afa908115613eb6579087949392915f916143dd575b50906044929185519687958694634dc8336560e11b86528501526024840152165afa92831561388e575f936143ac5750505090565b9080929350813d83116143d6575b6143c481836137a8565b81010312610fcd5701515f808061381d565b503d6143ba565b8093929550878092503d8311614415575b6143f881836137a8565b81010312610fcd57869361440d604493613c92565b909192614377565b503d6143ee565b601184634e487b7160e01b5f525260245ffd5b505093505050505490565b90508682813d8311614464575b61445181836137a8565b81010312610fcd5761431e915190614314565b503d614447565b88513d5f823e3d90fd5b90508581813d831161449b575b61448c81836137a8565b81010312610fcd57515f6142f1565b503d614482565b5060045490565b90600754805b6144bb57506004549150565b5f1981018181116131b3576144cf816135fc565b50548410156144e8575080156131b3575f1901806144af565b60019293506144f791506135fc565b50015490565b600354156145d157614516600554620151804204613732565b61451e6142ac565b670de0b6b3a764000080821061459457821561458e57919080925f915b838310614549575050505090565b90919293826145588383613701565b0490811061456c579392600101919061453b565b50505050507812725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f2190565b50905090565b60405162461bcd60e51b8152602060048201526015602482015274496e76616c696420696e746572657374207261746560581b6044820152606490fd5b670de0b6b3a764000090565b60025f54146145ec5760025f55565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b6001600160a01b03165f81815260016020526040902080549091811561479c576003830190815415614787576146656144fd565b928315614780576146768482613701565b6146868261342386548094613714565b5080851161469b575b50505055600242910155565b670de0b6b3a76400008083029083820481036131b35780870290878204036131b3576146df8492611de76146e5956ec097ce7bc90715b34b9f100000000094613714565b04613732565b90811561468f578161472b7fa8994c180af00cca393507749e1d830601910f8fd81f94fdcaf6dadb646cf5a19360409360048a0161472483825461398f565b905561398f565b87556147398160035461398f565b600355426007880155837f65724bab62e2b372c625ed834016c4e1750f8074aad18b22844457f35ea61d7360208451848152a28151908152856020820152a25f808061468f565b5050505050565b50670de0b6b3a7640000915055600242910155565b505050565b80511561495657905f915b8051831015614951576001600160a01b0392836147c9828461403d565b5116805f52600194602090868252604091825f2091600b9260ff8482015416159081614947575b50614809575b50505050506001919293500191906147ac565b5f895b61484c575b50505050506001929394507f5d9d7e5f1ada1bcc5ddf7a5a4c417d004a64912af537c40f78badbf16754847b5f80a28392915f8080806147f6565b6002805480831015614940579083918861486585613634565b949054600395861b1c161461487f5750505089018961480c565b5f9c95949293979a9b9c19978882019182116131b35761401d846148a56148b294613634565b905490881b1c1691613634565b805496871561492c5760019a5f988996879586948a9301906148d382613634565b90918254918b1b1b1916905585558b84525281209581875586015584015582015582600482015582600582015582600682015582600782015582600882015582600982015582600a82015501558493925f808080614811565b634e487b7160e01b5f52603160045260245ffd5b5050614811565b905054155f6147f0565b509050565b60405162461bcd60e51b81526020600482015260136024820152724e6f206c656e6465727320746f20636865636b60681b6044820152606490fd5b60018060a01b03165f52600160205260405f206040516149b08161373f565b81549081815260018301546020820152600283015460408201526003830154606082015260048301546080820152600583015460a0820152600683015460c082015261016060ff600b6007860154958660e086015260088101546101008601526009810154610120860152600a8101546101408601520154161515910152156141065780614a6a57506201518042018042116131b3575b614a504261397f565b8111614a595790565b506201518042018042116131b35790565b62015180810180911115614a4757634e487b7160e01b5f52601160045260245ffdfea2646970667358221220b3d489fff18c7dffd7e4d55d76c0e534a125798a6ef0e0be0160c3f0d6c4228164736f6c63430008180033",
-  "deployedBytecode": "0x608080604052600436101561001c575b50361561001a575f80fd5b005b5f803560e01c918263071156871461356c575081630c196a741461354e57816314673d311461349c57816316c38b3c1461345a5781631876b415146133dd5781631a3f61cd1461334b5781631ea30fef1461332a57816321bf8985146132ed57816328fd10d7146132355781632cf58893146132095781632d6963ce146131c75781632ef55a0614612f9957816332aa9b6814612f76578163334bbd4d14612dee57816333ec339e14612cfa57816335981fd814612b2157816338e3ea1114612a805781633f4de62f14612a63578163480d1aee146129aa5781634c34a982146129875781634d56022f146128d957816352ace309146128b5578163537dd93a1461282957816355e87dbc146127ef5781635b12e7331461270d5781635c975abb146126eb578163665a11ca146126c35781636a2bb879146126435781636a7ebf4a146126295781636d7c218b1461260c578163709b8961146125ca5781637491687e1461241557816374f0314f146102f557816382ee21fc146123f85781638a2e98f31461238b57816394e95da31461236e578163962a0da5146123345781639ee679e8146121c9578163a1666b5414612104578163a6727ce7146120c9578163a7086ded14611ec1578163a74f099814611e87578163a8d9e5ba14611e4d578163ab19f09514611c71578163ade2854d14611c54578163b034012314611c2c578163b8bb5c4214611c0f578163b918ee2514611bf2578163bcebb1d7146115f7578163c0798fe41461133c578163c11feeb91461131f578163cca4391614611278578163d01cd45614610c71578163d33219b414610c49578163d704731014610c1c578163dc1df57214610ad9578163e03ff7cb1461085e578163e11932cf1461083b578163e2c41dbc146104a1578163e2d746281461042d578163e50649d114610370578163f6e180f51461034e578163f79ed94b14610326578163fccf6a1e146102fa575063feedab00146102f5575f61000f565b6136e4565b346103235760203660031901126103235760406020916004358152600683522054604051908152f35b80fd5b34610323578060031936011261032357600b546040516001600160a01b039091168152602090f35b3461032357806003193601126103235760206103686142ac565b604051908152f35b610379366136b6565b92915060018060a01b0361039281600a54163314613bf6565b848415801561039f575080f35b81808781936103b082341015613c2e565b86600b5416908390610424575bf115610419577f66aecc579aa1ef463c0ed1547c2cb6163370e6311a60cba815252acbb398f2139260a0926040519586526060602087015260046060870152636c61746560e01b608087015260408601521692a2818080808480f35b6040513d86823e3d90fd5b506108fc6103bd565b34610323576020366003190112610323576104466135a4565b600c546001600160a01b0391908216330361048f5716801561047d576bffffffffffffffffffffffff60a01b600854161760085580f35b60405163d92e233d60e01b8152600490fd5b6040516359f8b11760e11b8152600490fd5b806003193601126103235760ff600f541661080457662386f26fc100008034106107f257600a54604051633af7305960e21b81523360048201526020926001600160a01b039290919084908290602490829087165afa9081156107e75785916107ae575b5015610769573384526001835268056bc75e2d6310000061052a60408620543461398f565b116107195733845260018352604084206003810180546106e257670de0b6b3a7640000905542600182015542600282015542600a820155600b8101600160ff1982541617905561057933613ffa565b61058233614631565b61058d34825461398f565b81556009810161059e34825461398f565b9055600a429101556105b23460035461398f565b600355838080803486600a54165af16105c961399c565b50156106ac5734049060085416801515806106a3575b610614575b50507f543ba50a5eec5e6178218e364b1d0f396157b3c8fa278522c2cb7fd99407d474604051913483523392a280f35b803b1561069f576040516340c10f1960e01b81523360048201526024810183905290849081908390604490829084905af1918261068b575b5050610685576040519081527f5c0b206f3618d350db41c606c827006e7e9a725fea435a1cd618f657f81ea352823392a25b82806105e4565b5061067e565b61069490613778565b61069f57838561064c565b8380fd5b508115156105df565b60405162461bcd60e51b815260048101849052600e60248201526d11195c1bdcda5d0819985a5b195960921b6044820152606490fd5b50600b8101805460ff81161580610710575b610700575b5050610579565b60ff1916600117905585806106f9565b508254156106f4565b60405162461bcd60e51b815260048101849052602260248201527f4465706f73697420776f756c6420657863656564206d6178696d756d206c696d6044820152611a5d60f21b6064820152608490fd5b60405162461bcd60e51b815260048101849052601d60248201527f4372656469742073636f726520726571756972656420746f206c656e640000006044820152606490fd5b90508381813d83116107e0575b6107c581836137a8565b810103126107dc576107d6906137ca565b85610505565b8480fd5b503d6107bb565b6040513d87823e3d90fd5b60405163162908e360e11b8152600490fd5b60405162461bcd60e51b815260206004820152600f60248201526e10dbdb9d1c9858dd081c185d5cd959608a1b6044820152606490fd5b346103235760203660031901126103235760206103686108596135a4565b61413d565b346103235780600319360112610323576108766145dd565b3381526020600181526040822090600b82019061089660ff835416613bb3565b6005830191825415610a9c576108ab33614631565b82549385936001820154620151808101809111610a88579087914210610a3b575b6108e06108d9878961398f565b8454613732565b83556108f76108ef878961398f565b600354613732565b6003555554156109ee575b50838060018060a01b03600a5416604051828582019163e19fb8f560e01b8352886024820152602481526109358161378c565b51925af161094161399c565b50156109aa5783808480156109a0575b8280929181923390f115610995576040519283528201527ffbc3a599b784fe88772fc5abcc07223f64ca0b13acc341f4fb1e46bef0510eb460403392a26001815580f35b6040513d85823e3d90fd5b6108fc9150610951565b6064906040519062461bcd60e51b82526004820152601760248201527f4661696c656420746f20657874726163742066756e64730000000000000000006044820152fd5b805460ff19169055604051610a028161375c565b600181528181019082368337805115610a2757610a21913390526147a1565b84610902565b634e487b7160e01b5f52603260045260245ffd5b959450610a576064610a4f60095488613701565b048096613732565b956040518681527fb6a45448c8250adf8d836e047d46f96410d632c7089720e3aed88fcb76644ded863392a26108cc565b634e487b7160e01b88526011600452602488fd5b60405162461bcd60e51b8152600481018390526015602482015274139bc81c195b991a5b99c81dda5d1a191c985dd85b605a1b6044820152606490fd5b34610323578060031936011261032357600c546001600160a01b039081163303610be757600254610b098161410b565b918391845b818110610b6857505081610b20578380f35b610b298261410b565b92845b838110610b475750505050610b40906147a1565b8180808380f35b8083610b556001938561403d565b5116610b61828861403d565b5201610b2c565b82610b7282613634565b90549060031b1c16808752600190816020526040882060ff600b82015416159081610bdd575b50610ba8575b5050600101610b0e565b610bb686889793949761403d565b525f198114610bc9570192600187610b9e565b634e487b7160e01b87526011600452602487fd5b9050541589610b98565b60405162461bcd60e51b815260206004820152600d60248201526c4f6e6c792074696d656c6f636b60981b6044820152606490fd5b34610323576020366003190112610323576020610c3f610c3a6135a4565b614051565b6040519015158152f35b34610323578060031936011261032357600c546040516001600160a01b039091168152602090f35b3461032357606036600319011261032357610c8a6135a4565b610c926135ba565b90610c9b6135d0565b610ca583836137d7565b15611240576040516339a37a4360e11b81526001600160a01b038281166004830181905294602494919260209284169083818881855afa9081156111c3578991611207575b50156111ce5760405163b69e5c7760e01b8152938216600485018190529483858881855afa9485156111c3578995611194575b506040516378e2eb6160e11b81526004810189905284818981865afa908115611189578a9161115c575b506040516356512fcd60e11b8152600481018a90529085828a81875afa918215610fd8578b9261112d575b5081156110fb5780156110b757604051630ef7fb6760e01b81528681600481885afa9081156110ac578c9161107f575b506064018060641161106c57610db89088613701565b91670de0b6b3a76400009283810293818504149015171561106c5790610ddd91613701565b9081156110185790610dee91613714565b60405163e7602b9d60e01b81526001600160a01b038381166004830152851660248201529097908581604481875afa908115610fd8578b91610feb575b50808911610fe3575b5060405163200a4deb60e21b81528581600481875afa908115610fd8578b91610fa7575b508810610f6c575090889291813b1561069f576040516001622b512560e01b031981526001600160a01b039182166004820152908316602482015233604482015260648101889052838160848183865af1908115610419578491610f58575b5050803b15610f54576040516378974cbb60e01b81526001600160a01b039290921660048301526024820185905282908290604490829084905af18015610f4957610f31575b50506040519384528301527f61a26dafe158573397cb85ec41fab65aa51d01855779276c8eb8c6915f7c577e60403393a480f35b610f3a90613778565b610f45578587610efd565b8580fd5b6040513d84823e3d90fd5b8280fd5b610f6190613778565b610f5457828a610eb7565b8460156064926040519262461bcd60e51b84526004840152820152742132b637bb9036b4b7103634b8bab4b230ba34b7b760591b6044820152fd5b90508581813d8311610fd1575b610fbe81836137a8565b81010312610fcd57518b610e58565b5f80fd5b503d610fb4565b6040513d8d823e3d90fd5b97508a610e34565b90508581813d8311611011575b61100281836137a8565b81010312610fcd57518b610e2b565b503d610ff8565b60405162461bcd60e51b8152600481018790526027818b01527f4469766973696f6e206279207a65726f20696e207061727469616c206c69717560448201526634b230ba34b7b760c91b6064820152608490fd5b634e487b7160e01b8c526011600452898cfd5b90508681813d83116110a5575b61109681836137a8565b81010312610fcd57518c610da2565b503d61108c565b6040513d8e823e3d90fd5b60405162461bcd60e51b8152600481018790526018818b01527f436f6c6c61746572616c207072696365206973207a65726f00000000000000006044820152606490fd5b60405162461bcd60e51b815260048101879052600b818b01526a131515881b9bdd081cd95d60aa1b6044820152606490fd5b9091508581813d8311611155575b61114581836137a8565b81010312610fcd5751908b610d72565b503d61113b565b90508481813d8311611182575b61117381836137a8565b81010312610fcd57518a610d47565b503d611169565b6040513d8c823e3d90fd5b9094508381813d83116111bc575b6111ac81836137a8565b81010312610fcd57519389610d1d565b503d6111a2565b6040513d8b823e3d90fd5b60405162461bcd60e51b81526004810184905260128188015271125b9d985b1a590818dbdb1b185d195c985b60721b6044820152606490fd5b90508381813d8311611239575b61121e81836137a8565b810103126112355761122f906137ca565b89610cea565b8880fd5b503d611214565b60405162461bcd60e51b815260206004820152601060248201526f506f736974696f6e206865616c74687960801b6044820152606490fd5b34610323578060031936011261032357338152600160205260408120600581019081549182156112da578391826006925501556040519081527f2eed97477f07c07ec48f8f678f4e84f7c0de55bf33f51c3dc989b1335308031960203392a280f35b60405162461bcd60e51b815260206004820152601f60248201527f4e6f2070656e64696e67207769746864726177616c20746f2063616e63656c006044820152606490fd5b346103235780600319360112610323576020600254604051908152f35b34610323576020908160031936011261032357600a546001600160a01b0391908216611369811515613fb6565b604051624b476b60e91b81528481600481855afa9081156109955783916115ca575b5060405163b8cdf56160e01b81528581600481865afa90811561041957849161159d575b50604051635e1ead1f60e11b8152908682600481875afa9081156107e757859161156c575b6113de9250613732565b811561156457670de0b6b3a764000090818102918183041490151715611550579061140891613714565b6040516379fed8ad60e11b8152908582600481865afa91821561041957908692918592611515575b506024906040519687938492634fd41dad60e11b84526004840152165afa928315610f495790849183946114e3575b50604051635467a5a960e11b81529190829060049082905afa9182156114d757916114a2575b5061149990670de0b6b3a764000092613701565b04604051908152f35b90508281813d83116114d0575b6114b981836137a8565b81010312610fcd5751670de0b6b3a7640000611485565b503d6114af565b604051903d90823e3d90fd5b8281939295503d831161150e575b6114fb81836137a8565b81010312610fcd5751918390600461145f565b503d6114f1565b8092508391933d8311611549575b61152d81836137a8565b8101031261069f579060246115428793613c92565b9190611430565b503d611523565b634e487b7160e01b84526011600452602484fd5b505081611408565b90508682813d8311611596575b61158381836137a8565b81010312610fcd576113de9151906113d4565b503d611579565b90508581813d83116115c3575b6115b481836137a8565b81010312610fcd5751866113af565b503d6115aa565b90508481813d83116115f0575b6115e181836137a8565b81010312610fcd57518561138b565b503d6115d7565b34610323576040366003190112610323576116106135a4565b906116196135ba565b60405163042e02cf60e01b81526001600160a01b0382811660048301819052946024946020949093918316929185818881875afa9081156107e7578591611bbd575b5015611b6e5760405163c23c69d560e01b81526004810188905285818881875afa9081156107e7578591611b41575b506040516360d143f160e11b8152908682600481885afa908115611b36578691611b05575b6116b9925061398f565b4210611ac85760405163cf17622560e01b8152908482600481875afa9182156107e7578592611a29575b50845b82518110156117b857836116fa828561403d565b51604051637781200d60e11b81529116600482015287818a81895afa9081156117ad578791611774575b5015611732576001016116e6565b606488886040519162461bcd60e51b83528160048401528201527f4f7261636c65206369726375697420627265616b6572207472696767657265646044820152fd5b90508781813d83116117a6575b61178b81836137a8565b810103126117a25761179c906137ca565b8a611724565b8680fd5b503d611781565b6040513d89823e3d90fd5b5094939684604051809863b69e5c7760e01b825283600483015281875afa968715611a1e5788976119ef575b50604051639b8621d560e01b81528581600481885afa9081156111c35789916119c1575b50606461181861181f928a613701565b048861398f565b9088805b8451811015611932576118708661183a838861403d565b5160405163e7602b9d60e01b815291166001600160a01b0381811660048401528c16602483015290918a90839081906044820190565b03818c5afa918215610419578492611900575b5081611894575b5050600101611823565b883b1561069f576040516001622b512560e01b031981526001600160a01b039182166004820152908b16602482015233604482015260648101919091528281608481838c5af19081156109955783911561188a576118f190613778565b6118fc57818c61188a565b5080fd5b935090508883813d811161192b575b61191981836137a8565b81010312610fcd578b9251908d611883565b503d61190f565b5094935095915095823b1561069f576040516378974cbb60e01b81526001600160a01b0392909216600483015260248201529082908290604490829084905af18015610f49576119ad575b50507f1175522017e08c2f400d7e516608eff60816ee9e8319158d174321234b602631906040519384523393a380f35b6119b690613778565b61069f57838561197d565b90508581813d83116119e8575b6119d881836137a8565b81010312610fcd57516064611808565b503d6119ce565b9096508481813d8311611a17575b611a0781836137a8565b81010312610fcd575195886117e4565b503d6119fd565b6040513d8a823e3d90fd5b9091503d8086833e611a3b81836137a8565b8101908681830312610f455780519067ffffffffffffffff82116117a257019080601f83011215610f45578151611a7181613c7a565b92611a7f60405194856137a8565b818452888085019260051b820101928311611ac45788809101915b838310611aac575050505090886116e3565b8190611ab784613c92565b8152019101908890611a9a565b8780fd5b60405162461bcd60e51b8152600481018690526016818801527511dc9858d9481c195c9a5bd9081b9bdd08195b99195960521b6044820152606490fd5b90508682813d8311611b2f575b611b1c81836137a8565b81010312610fcd576116b99151906116af565b503d611b12565b6040513d88823e3d90fd5b90508581813d8311611b67575b611b5881836137a8565b81010312610fcd57518861168a565b503d611b4e565b60405162461bcd60e51b8152600481018690526022818801527f4163636f756e74206e6f74206d61726b656420666f72206c697175696461746960448201526137b760f11b6064820152608490fd5b90508581813d8311611beb575b611bd481836137a8565b810103126107dc57611be5906137ca565b8861165b565b503d611bca565b346103235780600319360112610323576020600954604051908152f35b346103235780600319360112610323576020600d54604051908152f35b346103235780600319360112610323576008546040516001600160a01b039091168152602090f35b346103235780600319360112610323576020600754604051908152f35b3461032357602036600319011261032357611c8a6135a4565b6001600160a01b0381168252600160205260408083209051919280611cae8461373f565b8254938481526001840154928360208301526002850154604083015260038501549460608301958652600481015492836080820152600582015460a0820152600682015460c082015261016060ff600b60078501549460e0850195865260088101546101008601526009810154610120860152600a8101546101408601520154161515910152620151808501809511611e395751948615908115611d7d575b505050611d5b60c096614991565b91604051958652602086015260408501526060840152608083015260a0820152f35b9091979350611d8e815115156139db565b611d966144fd565b90670de0b6b3a7640000918289029389850484141715611e2557828102928184041490151715611e11576ec097ce7bc90715b34b9f1000000000611ded611d5b94611de760c09c958c955190613714565b90613701565b0481811115611e0957611e009250613732565b925b9688611d4d565b505092611e02565b634e487b7160e01b89526011600452602489fd5b634e487b7160e01b8a52601160045260248afd5b634e487b7160e01b82526011600452602482fd5b3461032357806003193601126103235760206040517fbc37299a3f6cccd6c755dd8bfdf2500dcaabe80313ae76769173dd12db1d5fd98152f35b3461032357806003193601126103235760206040517f358559da74e98365ce10a27dc62f2c5b6fa4992108fa51890f8203b09b80f2628152f35b3461032357611ecf36613669565b600c80546001600160a01b039392908416330361048f57801561209057845b818110611ef9578580f35b611f0c611f0782848761395b565b61396b565b908582161561205c578582168752600160205260408720546120245761201e600192604051611f3a8161373f565b898152896020820152896040820152670de0b6b3a764000060608201528960808201528960a08201528960c08201528960e0820152896101008201528961012082015289610140820152896101608201528882168a5284602052610160600b60408c208351815560208401518882015560408401516002820155606084015160038201556080840151600482015560a0840151600582015560c0840151600682015560e0840151600782015561010084015160088201556101208401516009820155610140840151600a82015501910151151560ff80198354169116179055613ffa565b01611eee565b60405162461bcd60e51b815260206004820152601060248201526f20b63932b0b23c9030903632b73232b960811b6044820152606490fd5b60405162461bcd60e51b815260206004820152602481018590526b5a65726f206164647265737360a01b6044820152606490fd5b60405162461bcd60e51b8152602060048201526011602482015270115b5c1d1e481b195b99195c881b1a5cdd607a1b6044820152606490fd5b34610323576020366003190112610323576120e26135a4565b50600a546120fa906001600160a01b03161515613fb6565b6020610368613ca6565b3461032357806003193601126103235760405180916002549081835260208093018092600283527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90835b8181106121ac57505050846121659103856137a8565b60405193838594850191818652518092526040850193925b82811061218c57505050500390f35b83516001600160a01b03168552869550938101939281019260010161217d565b82546001600160a01b03168452928601926001928301920161214f565b34610323576020806003193601126118fc5760043590338352600181526121f960ff600b60408620015416613b78565b3383526001815261221360ff600b60408620015416613bb3565b3383526001815260408320600881018054916201518092838101809111610bc95742106122ef57805485116122b357600381018054156122a3575b5061225833614631565b846005820155600642910155429055420190814211611550576040519283528201527f24b91f4f47caf44230a57777a9be744924e82bf666f2d5702faf97df35e60f9f60403392a280f35b6122ab6144fd565b90558661224e565b60405162461bcd60e51b8152600481018590526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606490fd5b60405162461bcd60e51b815260048101859052601d60248201527f4d757374207761697420666f7220636f6f6c646f776e20706572696f640000006044820152606490fd5b3461032357806003193601126103235760206040517f96737339a958f216173e690d06f324072e6dc3146e04c060bd723906d6b190768152f35b346103235780600319360112610323576020600554604051908152f35b3461032357602036600319011261032357600c54600435906001600160a01b0316330361048f57606481116123c05760095580f35b60405162461bcd60e51b815260206004820152601060248201526f0a0cadcc2d8e8f240e8dede40d0d2ced60831b6044820152606490fd5b346103235780600319360112610323576020600454604051908152f35b346103235760203660031901126103235761242e6135a4565b6001600160a01b031681526001602052604080822090519082906124518361373f565b80548352600181015492836020820152600282015460408201526003820154916060820192835260048101546080830152600581015460a0830152600681015460c083015260ff600b60078301549260e0850193845260088101546101008601526009810154610120860152600a81015461014086015201541615156101608301526201518091828601809611610bc95785421092835f146125c35760646124fd835160095490613701565b04925b51806125a45750804201804211611e11575b61251b4261397f565b81111561259857504201804211610a885760a09750935b8151612558575b5050604051948552602085015215604084015260608301526080820152f35b6125909295508061256e612588925115156139db565b6125806125796144fd565b8451613701565b905190613714565b905190613732565b928680612539565b905060a0975093612532565b8181018091111561251257634e487b7160e01b89526011600452602489fd5b8792612500565b346103235760203660031901126103235760209060ff90600b906040906001600160a01b036125f76135a4565b16815260018552200154166040519015158152f35b346103235780600319360112610323576020600354604051908152f35b346103235780600319360112610323576020610368613ca6565b346103235761265136613669565b600c546001600160a01b0392908316330361048f5761266f82613c7a565b9261267d60405194856137a8565b828452602092602085019060051b8301923684116117a257905b8382106126ab57866126a8876147a1565b80f35b81358381168103610fcd578152908401908401612697565b34610323578060031936011261032357600a546040516001600160a01b039091168152602090f35b34610323578060031936011261032357602060ff600f54166040519015158152f35b346103235761271b36613669565b9061272960328311156138d6565b612734821515613917565b825b82811061276c57837f9765ab3445c5a4a779f6eeaae39ac242850ea470c65f6dda83fbb8cffc7812a4602085604051908152a180f35b6001906001600160a01b0380612786611f0784888861395b565b1686528260208181526040882054151592836127c6575b5050506127ab575b01612736565b6127c16127bc611f0783878761395b565b614631565b6127a5565b909192506127d8611f0785898961395b565b1687525260ff600b6040872001541686808061279d565b3461032357806003193601126103235760206040517faacf4d9ce41c3977f13dda8d61dce041128ea08757d4cc0dab99105ca55f6d208152f35b346103235760203660031901126103235760043560075481101561287b576128526040916135fc565b50602082516128608161375c565b60018354938483520154918291015282519182526020820152f35b60405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c840e8d2cae440d2dcc8caf60731b6044820152606490fd5b34610323576020366003190112610323576128ce6135a4565b506020610368613ca6565b34610323576128e7366135e6565b600c546001600160a01b0316330361048f5761271080831115908161297c575b501561294857816040917f1ad8b45a83c0b03428f4eb1fc49e5e9e4ee40bea305c8dfde416980ea7d90c9893600d5580600e5582519182526020820152a180f35b60405162461bcd60e51b815260206004820152600c60248201526b08ccaca40e8dede40d0d2ced60a31b6044820152606490fd5b905081111584612907565b34610323578060031936011261032357602060405168056bc75e2d631000008152f35b6129b3366136b6565b92915060018060a01b036129cc81600a54163314613bf6565b84841580156129d9575080f35b81808781936129ea82341015613c2e565b86600b5416908390612a5a575bf115610419577f66aecc579aa1ef463c0ed1547c2cb6163370e6311a60cba815252acbb398f2139260a09260405195865260606020870152600b60608701526a37b934b3b4b730ba34b7b760a91b608087015260408601521692a2818080808480f35b506108fc6129f7565b346103235780600319360112610323576020600e54604051908152f35b34610fcd5760a0366003190112610fcd57612a996135a4565b612aa16135ba565b612aa96135d0565b91608435916003831015610fcd576001600160a01b0391821690813b15610fcd575f60849281958560405198899788966376e674df60e01b8852166004870152166024850152606435604485015260648401525af18015612b1657612b0c575080f35b61001a9150613778565b6040513d5f823e3d90fd5b34610fcd575f366003190112610fcd57612b396145dd565b335f52602060018152612b5560ff600b60405f20015416613b78565b335f5260018152612b6f60ff600b60405f20015416613bb3565b335f526001815260405f20805415612cc057600490612b8d33614631565b01908154918215612c84575f9055612ba782600354613732565b6003555f8060018060a01b03600a5416604051828582019163e19fb8f560e01b835287602482015260248152612bdc8161378c565b51925af1612be861399c565b5015612c2c575f808080853382f115612b16577ff9984c8173c4b4ff9cc454f76ed19c053f4490ccb224fd9ddffeb4ef4bea3530906040519283523392a260015f55005b6084906040519062461bcd60e51b82526004820152602b60248201527f4661696c656420746f20657874726163742066756e64732066726f6d206c697160448201526a1d5a591a5d1e481c1bdbdb60aa1b6064820152fd5b60405162461bcd60e51b81526004810183905260146024820152734e6f20696e74657265737420746f20636c61696d60601b6044820152606490fd5b60405162461bcd60e51b8152600481018390526012602482015271139bc8199d5b991cc819195c1bdcda5d195960721b6044820152606490fd5b34610fcd576060366003190112610fcd57600c546024359060443590600435906001600160a01b0316330361048f57670de0b6b3a76400008210612db5576007548110612d93575060405191612d4f8361375c565b8252602082015260075490600160401b821015612d7f57612d7982600161001a94016007556135fc565b90613b4f565b634e487b7160e01b5f52604160045260245ffd5b612d799061001a939260405193612da98561375c565b845260208401526135fc565b60405162461bcd60e51b815260206004820152601160248201527052617465206d757374206265203e3d203160781b6044820152606490fd5b34610fcd576020366003190112610fcd57612e076135a4565b5f610160604051612e178161373f565b8281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e0820152826101008201528261012082015282610140820152015260018060a01b03165f52600160205261018060405f20610160604051612e808161373f565b60ff600b84549485845260018101546020850152600281015460408501526003810154606085015260048101546080850152600581015460a0850152600681015460c0850152600781015460e085015260088101546101008501526009810154610120850152600a8101546101408501520154161515828201526040519283526020810151602084015260408101516040840152606081015160608401526080810151608084015260a081015160a084015260c081015160c084015260e081015160e084015261010081015161010084015261012081015161012084015261014081015161014084015201511515610160820152f35b34610fcd576020366003190112610fcd576020610368612f946135a4565b613a27565b34610fcd57612fa736613669565b90612fb560148311156138d6565b612fc0821515613917565b5f905f5b83811061309a57505080612fd457005b5f8060018060a01b03600a541660405182602082019163e19fb8f560e01b8352866024820152602481526130078161378c565b51925af161301361399c565b501561304b577f3d6423b78eecbf9e43153ccd5a4ad162e04ca046dca21adc4a009a10fc3570f49160409182519182526020820152a1005b60405162461bcd60e51b815260206004820152602160248201527f4661696c656420746f20657874726163742066756e64732066726f6d20706f6f6044820152601b60fa1b6064820152608490fd5b6001600160a01b03806130b1611f0784888761395b565b165f5260206001815260405f20916005830190815491821594851580613198575b6130e5575b505050505050600101612fc4565b92809496959891848280959654906130fc91613732565b905560038281549061310d91613732565b90555f905561311b9161398f565b9682613128868b8a61395b565b6131319061396b565b16905f80938493849392849361318f575bf115612b16576001937f1a39b9c5044b9f0ff56c5951e30c1ebe24911353aafcceb9250e83a24fe158c49161317b611f07868b8a61395b565b1692604051908152a29085808080806130d7565b506108fc613142565b5060068101546201518081018091116131b3574210156130d2565b634e487b7160e01b5f52601160045260245ffd5b34610fcd576020366003190112610fcd57600435600254811015610fcd576131f0602091613634565b905460405160039290921b1c6001600160a01b03168152f35b34610fcd576040366003190112610fcd576020610c3f6132276135a4565b61322f6135ba565b906137d7565b34610fcd576020366003190112610fcd576001600160a01b036132566135a4565b165f52600160205261018060405f20805490600181015490600281015460038201546004830154600584015460068501549060078601549260088701549460098801549660ff600b600a8b01549a015416996040519b8c5260208c015260408b015260608a0152608089015260a088015260c087015260e08601526101008501526101208401526101408301521515610160820152f35b34610fcd576020366003190112610fcd57600435600754811015610fcd576133166040916135fc565b506001815491015482519182526020820152f35b34610fcd575f366003190112610fcd576020604051662386f26fc100008152f35b34610fcd576020366003190112610fcd57600c54600435906001600160a01b0316330361048f57670de0b6b3a7640000811015806133cb575b1561339757600455620151804204600555005b60405162461bcd60e51b815260206004820152600c60248201526b496e76616c6964207261746560a01b6044820152606490fd5b50670df27a2cdf448000811115613384565b34610fcd576133eb366135e6565b6133f36144fd565b90811561344a575b81905f906004545b818310613428576020610368876134238861341e8984613701565b613714565b613732565b909192670de0b6b3a764000061344083600193613701565b0493019190613403565b670de0b6b3a764000091506133fb565b34610fcd576020366003190112610fcd57600435801515809103610fcd57600c546001600160a01b0316330361048f5760ff8019600f5416911617600f555f80f35b34610fcd576020366003190112610fcd576134b56135a4565b600c546001600160a01b0391908216330361048f5716801561350957600b80546001600160a01b031916821790557f279ea638680bba6a87fddd8bcdbc37d94eee92841e1dfec2ab0f79662c7093115f80a2005b60405162461bcd60e51b815260206004820152601760248201527f496e76616c6964207265736572766520616464726573730000000000000000006044820152606490fd5b34610fcd576020366003190112610fcd5760206103686004356144a9565b34610fcd575f366003190112610fcd57807f30d714d36be891ba5851837992c580dee4624dc21d19d9fecbcabfcb0e7ce28060209252f35b600435906001600160a01b0382168203610fcd57565b602435906001600160a01b0382168203610fcd57565b604435906001600160a01b0382168203610fcd57565b6040906003190112610fcd576004359060243590565b600754811015610a275760075f5260011b7fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801905f90565b600254811015610a275760025f527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace01905f90565b906020600319830112610fcd5760043567ffffffffffffffff92838211610fcd5780602383011215610fcd578160040135938411610fcd5760248460051b83010111610fcd576024019190565b6080906003190112610fcd576004356001600160a01b0381168103610fcd5790602435906044359060643590565b34610fcd575f366003190112610fcd576020604051620151808152f35b818102929181159184041417156131b357565b811561371e570490565b634e487b7160e01b5f52601260045260245ffd5b919082039182116131b357565b610180810190811067ffffffffffffffff821117612d7f57604052565b6040810190811067ffffffffffffffff821117612d7f57604052565b67ffffffffffffffff8111612d7f57604052565b6060810190811067ffffffffffffffff821117612d7f57604052565b90601f8019910116810190811067ffffffffffffffff821117612d7f57604052565b51908115158203610fcd57565b6040805163239ad4ef60e21b81526001600160a01b0393841660048201819052939192909116908281602481855afa9081156138cc575f91613897575b50159283613823575b50505090565b829350602460209293518094819363b69e5c7760e01b835260048301525afa91821561388e57505f9161385c575b5015155f808061381d565b90506020813d602011613886575b81613877602093836137a8565b81010312610fcd57515f613851565b3d915061386a565b513d5f823e3d90fd5b90508281813d83116138c5575b6138ae81836137a8565b81010312610fcd576138bf906137ca565b5f613814565b503d6138a4565b83513d5f823e3d90fd5b156138dd57565b60405162461bcd60e51b8152602060048201526012602482015271546f6f206d616e792061646472657373657360701b6044820152606490fd5b1561391e57565b60405162461bcd60e51b8152602060048201526015602482015274139bc81859191c995cdcd95cc81c1c9bdd9a591959605a1b6044820152606490fd5b9190811015610a275760051b0190565b356001600160a01b0381168103610fcd5790565b906202a30082018092116131b357565b919082018092116131b357565b3d156139d6573d9067ffffffffffffffff8211612d7f57604051916139cb601f8201601f1916602001846137a8565b82523d5f602084013e565b606090565b156139e257565b60405162461bcd60e51b815260206004820152601e60248201527f696e746572657374496e646578206d757374206e6f74206265207a65726f00006044820152606490fd5b60018060a01b03165f52600160205260405f2060405190613a478261373f565b8054808352600182015460208401526002820154604084015260038201549060ff600b606086019484865260048101546080880152600581015460a0880152600681015460c0880152600781015460e088015260088101546101008801526009810154610120880152600a810154610140880152015416151561016085015215613b4857613ad69015156139db565b613ade6144fd565b8251670de0b6b3a764000091828202918083048414901517156131b3578281029281840414901517156131b357611de7613b2a926ec097ce7bc90715b34b9f1000000000945190613714565b0490518082115f14613b4257613b3f91613732565b90565b50505f90565b5050505f90565b9190613b65576020816001925184550151910155565b634e487b7160e01b5f525f60045260245ffd5b15613b7f57565b60405162461bcd60e51b815260206004820152600c60248201526b2737ba1030903632b73232b960a11b6044820152606490fd5b15613bba57565b60405162461bcd60e51b81526020600482015260146024820152732737ba1030b71030b1ba34bb32903632b73232b960611b6044820152606490fd5b15613bfd57565b60405162461bcd60e51b815260206004820152600960248201526813db9b1e481c1bdbdb60ba1b6044820152606490fd5b15613c3557565b60405162461bcd60e51b815260206004820152601860248201527f496e73756666696369656e7420666565207061796d656e7400000000000000006044820152606490fd5b67ffffffffffffffff8111612d7f5760051b60200190565b51906001600160a01b0382168203610fcd57565b600354600a546040805163b8cdf56160e01b81526004926001600160a01b039160209183169082818781855afa908115613fac575f91613f7f575b508451635e1ead1f60e11b81529083828881865afa908115613f75575f91613f44575b613d0e9250613732565b958015613f3957670de0b6b3a76400009687810290808204891490151715613f265790613d3a91613714565b8451906379fed8ad60e11b9485835284838981875afa928315613eb6575f93613eef575b50848260248a848b519788948593634fd41dad60e11b8552840152165afa928315613eb6575f93613ec0575b50865195865284868981875afa958615613eb6575f96613e75575b50849291604491885197889485936301508d4560e51b85528c8501526024840152165afa928315613e6b575f93613e3c575b508190845195868092635467a5a960e11b82525afa92831561388e57505f92613e0a575b50613e069250613701565b0490565b90915082813d8311613e35575b613e2181836137a8565b81010312610fcd57613e069151905f613dfb565b503d613e17565b9092508181813d8311613e64575b613e5481836137a8565b81010312610fcd57519181613dd7565b503d613e4a565b84513d5f823e3d90fd5b9095508481819493943d8311613eaf575b613e9081836137a8565b81010312610fcd578492613ea5604492613c92565b9691509192613da5565b503d613e86565b87513d5f823e3d90fd5b9092508481813d8311613ee8575b613ed881836137a8565b81010312610fcd5751915f613d8a565b503d613ece565b9092508481813d8311613f1f575b613f0781836137a8565b81010312610fcd57613f1890613c92565b915f613d5e565b503d613efd565b601187634e487b7160e01b5f525260245ffd5b505050505090505490565b90508382813d8311613f6e575b613f5b81836137a8565b81010312610fcd57613d0e915190613d04565b503d613f51565b86513d5f823e3d90fd5b90508281813d8311613fa5575b613f9681836137a8565b81010312610fcd57515f613ce1565b503d613f8c565b85513d5f823e3d90fd5b15613fbd57565b60405162461bcd60e51b8152602060048201526015602482015274131a5c5d5a591a5d1e541bdbdb081b9bdd081cd95d605a1b6044820152606490fd5b60025490600160401b821015612d7f5761401d82600161403b9401600255613634565b90919060018060a01b038084549260031b9316831b921b1916179055565b565b8051821015610a275760209160051b010190565b60018060a01b03165f52600160205260405f206040516140708161373f565b81548152600182015460208201526002820154604082015260038201546060820152600482015460808201526005820154908160a082015261016060ff600b6006860154958660c0860152600781015460e086015260088101546101008601526009810154610120860152600a810154610140860152015416151591015215614106576201518081018091116131b35742101590565b505f90565b9061411582613c7a565b61412260405191826137a8565b8281528092614133601f1991613c7a565b0190602036910137565b60018060a01b03165f5260018060205260405f20906040519161415f8361373f565b805492838152600182015460208201526002820154936040820194855260038301549060ff600b606085019584875260048101546080870152600581015460a0870152600681015460c0870152600781015460e087015260088101546101008701526009810154610120870152600a8101546101408701520154161515610160840152156142a3576141f29015156139db565b6141fa6144fd565b91815191670de0b6b3a764000092838102908082048514901517156131b357838502918583048514861517156131b3576ec097ce7bc90715b34b9f100000000061425461425d93611de76142659662015180985190613714565b04905190613732565b955142613732565b049182614274575b5050505090565b9291905f935b828510614287575061426d565b9091928261429783839798613701565b0495019392919061427a565b50505050505f90565b60035480156144a257600a546040805163b8cdf56160e01b8152909260209290916001600160a01b039182169160049185818481875afa908115613eb6575f91614475575b508651635e1ead1f60e11b81529086828581885afa90811561446b575f9161443a575b61431e9250613732565b92831561442f57670de0b6b3a76400008402670de0b6b3a763ffff198582040161441c57839161434f878993613714565b5088516379fed8ad60e11b815292839182905afa908115613eb6579087949392915f916143dd575b50906044929185519687958694634dc8336560e11b86528501526024840152165afa92831561388e575f936143ac5750505090565b9080929350813d83116143d6575b6143c481836137a8565b81010312610fcd5701515f808061381d565b503d6143ba565b8093929550878092503d8311614415575b6143f881836137a8565b81010312610fcd57869361440d604493613c92565b909192614377565b503d6143ee565b601184634e487b7160e01b5f525260245ffd5b505093505050505490565b90508682813d8311614464575b61445181836137a8565b81010312610fcd5761431e915190614314565b503d614447565b88513d5f823e3d90fd5b90508581813d831161449b575b61448c81836137a8565b81010312610fcd57515f6142f1565b503d614482565b5060045490565b90600754805b6144bb57506004549150565b5f1981018181116131b3576144cf816135fc565b50548410156144e8575080156131b3575f1901806144af565b60019293506144f791506135fc565b50015490565b600354156145d157614516600554620151804204613732565b61451e6142ac565b670de0b6b3a764000080821061459457821561458e57919080925f915b838310614549575050505090565b90919293826145588383613701565b0490811061456c579392600101919061453b565b50505050507812725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f2190565b50905090565b60405162461bcd60e51b8152602060048201526015602482015274496e76616c696420696e746572657374207261746560581b6044820152606490fd5b670de0b6b3a764000090565b60025f54146145ec5760025f55565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b6001600160a01b03165f81815260016020526040902080549091811561479c576003830190815415614787576146656144fd565b928315614780576146768482613701565b6146868261342386548094613714565b5080851161469b575b50505055600242910155565b670de0b6b3a76400008083029083820481036131b35780870290878204036131b3576146df8492611de76146e5956ec097ce7bc90715b34b9f100000000094613714565b04613732565b90811561468f578161472b7fa8994c180af00cca393507749e1d830601910f8fd81f94fdcaf6dadb646cf5a19360409360048a0161472483825461398f565b905561398f565b87556147398160035461398f565b600355426007880155837f65724bab62e2b372c625ed834016c4e1750f8074aad18b22844457f35ea61d7360208451848152a28151908152856020820152a25f808061468f565b5050505050565b50670de0b6b3a7640000915055600242910155565b505050565b80511561495657905f915b8051831015614951576001600160a01b0392836147c9828461403d565b5116805f52600194602090868252604091825f2091600b9260ff8482015416159081614947575b50614809575b50505050506001919293500191906147ac565b5f895b61484c575b50505050506001929394507f5d9d7e5f1ada1bcc5ddf7a5a4c417d004a64912af537c40f78badbf16754847b5f80a28392915f8080806147f6565b6002805480831015614940579083918861486585613634565b949054600395861b1c161461487f5750505089018961480c565b5f9c95949293979a9b9c19978882019182116131b35761401d846148a56148b294613634565b905490881b1c1691613634565b805496871561492c5760019a5f988996879586948a9301906148d382613634565b90918254918b1b1b1916905585558b84525281209581875586015584015582015582600482015582600582015582600682015582600782015582600882015582600982015582600a82015501558493925f808080614811565b634e487b7160e01b5f52603160045260245ffd5b5050614811565b905054155f6147f0565b509050565b60405162461bcd60e51b81526020600482015260136024820152724e6f206c656e6465727320746f20636865636b60681b6044820152606490fd5b60018060a01b03165f52600160205260405f206040516149b08161373f565b81549081815260018301546020820152600283015460408201526003830154606082015260048301546080820152600583015460a0820152600683015460c082015261016060ff600b6007860154958660e086015260088101546101008601526009810154610120860152600a8101546101408601520154161515910152156141065780614a6a57506201518042018042116131b3575b614a504261397f565b8111614a595790565b506201518042018042116131b35790565b62015180810180911115614a4757634e487b7160e01b5f52601160045260245ffdfea2646970667358221220b3d489fff18c7dffd7e4d55d76c0e534a125798a6ef0e0be0160c3f0d6c4228164736f6c63430008180033",
+  "bytecode": "0x608034620002135762004d64906001600160401b03601f38849003908101601f191683019082821184831017620001ff57808491604096879485528339810103126200021357620000508262000237565b6200005f602080940162000237565b60015f5560018060a01b03908160018060a01b0319931683600a541617600a551690600c541617600c556005600955670de12d4cc511c0009182600455620151804204600555620000d1620000b362000217565b678ac7230489e800008152670de13f20401b6000838201526200024c565b620000fd620000df62000217565b674563918244f400008152670de13607f1a8c000838201526200024c565b620001226200010b62000217565b670de0b6b3a764000094858252838201526200024c565b83519061018082019282841090841117620001ff575f93600b9386528483528183019085825286840190868252606085019081526080850187815260a0860188815260c087019189835260e08801938a85526101008901958b87526101208a01978c895260016101408c019a8e8c526101608d019e8f52335f52528d5f209a518b555160018b01555160028a015551600389015551600488015551600587015551600686015551600785015551600884015551600983015551600a820155019051151560ff8019835416911617905551614ac29081620002a28239f35b634e487b7160e01b5f52604160045260245ffd5b5f80fd5b60408051919082016001600160401b03811183821017620001ff57604052565b51906001600160a01b03821682036200021357565b60075468010000000000000000811015620001ff5760018101806007558110156200028d57602060019160075f52815f2090831b0192805184550151910155565b634e487b7160e01b5f52603260045260245ffdfe608080604052600436101561001c575b50361561001a575f80fd5b005b5f803560e01c918263071156871461356c575081630c196a741461354e57816314673d311461349c57816316c38b3c1461345a5781631876b415146133dd5781631a3f61cd1461334b5781631ea30fef1461332a57816321bf8985146132ed57816328fd10d7146132355781632cf58893146132095781632d6963ce146131c75781632ef55a0614612f9957816332aa9b6814612f76578163334bbd4d14612dee57816333ec339e14612cfa57816335981fd814612b2157816338e3ea1114612a805781633f4de62f14612a63578163480d1aee146129aa5781634c34a982146129875781634d56022f146128d957816352ace309146128b5578163537dd93a1461282957816355e87dbc146127ef5781635b12e7331461270d5781635c975abb146126eb578163665a11ca146126c35781636a2bb879146126435781636a7ebf4a146126295781636d7c218b1461260c578163709b8961146125ca5781637491687e1461241557816374f0314f146102f557816382ee21fc146123f85781638a2e98f31461238b57816394e95da31461236e578163962a0da5146123345781639ee679e8146121c9578163a1666b5414612104578163a6727ce7146120c9578163a7086ded14611ec1578163a74f099814611e87578163a8d9e5ba14611e4d578163ab19f09514611c71578163ade2854d14611c54578163b034012314611c2c578163b8bb5c4214611c0f578163b918ee2514611bf2578163bcebb1d7146115f7578163c0798fe41461133c578163c11feeb91461131f578163cca4391614611278578163d01cd45614610c71578163d33219b414610c49578163d704731014610c1c578163dc1df57214610ad9578163e03ff7cb1461085e578163e11932cf1461083b578163e2c41dbc146104a1578163e2d746281461042d578163e50649d114610370578163f6e180f51461034e578163f79ed94b14610326578163fccf6a1e146102fa575063feedab00146102f5575f61000f565b6136e4565b346103235760203660031901126103235760406020916004358152600683522054604051908152f35b80fd5b34610323578060031936011261032357600b546040516001600160a01b039091168152602090f35b3461032357806003193601126103235760206103686142ac565b604051908152f35b610379366136b6565b92915060018060a01b0361039281600a54163314613bf6565b848415801561039f575080f35b81808781936103b082341015613c2e565b86600b5416908390610424575bf115610419577f66aecc579aa1ef463c0ed1547c2cb6163370e6311a60cba815252acbb398f2139260a0926040519586526060602087015260046060870152636c61746560e01b608087015260408601521692a2818080808480f35b6040513d86823e3d90fd5b506108fc6103bd565b34610323576020366003190112610323576104466135a4565b600c546001600160a01b0391908216330361048f5716801561047d576bffffffffffffffffffffffff60a01b600854161760085580f35b60405163d92e233d60e01b8152600490fd5b6040516359f8b11760e11b8152600490fd5b806003193601126103235760ff600f541661080457662386f26fc100008034106107f257600a54604051633af7305960e21b81523360048201526020926001600160a01b039290919084908290602490829087165afa9081156107e75785916107ae575b5015610769573384526001835268056bc75e2d6310000061052a60408620543461398f565b116107195733845260018352604084206003810180546106e257670de0b6b3a7640000905542600182015542600282015542600a820155600b8101600160ff1982541617905561057933613ffa565b61058233614631565b61058d34825461398f565b81556009810161059e34825461398f565b9055600a429101556105b23460035461398f565b600355838080803486600a54165af16105c961399c565b50156106ac5734049060085416801515806106a3575b610614575b50507f543ba50a5eec5e6178218e364b1d0f396157b3c8fa278522c2cb7fd99407d474604051913483523392a280f35b803b1561069f576040516340c10f1960e01b81523360048201526024810183905290849081908390604490829084905af1918261068b575b5050610685576040519081527f5c0b206f3618d350db41c606c827006e7e9a725fea435a1cd618f657f81ea352823392a25b82806105e4565b5061067e565b61069490613778565b61069f57838561064c565b8380fd5b508115156105df565b60405162461bcd60e51b815260048101849052600e60248201526d11195c1bdcda5d0819985a5b195960921b6044820152606490fd5b50600b8101805460ff81161580610710575b610700575b5050610579565b60ff1916600117905585806106f9565b508254156106f4565b60405162461bcd60e51b815260048101849052602260248201527f4465706f73697420776f756c6420657863656564206d6178696d756d206c696d6044820152611a5d60f21b6064820152608490fd5b60405162461bcd60e51b815260048101849052601d60248201527f4372656469742073636f726520726571756972656420746f206c656e640000006044820152606490fd5b90508381813d83116107e0575b6107c581836137a8565b810103126107dc576107d6906137ca565b85610505565b8480fd5b503d6107bb565b6040513d87823e3d90fd5b60405163162908e360e11b8152600490fd5b60405162461bcd60e51b815260206004820152600f60248201526e10dbdb9d1c9858dd081c185d5cd959608a1b6044820152606490fd5b346103235760203660031901126103235760206103686108596135a4565b61413d565b346103235780600319360112610323576108766145dd565b3381526020600181526040822090600b82019061089660ff835416613bb3565b6005830191825415610a9c576108ab33614631565b82549385936001820154620151808101809111610a88579087914210610a3b575b6108e06108d9878961398f565b8454613732565b83556108f76108ef878961398f565b600354613732565b6003555554156109ee575b50838060018060a01b03600a5416604051828582019163e19fb8f560e01b8352886024820152602481526109358161378c565b51925af161094161399c565b50156109aa5783808480156109a0575b8280929181923390f115610995576040519283528201527ffbc3a599b784fe88772fc5abcc07223f64ca0b13acc341f4fb1e46bef0510eb460403392a26001815580f35b6040513d85823e3d90fd5b6108fc9150610951565b6064906040519062461bcd60e51b82526004820152601760248201527f4661696c656420746f20657874726163742066756e64730000000000000000006044820152fd5b805460ff19169055604051610a028161375c565b600181528181019082368337805115610a2757610a21913390526147a1565b84610902565b634e487b7160e01b5f52603260045260245ffd5b959450610a576064610a4f60095488613701565b048096613732565b956040518681527fb6a45448c8250adf8d836e047d46f96410d632c7089720e3aed88fcb76644ded863392a26108cc565b634e487b7160e01b88526011600452602488fd5b60405162461bcd60e51b8152600481018390526015602482015274139bc81c195b991a5b99c81dda5d1a191c985dd85b605a1b6044820152606490fd5b34610323578060031936011261032357600c546001600160a01b039081163303610be757600254610b098161410b565b918391845b818110610b6857505081610b20578380f35b610b298261410b565b92845b838110610b475750505050610b40906147a1565b8180808380f35b8083610b556001938561403d565b5116610b61828861403d565b5201610b2c565b82610b7282613634565b90549060031b1c16808752600190816020526040882060ff600b82015416159081610bdd575b50610ba8575b5050600101610b0e565b610bb686889793949761403d565b525f198114610bc9570192600187610b9e565b634e487b7160e01b87526011600452602487fd5b9050541589610b98565b60405162461bcd60e51b815260206004820152600d60248201526c4f6e6c792074696d656c6f636b60981b6044820152606490fd5b34610323576020366003190112610323576020610c3f610c3a6135a4565b614051565b6040519015158152f35b34610323578060031936011261032357600c546040516001600160a01b039091168152602090f35b3461032357606036600319011261032357610c8a6135a4565b610c926135ba565b90610c9b6135d0565b610ca583836137d7565b15611240576040516339a37a4360e11b81526001600160a01b038281166004830181905294602494919260209284169083818881855afa9081156111c3578991611207575b50156111ce5760405163b69e5c7760e01b8152938216600485018190529483858881855afa9485156111c3578995611194575b506040516378e2eb6160e11b81526004810189905284818981865afa908115611189578a9161115c575b506040516356512fcd60e11b8152600481018a90529085828a81875afa918215610fd8578b9261112d575b5081156110fb5780156110b757604051630ef7fb6760e01b81528681600481885afa9081156110ac578c9161107f575b506064018060641161106c57610db89088613701565b91670de0b6b3a76400009283810293818504149015171561106c5790610ddd91613701565b9081156110185790610dee91613714565b60405163e7602b9d60e01b81526001600160a01b038381166004830152851660248201529097908581604481875afa908115610fd8578b91610feb575b50808911610fe3575b5060405163200a4deb60e21b81528581600481875afa908115610fd8578b91610fa7575b508810610f6c575090889291813b1561069f576040516001622b512560e01b031981526001600160a01b039182166004820152908316602482015233604482015260648101889052838160848183865af1908115610419578491610f58575b5050803b15610f54576040516378974cbb60e01b81526001600160a01b039290921660048301526024820185905282908290604490829084905af18015610f4957610f31575b50506040519384528301527f61a26dafe158573397cb85ec41fab65aa51d01855779276c8eb8c6915f7c577e60403393a480f35b610f3a90613778565b610f45578587610efd565b8580fd5b6040513d84823e3d90fd5b8280fd5b610f6190613778565b610f5457828a610eb7565b8460156064926040519262461bcd60e51b84526004840152820152742132b637bb9036b4b7103634b8bab4b230ba34b7b760591b6044820152fd5b90508581813d8311610fd1575b610fbe81836137a8565b81010312610fcd57518b610e58565b5f80fd5b503d610fb4565b6040513d8d823e3d90fd5b97508a610e34565b90508581813d8311611011575b61100281836137a8565b81010312610fcd57518b610e2b565b503d610ff8565b60405162461bcd60e51b8152600481018790526027818b01527f4469766973696f6e206279207a65726f20696e207061727469616c206c69717560448201526634b230ba34b7b760c91b6064820152608490fd5b634e487b7160e01b8c526011600452898cfd5b90508681813d83116110a5575b61109681836137a8565b81010312610fcd57518c610da2565b503d61108c565b6040513d8e823e3d90fd5b60405162461bcd60e51b8152600481018790526018818b01527f436f6c6c61746572616c207072696365206973207a65726f00000000000000006044820152606490fd5b60405162461bcd60e51b815260048101879052600b818b01526a131515881b9bdd081cd95d60aa1b6044820152606490fd5b9091508581813d8311611155575b61114581836137a8565b81010312610fcd5751908b610d72565b503d61113b565b90508481813d8311611182575b61117381836137a8565b81010312610fcd57518a610d47565b503d611169565b6040513d8c823e3d90fd5b9094508381813d83116111bc575b6111ac81836137a8565b81010312610fcd57519389610d1d565b503d6111a2565b6040513d8b823e3d90fd5b60405162461bcd60e51b81526004810184905260128188015271125b9d985b1a590818dbdb1b185d195c985b60721b6044820152606490fd5b90508381813d8311611239575b61121e81836137a8565b810103126112355761122f906137ca565b89610cea565b8880fd5b503d611214565b60405162461bcd60e51b815260206004820152601060248201526f506f736974696f6e206865616c74687960801b6044820152606490fd5b34610323578060031936011261032357338152600160205260408120600581019081549182156112da578391826006925501556040519081527f2eed97477f07c07ec48f8f678f4e84f7c0de55bf33f51c3dc989b1335308031960203392a280f35b60405162461bcd60e51b815260206004820152601f60248201527f4e6f2070656e64696e67207769746864726177616c20746f2063616e63656c006044820152606490fd5b346103235780600319360112610323576020600254604051908152f35b34610323576020908160031936011261032357600a546001600160a01b0391908216611369811515613fb6565b604051624b476b60e91b81528481600481855afa9081156109955783916115ca575b5060405163b8cdf56160e01b81528581600481865afa90811561041957849161159d575b50604051635e1ead1f60e11b8152908682600481875afa9081156107e757859161156c575b6113de9250613732565b811561156457670de0b6b3a764000090818102918183041490151715611550579061140891613714565b6040516379fed8ad60e11b8152908582600481865afa91821561041957908692918592611515575b506024906040519687938492634fd41dad60e11b84526004840152165afa928315610f495790849183946114e3575b50604051635467a5a960e11b81529190829060049082905afa9182156114d757916114a2575b5061149990670de0b6b3a764000092613701565b04604051908152f35b90508281813d83116114d0575b6114b981836137a8565b81010312610fcd5751670de0b6b3a7640000611485565b503d6114af565b604051903d90823e3d90fd5b8281939295503d831161150e575b6114fb81836137a8565b81010312610fcd5751918390600461145f565b503d6114f1565b8092508391933d8311611549575b61152d81836137a8565b8101031261069f579060246115428793613c92565b9190611430565b503d611523565b634e487b7160e01b84526011600452602484fd5b505081611408565b90508682813d8311611596575b61158381836137a8565b81010312610fcd576113de9151906113d4565b503d611579565b90508581813d83116115c3575b6115b481836137a8565b81010312610fcd5751866113af565b503d6115aa565b90508481813d83116115f0575b6115e181836137a8565b81010312610fcd57518561138b565b503d6115d7565b34610323576040366003190112610323576116106135a4565b906116196135ba565b60405163042e02cf60e01b81526001600160a01b0382811660048301819052946024946020949093918316929185818881875afa9081156107e7578591611bbd575b5015611b6e5760405163c23c69d560e01b81526004810188905285818881875afa9081156107e7578591611b41575b506040516360d143f160e11b8152908682600481885afa908115611b36578691611b05575b6116b9925061398f565b4210611ac85760405163cf17622560e01b8152908482600481875afa9182156107e7578592611a29575b50845b82518110156117b857836116fa828561403d565b51604051637781200d60e11b81529116600482015287818a81895afa9081156117ad578791611774575b5015611732576001016116e6565b606488886040519162461bcd60e51b83528160048401528201527f4f7261636c65206369726375697420627265616b6572207472696767657265646044820152fd5b90508781813d83116117a6575b61178b81836137a8565b810103126117a25761179c906137ca565b8a611724565b8680fd5b503d611781565b6040513d89823e3d90fd5b5094939684604051809863b69e5c7760e01b825283600483015281875afa968715611a1e5788976119ef575b50604051639b8621d560e01b81528581600481885afa9081156111c35789916119c1575b50606461181861181f928a613701565b048861398f565b9088805b8451811015611932576118708661183a838861403d565b5160405163e7602b9d60e01b815291166001600160a01b0381811660048401528c16602483015290918a90839081906044820190565b03818c5afa918215610419578492611900575b5081611894575b5050600101611823565b883b1561069f576040516001622b512560e01b031981526001600160a01b039182166004820152908b16602482015233604482015260648101919091528281608481838c5af19081156109955783911561188a576118f190613778565b6118fc57818c61188a565b5080fd5b935090508883813d811161192b575b61191981836137a8565b81010312610fcd578b9251908d611883565b503d61190f565b5094935095915095823b1561069f576040516378974cbb60e01b81526001600160a01b0392909216600483015260248201529082908290604490829084905af18015610f49576119ad575b50507f1175522017e08c2f400d7e516608eff60816ee9e8319158d174321234b602631906040519384523393a380f35b6119b690613778565b61069f57838561197d565b90508581813d83116119e8575b6119d881836137a8565b81010312610fcd57516064611808565b503d6119ce565b9096508481813d8311611a17575b611a0781836137a8565b81010312610fcd575195886117e4565b503d6119fd565b6040513d8a823e3d90fd5b9091503d8086833e611a3b81836137a8565b8101908681830312610f455780519067ffffffffffffffff82116117a257019080601f83011215610f45578151611a7181613c7a565b92611a7f60405194856137a8565b818452888085019260051b820101928311611ac45788809101915b838310611aac575050505090886116e3565b8190611ab784613c92565b8152019101908890611a9a565b8780fd5b60405162461bcd60e51b8152600481018690526016818801527511dc9858d9481c195c9a5bd9081b9bdd08195b99195960521b6044820152606490fd5b90508682813d8311611b2f575b611b1c81836137a8565b81010312610fcd576116b99151906116af565b503d611b12565b6040513d88823e3d90fd5b90508581813d8311611b67575b611b5881836137a8565b81010312610fcd57518861168a565b503d611b4e565b60405162461bcd60e51b8152600481018690526022818801527f4163636f756e74206e6f74206d61726b656420666f72206c697175696461746960448201526137b760f11b6064820152608490fd5b90508581813d8311611beb575b611bd481836137a8565b810103126107dc57611be5906137ca565b8861165b565b503d611bca565b346103235780600319360112610323576020600954604051908152f35b346103235780600319360112610323576020600d54604051908152f35b346103235780600319360112610323576008546040516001600160a01b039091168152602090f35b346103235780600319360112610323576020600754604051908152f35b3461032357602036600319011261032357611c8a6135a4565b6001600160a01b0381168252600160205260408083209051919280611cae8461373f565b8254938481526001840154928360208301526002850154604083015260038501549460608301958652600481015492836080820152600582015460a0820152600682015460c082015261016060ff600b60078501549460e0850195865260088101546101008601526009810154610120860152600a8101546101408601520154161515910152620151808501809511611e395751948615908115611d7d575b505050611d5b60c096614991565b91604051958652602086015260408501526060840152608083015260a0820152f35b9091979350611d8e815115156139db565b611d966144fd565b90670de0b6b3a7640000918289029389850484141715611e2557828102928184041490151715611e11576ec097ce7bc90715b34b9f1000000000611ded611d5b94611de760c09c958c955190613714565b90613701565b0481811115611e0957611e009250613732565b925b9688611d4d565b505092611e02565b634e487b7160e01b89526011600452602489fd5b634e487b7160e01b8a52601160045260248afd5b634e487b7160e01b82526011600452602482fd5b3461032357806003193601126103235760206040517fbc37299a3f6cccd6c755dd8bfdf2500dcaabe80313ae76769173dd12db1d5fd98152f35b3461032357806003193601126103235760206040517f358559da74e98365ce10a27dc62f2c5b6fa4992108fa51890f8203b09b80f2628152f35b3461032357611ecf36613669565b600c80546001600160a01b039392908416330361048f57801561209057845b818110611ef9578580f35b611f0c611f0782848761395b565b61396b565b908582161561205c578582168752600160205260408720546120245761201e600192604051611f3a8161373f565b898152896020820152896040820152670de0b6b3a764000060608201528960808201528960a08201528960c08201528960e0820152896101008201528961012082015289610140820152896101608201528882168a5284602052610160600b60408c208351815560208401518882015560408401516002820155606084015160038201556080840151600482015560a0840151600582015560c0840151600682015560e0840151600782015561010084015160088201556101208401516009820155610140840151600a82015501910151151560ff80198354169116179055613ffa565b01611eee565b60405162461bcd60e51b815260206004820152601060248201526f20b63932b0b23c9030903632b73232b960811b6044820152606490fd5b60405162461bcd60e51b815260206004820152602481018590526b5a65726f206164647265737360a01b6044820152606490fd5b60405162461bcd60e51b8152602060048201526011602482015270115b5c1d1e481b195b99195c881b1a5cdd607a1b6044820152606490fd5b34610323576020366003190112610323576120e26135a4565b50600a546120fa906001600160a01b03161515613fb6565b6020610368613ca6565b3461032357806003193601126103235760405180916002549081835260208093018092600283527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90835b8181106121ac57505050846121659103856137a8565b60405193838594850191818652518092526040850193925b82811061218c57505050500390f35b83516001600160a01b03168552869550938101939281019260010161217d565b82546001600160a01b03168452928601926001928301920161214f565b34610323576020806003193601126118fc5760043590338352600181526121f960ff600b60408620015416613b78565b3383526001815261221360ff600b60408620015416613bb3565b3383526001815260408320600881018054916201518092838101809111610bc95742106122ef57805485116122b357600381018054156122a3575b5061225833614631565b846005820155600642910155429055420190814211611550576040519283528201527f24b91f4f47caf44230a57777a9be744924e82bf666f2d5702faf97df35e60f9f60403392a280f35b6122ab6144fd565b90558661224e565b60405162461bcd60e51b8152600481018590526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606490fd5b60405162461bcd60e51b815260048101859052601d60248201527f4d757374207761697420666f7220636f6f6c646f776e20706572696f640000006044820152606490fd5b3461032357806003193601126103235760206040517f96737339a958f216173e690d06f324072e6dc3146e04c060bd723906d6b190768152f35b346103235780600319360112610323576020600554604051908152f35b3461032357602036600319011261032357600c54600435906001600160a01b0316330361048f57606481116123c05760095580f35b60405162461bcd60e51b815260206004820152601060248201526f0a0cadcc2d8e8f240e8dede40d0d2ced60831b6044820152606490fd5b346103235780600319360112610323576020600454604051908152f35b346103235760203660031901126103235761242e6135a4565b6001600160a01b031681526001602052604080822090519082906124518361373f565b80548352600181015492836020820152600282015460408201526003820154916060820192835260048101546080830152600581015460a0830152600681015460c083015260ff600b60078301549260e0850193845260088101546101008601526009810154610120860152600a81015461014086015201541615156101608301526201518091828601809611610bc95785421092835f146125c35760646124fd835160095490613701565b04925b51806125a45750804201804211611e11575b61251b4261397f565b81111561259857504201804211610a885760a09750935b8151612558575b5050604051948552602085015215604084015260608301526080820152f35b6125909295508061256e612588925115156139db565b6125806125796144fd565b8451613701565b905190613714565b905190613732565b928680612539565b905060a0975093612532565b8181018091111561251257634e487b7160e01b89526011600452602489fd5b8792612500565b346103235760203660031901126103235760209060ff90600b906040906001600160a01b036125f76135a4565b16815260018552200154166040519015158152f35b346103235780600319360112610323576020600354604051908152f35b346103235780600319360112610323576020610368613ca6565b346103235761265136613669565b600c546001600160a01b0392908316330361048f5761266f82613c7a565b9261267d60405194856137a8565b828452602092602085019060051b8301923684116117a257905b8382106126ab57866126a8876147a1565b80f35b81358381168103610fcd578152908401908401612697565b34610323578060031936011261032357600a546040516001600160a01b039091168152602090f35b34610323578060031936011261032357602060ff600f54166040519015158152f35b346103235761271b36613669565b9061272960328311156138d6565b612734821515613917565b825b82811061276c57837f9765ab3445c5a4a779f6eeaae39ac242850ea470c65f6dda83fbb8cffc7812a4602085604051908152a180f35b6001906001600160a01b0380612786611f0784888861395b565b1686528260208181526040882054151592836127c6575b5050506127ab575b01612736565b6127c16127bc611f0783878761395b565b614631565b6127a5565b909192506127d8611f0785898961395b565b1687525260ff600b6040872001541686808061279d565b3461032357806003193601126103235760206040517faacf4d9ce41c3977f13dda8d61dce041128ea08757d4cc0dab99105ca55f6d208152f35b346103235760203660031901126103235760043560075481101561287b576128526040916135fc565b50602082516128608161375c565b60018354938483520154918291015282519182526020820152f35b60405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c840e8d2cae440d2dcc8caf60731b6044820152606490fd5b34610323576020366003190112610323576128ce6135a4565b506020610368613ca6565b34610323576128e7366135e6565b600c546001600160a01b0316330361048f5761271080831115908161297c575b501561294857816040917f1ad8b45a83c0b03428f4eb1fc49e5e9e4ee40bea305c8dfde416980ea7d90c9893600d5580600e5582519182526020820152a180f35b60405162461bcd60e51b815260206004820152600c60248201526b08ccaca40e8dede40d0d2ced60a31b6044820152606490fd5b905081111584612907565b34610323578060031936011261032357602060405168056bc75e2d631000008152f35b6129b3366136b6565b92915060018060a01b036129cc81600a54163314613bf6565b84841580156129d9575080f35b81808781936129ea82341015613c2e565b86600b5416908390612a5a575bf115610419577f66aecc579aa1ef463c0ed1547c2cb6163370e6311a60cba815252acbb398f2139260a09260405195865260606020870152600b60608701526a37b934b3b4b730ba34b7b760a91b608087015260408601521692a2818080808480f35b506108fc6129f7565b346103235780600319360112610323576020600e54604051908152f35b34610fcd5760a0366003190112610fcd57612a996135a4565b612aa16135ba565b612aa96135d0565b91608435916003831015610fcd576001600160a01b0391821690813b15610fcd575f60849281958560405198899788966376e674df60e01b8852166004870152166024850152606435604485015260648401525af18015612b1657612b0c575080f35b61001a9150613778565b6040513d5f823e3d90fd5b34610fcd575f366003190112610fcd57612b396145dd565b335f52602060018152612b5560ff600b60405f20015416613b78565b335f5260018152612b6f60ff600b60405f20015416613bb3565b335f526001815260405f20805415612cc057600490612b8d33614631565b01908154918215612c84575f9055612ba782600354613732565b6003555f8060018060a01b03600a5416604051828582019163e19fb8f560e01b835287602482015260248152612bdc8161378c565b51925af1612be861399c565b5015612c2c575f808080853382f115612b16577ff9984c8173c4b4ff9cc454f76ed19c053f4490ccb224fd9ddffeb4ef4bea3530906040519283523392a260015f55005b6084906040519062461bcd60e51b82526004820152602b60248201527f4661696c656420746f20657874726163742066756e64732066726f6d206c697160448201526a1d5a591a5d1e481c1bdbdb60aa1b6064820152fd5b60405162461bcd60e51b81526004810183905260146024820152734e6f20696e74657265737420746f20636c61696d60601b6044820152606490fd5b60405162461bcd60e51b8152600481018390526012602482015271139bc8199d5b991cc819195c1bdcda5d195960721b6044820152606490fd5b34610fcd576060366003190112610fcd57600c546024359060443590600435906001600160a01b0316330361048f57670de0b6b3a76400008210612db5576007548110612d93575060405191612d4f8361375c565b8252602082015260075490600160401b821015612d7f57612d7982600161001a94016007556135fc565b90613b4f565b634e487b7160e01b5f52604160045260245ffd5b612d799061001a939260405193612da98561375c565b845260208401526135fc565b60405162461bcd60e51b815260206004820152601160248201527052617465206d757374206265203e3d203160781b6044820152606490fd5b34610fcd576020366003190112610fcd57612e076135a4565b5f610160604051612e178161373f565b8281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e0820152826101008201528261012082015282610140820152015260018060a01b03165f52600160205261018060405f20610160604051612e808161373f565b60ff600b84549485845260018101546020850152600281015460408501526003810154606085015260048101546080850152600581015460a0850152600681015460c0850152600781015460e085015260088101546101008501526009810154610120850152600a8101546101408501520154161515828201526040519283526020810151602084015260408101516040840152606081015160608401526080810151608084015260a081015160a084015260c081015160c084015260e081015160e084015261010081015161010084015261012081015161012084015261014081015161014084015201511515610160820152f35b34610fcd576020366003190112610fcd576020610368612f946135a4565b613a27565b34610fcd57612fa736613669565b90612fb560148311156138d6565b612fc0821515613917565b5f905f5b83811061309a57505080612fd457005b5f8060018060a01b03600a541660405182602082019163e19fb8f560e01b8352866024820152602481526130078161378c565b51925af161301361399c565b501561304b577f3d6423b78eecbf9e43153ccd5a4ad162e04ca046dca21adc4a009a10fc3570f49160409182519182526020820152a1005b60405162461bcd60e51b815260206004820152602160248201527f4661696c656420746f20657874726163742066756e64732066726f6d20706f6f6044820152601b60fa1b6064820152608490fd5b6001600160a01b03806130b1611f0784888761395b565b165f5260206001815260405f20916005830190815491821594851580613198575b6130e5575b505050505050600101612fc4565b92809496959891848280959654906130fc91613732565b905560038281549061310d91613732565b90555f905561311b9161398f565b9682613128868b8a61395b565b6131319061396b565b16905f80938493849392849361318f575bf115612b16576001937f1a39b9c5044b9f0ff56c5951e30c1ebe24911353aafcceb9250e83a24fe158c49161317b611f07868b8a61395b565b1692604051908152a29085808080806130d7565b506108fc613142565b5060068101546201518081018091116131b3574210156130d2565b634e487b7160e01b5f52601160045260245ffd5b34610fcd576020366003190112610fcd57600435600254811015610fcd576131f0602091613634565b905460405160039290921b1c6001600160a01b03168152f35b34610fcd576040366003190112610fcd576020610c3f6132276135a4565b61322f6135ba565b906137d7565b34610fcd576020366003190112610fcd576001600160a01b036132566135a4565b165f52600160205261018060405f20805490600181015490600281015460038201546004830154600584015460068501549060078601549260088701549460098801549660ff600b600a8b01549a015416996040519b8c5260208c015260408b015260608a0152608089015260a088015260c087015260e08601526101008501526101208401526101408301521515610160820152f35b34610fcd576020366003190112610fcd57600435600754811015610fcd576133166040916135fc565b506001815491015482519182526020820152f35b34610fcd575f366003190112610fcd576020604051662386f26fc100008152f35b34610fcd576020366003190112610fcd57600c54600435906001600160a01b0316330361048f57670de0b6b3a7640000811015806133cb575b1561339757600455620151804204600555005b60405162461bcd60e51b815260206004820152600c60248201526b496e76616c6964207261746560a01b6044820152606490fd5b50670df27a2cdf448000811115613384565b34610fcd576133eb366135e6565b6133f36144fd565b90811561344a575b81905f906004545b818310613428576020610368876134238861341e8984613701565b613714565b613732565b909192670de0b6b3a764000061344083600193613701565b0493019190613403565b670de0b6b3a764000091506133fb565b34610fcd576020366003190112610fcd57600435801515809103610fcd57600c546001600160a01b0316330361048f5760ff8019600f5416911617600f555f80f35b34610fcd576020366003190112610fcd576134b56135a4565b600c546001600160a01b0391908216330361048f5716801561350957600b80546001600160a01b031916821790557f279ea638680bba6a87fddd8bcdbc37d94eee92841e1dfec2ab0f79662c7093115f80a2005b60405162461bcd60e51b815260206004820152601760248201527f496e76616c6964207265736572766520616464726573730000000000000000006044820152606490fd5b34610fcd576020366003190112610fcd5760206103686004356144a9565b34610fcd575f366003190112610fcd57807f30d714d36be891ba5851837992c580dee4624dc21d19d9fecbcabfcb0e7ce28060209252f35b600435906001600160a01b0382168203610fcd57565b602435906001600160a01b0382168203610fcd57565b604435906001600160a01b0382168203610fcd57565b6040906003190112610fcd576004359060243590565b600754811015610a275760075f5260011b7fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801905f90565b600254811015610a275760025f527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace01905f90565b906020600319830112610fcd5760043567ffffffffffffffff92838211610fcd5780602383011215610fcd578160040135938411610fcd5760248460051b83010111610fcd576024019190565b6080906003190112610fcd576004356001600160a01b0381168103610fcd5790602435906044359060643590565b34610fcd575f366003190112610fcd576020604051620151808152f35b818102929181159184041417156131b357565b811561371e570490565b634e487b7160e01b5f52601260045260245ffd5b919082039182116131b357565b610180810190811067ffffffffffffffff821117612d7f57604052565b6040810190811067ffffffffffffffff821117612d7f57604052565b67ffffffffffffffff8111612d7f57604052565b6060810190811067ffffffffffffffff821117612d7f57604052565b90601f8019910116810190811067ffffffffffffffff821117612d7f57604052565b51908115158203610fcd57565b6040805163239ad4ef60e21b81526001600160a01b0393841660048201819052939192909116908281602481855afa9081156138cc575f91613897575b50159283613823575b50505090565b829350602460209293518094819363b69e5c7760e01b835260048301525afa91821561388e57505f9161385c575b5015155f808061381d565b90506020813d602011613886575b81613877602093836137a8565b81010312610fcd57515f613851565b3d915061386a565b513d5f823e3d90fd5b90508281813d83116138c5575b6138ae81836137a8565b81010312610fcd576138bf906137ca565b5f613814565b503d6138a4565b83513d5f823e3d90fd5b156138dd57565b60405162461bcd60e51b8152602060048201526012602482015271546f6f206d616e792061646472657373657360701b6044820152606490fd5b1561391e57565b60405162461bcd60e51b8152602060048201526015602482015274139bc81859191c995cdcd95cc81c1c9bdd9a591959605a1b6044820152606490fd5b9190811015610a275760051b0190565b356001600160a01b0381168103610fcd5790565b906202a30082018092116131b357565b919082018092116131b357565b3d156139d6573d9067ffffffffffffffff8211612d7f57604051916139cb601f8201601f1916602001846137a8565b82523d5f602084013e565b606090565b156139e257565b60405162461bcd60e51b815260206004820152601e60248201527f696e746572657374496e646578206d757374206e6f74206265207a65726f00006044820152606490fd5b60018060a01b03165f52600160205260405f2060405190613a478261373f565b8054808352600182015460208401526002820154604084015260038201549060ff600b606086019484865260048101546080880152600581015460a0880152600681015460c0880152600781015460e088015260088101546101008801526009810154610120880152600a810154610140880152015416151561016085015215613b4857613ad69015156139db565b613ade6144fd565b8251670de0b6b3a764000091828202918083048414901517156131b3578281029281840414901517156131b357611de7613b2a926ec097ce7bc90715b34b9f1000000000945190613714565b0490518082115f14613b4257613b3f91613732565b90565b50505f90565b5050505f90565b9190613b65576020816001925184550151910155565b634e487b7160e01b5f525f60045260245ffd5b15613b7f57565b60405162461bcd60e51b815260206004820152600c60248201526b2737ba1030903632b73232b960a11b6044820152606490fd5b15613bba57565b60405162461bcd60e51b81526020600482015260146024820152732737ba1030b71030b1ba34bb32903632b73232b960611b6044820152606490fd5b15613bfd57565b60405162461bcd60e51b815260206004820152600960248201526813db9b1e481c1bdbdb60ba1b6044820152606490fd5b15613c3557565b60405162461bcd60e51b815260206004820152601860248201527f496e73756666696369656e7420666565207061796d656e7400000000000000006044820152606490fd5b67ffffffffffffffff8111612d7f5760051b60200190565b51906001600160a01b0382168203610fcd57565b600354600a546040805163b8cdf56160e01b81526004926001600160a01b039160209183169082818781855afa908115613fac575f91613f7f575b508451635e1ead1f60e11b81529083828881865afa908115613f75575f91613f44575b613d0e9250613732565b958015613f3957670de0b6b3a76400009687810290808204891490151715613f265790613d3a91613714565b8451906379fed8ad60e11b9485835284838981875afa928315613eb6575f93613eef575b50848260248a848b519788948593634fd41dad60e11b8552840152165afa928315613eb6575f93613ec0575b50865195865284868981875afa958615613eb6575f96613e75575b50849291604491885197889485936301508d4560e51b85528c8501526024840152165afa928315613e6b575f93613e3c575b508190845195868092635467a5a960e11b82525afa92831561388e57505f92613e0a575b50613e069250613701565b0490565b90915082813d8311613e35575b613e2181836137a8565b81010312610fcd57613e069151905f613dfb565b503d613e17565b9092508181813d8311613e64575b613e5481836137a8565b81010312610fcd57519181613dd7565b503d613e4a565b84513d5f823e3d90fd5b9095508481819493943d8311613eaf575b613e9081836137a8565b81010312610fcd578492613ea5604492613c92565b9691509192613da5565b503d613e86565b87513d5f823e3d90fd5b9092508481813d8311613ee8575b613ed881836137a8565b81010312610fcd5751915f613d8a565b503d613ece565b9092508481813d8311613f1f575b613f0781836137a8565b81010312610fcd57613f1890613c92565b915f613d5e565b503d613efd565b601187634e487b7160e01b5f525260245ffd5b505050505090505490565b90508382813d8311613f6e575b613f5b81836137a8565b81010312610fcd57613d0e915190613d04565b503d613f51565b86513d5f823e3d90fd5b90508281813d8311613fa5575b613f9681836137a8565b81010312610fcd57515f613ce1565b503d613f8c565b85513d5f823e3d90fd5b15613fbd57565b60405162461bcd60e51b8152602060048201526015602482015274131a5c5d5a591a5d1e541bdbdb081b9bdd081cd95d605a1b6044820152606490fd5b60025490600160401b821015612d7f5761401d82600161403b9401600255613634565b90919060018060a01b038084549260031b9316831b921b1916179055565b565b8051821015610a275760209160051b010190565b60018060a01b03165f52600160205260405f206040516140708161373f565b81548152600182015460208201526002820154604082015260038201546060820152600482015460808201526005820154908160a082015261016060ff600b6006860154958660c0860152600781015460e086015260088101546101008601526009810154610120860152600a810154610140860152015416151591015215614106576201518081018091116131b35742101590565b505f90565b9061411582613c7a565b61412260405191826137a8565b8281528092614133601f1991613c7a565b0190602036910137565b60018060a01b03165f5260018060205260405f20906040519161415f8361373f565b805492838152600182015460208201526002820154936040820194855260038301549060ff600b606085019584875260048101546080870152600581015460a0870152600681015460c0870152600781015460e087015260088101546101008701526009810154610120870152600a8101546101408701520154161515610160840152156142a3576141f29015156139db565b6141fa6144fd565b91815191670de0b6b3a764000092838102908082048514901517156131b357838502918583048514861517156131b3576ec097ce7bc90715b34b9f100000000061425461425d93611de76142659662015180985190613714565b04905190613732565b955142613732565b049182614274575b5050505090565b9291905f935b828510614287575061426d565b9091928261429783839798613701565b0495019392919061427a565b50505050505f90565b60035480156144a257600a546040805163b8cdf56160e01b8152909260209290916001600160a01b039182169160049185818481875afa908115613eb6575f91614475575b508651635e1ead1f60e11b81529086828581885afa90811561446b575f9161443a575b61431e9250613732565b92831561442f57670de0b6b3a76400008402670de0b6b3a763ffff198582040161441c57839161434f878993613714565b5088516379fed8ad60e11b815292839182905afa908115613eb6579087949392915f916143dd575b50906044929185519687958694634dc8336560e11b86528501526024840152165afa92831561388e575f936143ac5750505090565b9080929350813d83116143d6575b6143c481836137a8565b81010312610fcd5701515f808061381d565b503d6143ba565b8093929550878092503d8311614415575b6143f881836137a8565b81010312610fcd57869361440d604493613c92565b909192614377565b503d6143ee565b601184634e487b7160e01b5f525260245ffd5b505093505050505490565b90508682813d8311614464575b61445181836137a8565b81010312610fcd5761431e915190614314565b503d614447565b88513d5f823e3d90fd5b90508581813d831161449b575b61448c81836137a8565b81010312610fcd57515f6142f1565b503d614482565b5060045490565b90600754805b6144bb57506004549150565b5f1981018181116131b3576144cf816135fc565b50548410156144e8575080156131b3575f1901806144af565b60019293506144f791506135fc565b50015490565b600354156145d157614516600554620151804204613732565b61451e6142ac565b670de0b6b3a764000080821061459457821561458e57919080925f915b838310614549575050505090565b90919293826145588383613701565b0490811061456c579392600101919061453b565b50505050507812725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f2190565b50905090565b60405162461bcd60e51b8152602060048201526015602482015274496e76616c696420696e746572657374207261746560581b6044820152606490fd5b670de0b6b3a764000090565b60025f54146145ec5760025f55565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b6001600160a01b03165f81815260016020526040902080549091811561479c576003830190815415614787576146656144fd565b928315614780576146768482613701565b6146868261342386548094613714565b5080851161469b575b50505055600242910155565b670de0b6b3a76400008083029083820481036131b35780870290878204036131b3576146df8492611de76146e5956ec097ce7bc90715b34b9f100000000094613714565b04613732565b90811561468f578161472b7fa8994c180af00cca393507749e1d830601910f8fd81f94fdcaf6dadb646cf5a19360409360048a0161472483825461398f565b905561398f565b87556147398160035461398f565b600355426007880155837f65724bab62e2b372c625ed834016c4e1750f8074aad18b22844457f35ea61d7360208451848152a28151908152856020820152a25f808061468f565b5050505050565b50670de0b6b3a7640000915055600242910155565b505050565b80511561495657905f915b8051831015614951576001600160a01b0392836147c9828461403d565b5116805f52600194602090868252604091825f2091600b9260ff8482015416159081614947575b50614809575b50505050506001919293500191906147ac565b5f895b61484c575b50505050506001929394507f5d9d7e5f1ada1bcc5ddf7a5a4c417d004a64912af537c40f78badbf16754847b5f80a28392915f8080806147f6565b6002805480831015614940579083918861486585613634565b949054600395861b1c161461487f5750505089018961480c565b5f9c95949293979a9b9c19978882019182116131b35761401d846148a56148b294613634565b905490881b1c1691613634565b805496871561492c5760019a5f988996879586948a9301906148d382613634565b90918254918b1b1b1916905585558b84525281209581875586015584015582015582600482015582600582015582600682015582600782015582600882015582600982015582600a82015501558493925f808080614811565b634e487b7160e01b5f52603160045260245ffd5b5050614811565b905054155f6147f0565b509050565b60405162461bcd60e51b81526020600482015260136024820152724e6f206c656e6465727320746f20636865636b60681b6044820152606490fd5b60018060a01b03165f52600160205260405f206040516149b08161373f565b81549081815260018301546020820152600283015460408201526003830154606082015260048301546080820152600583015460a0820152600683015460c082015261016060ff600b6007860154958660e086015260088101546101008601526009810154610120860152600a8101546101408601520154161515910152156141065780614a6a57506201518042018042116131b3575b614a504261397f565b8111614a595790565b506201518042018042116131b35790565b62015180810180911115614a4757634e487b7160e01b5f52601160045260245ffdfea2646970667358221220f20f3099d8bbb08bce23557294ba93bcdaf880dda3b46e2f4816373dd11a072364736f6c63430008180033",
+  "deployedBytecode": "0x608080604052600436101561001c575b50361561001a575f80fd5b005b5f803560e01c918263071156871461356c575081630c196a741461354e57816314673d311461349c57816316c38b3c1461345a5781631876b415146133dd5781631a3f61cd1461334b5781631ea30fef1461332a57816321bf8985146132ed57816328fd10d7146132355781632cf58893146132095781632d6963ce146131c75781632ef55a0614612f9957816332aa9b6814612f76578163334bbd4d14612dee57816333ec339e14612cfa57816335981fd814612b2157816338e3ea1114612a805781633f4de62f14612a63578163480d1aee146129aa5781634c34a982146129875781634d56022f146128d957816352ace309146128b5578163537dd93a1461282957816355e87dbc146127ef5781635b12e7331461270d5781635c975abb146126eb578163665a11ca146126c35781636a2bb879146126435781636a7ebf4a146126295781636d7c218b1461260c578163709b8961146125ca5781637491687e1461241557816374f0314f146102f557816382ee21fc146123f85781638a2e98f31461238b57816394e95da31461236e578163962a0da5146123345781639ee679e8146121c9578163a1666b5414612104578163a6727ce7146120c9578163a7086ded14611ec1578163a74f099814611e87578163a8d9e5ba14611e4d578163ab19f09514611c71578163ade2854d14611c54578163b034012314611c2c578163b8bb5c4214611c0f578163b918ee2514611bf2578163bcebb1d7146115f7578163c0798fe41461133c578163c11feeb91461131f578163cca4391614611278578163d01cd45614610c71578163d33219b414610c49578163d704731014610c1c578163dc1df57214610ad9578163e03ff7cb1461085e578163e11932cf1461083b578163e2c41dbc146104a1578163e2d746281461042d578163e50649d114610370578163f6e180f51461034e578163f79ed94b14610326578163fccf6a1e146102fa575063feedab00146102f5575f61000f565b6136e4565b346103235760203660031901126103235760406020916004358152600683522054604051908152f35b80fd5b34610323578060031936011261032357600b546040516001600160a01b039091168152602090f35b3461032357806003193601126103235760206103686142ac565b604051908152f35b610379366136b6565b92915060018060a01b0361039281600a54163314613bf6565b848415801561039f575080f35b81808781936103b082341015613c2e565b86600b5416908390610424575bf115610419577f66aecc579aa1ef463c0ed1547c2cb6163370e6311a60cba815252acbb398f2139260a0926040519586526060602087015260046060870152636c61746560e01b608087015260408601521692a2818080808480f35b6040513d86823e3d90fd5b506108fc6103bd565b34610323576020366003190112610323576104466135a4565b600c546001600160a01b0391908216330361048f5716801561047d576bffffffffffffffffffffffff60a01b600854161760085580f35b60405163d92e233d60e01b8152600490fd5b6040516359f8b11760e11b8152600490fd5b806003193601126103235760ff600f541661080457662386f26fc100008034106107f257600a54604051633af7305960e21b81523360048201526020926001600160a01b039290919084908290602490829087165afa9081156107e75785916107ae575b5015610769573384526001835268056bc75e2d6310000061052a60408620543461398f565b116107195733845260018352604084206003810180546106e257670de0b6b3a7640000905542600182015542600282015542600a820155600b8101600160ff1982541617905561057933613ffa565b61058233614631565b61058d34825461398f565b81556009810161059e34825461398f565b9055600a429101556105b23460035461398f565b600355838080803486600a54165af16105c961399c565b50156106ac5734049060085416801515806106a3575b610614575b50507f543ba50a5eec5e6178218e364b1d0f396157b3c8fa278522c2cb7fd99407d474604051913483523392a280f35b803b1561069f576040516340c10f1960e01b81523360048201526024810183905290849081908390604490829084905af1918261068b575b5050610685576040519081527f5c0b206f3618d350db41c606c827006e7e9a725fea435a1cd618f657f81ea352823392a25b82806105e4565b5061067e565b61069490613778565b61069f57838561064c565b8380fd5b508115156105df565b60405162461bcd60e51b815260048101849052600e60248201526d11195c1bdcda5d0819985a5b195960921b6044820152606490fd5b50600b8101805460ff81161580610710575b610700575b5050610579565b60ff1916600117905585806106f9565b508254156106f4565b60405162461bcd60e51b815260048101849052602260248201527f4465706f73697420776f756c6420657863656564206d6178696d756d206c696d6044820152611a5d60f21b6064820152608490fd5b60405162461bcd60e51b815260048101849052601d60248201527f4372656469742073636f726520726571756972656420746f206c656e640000006044820152606490fd5b90508381813d83116107e0575b6107c581836137a8565b810103126107dc576107d6906137ca565b85610505565b8480fd5b503d6107bb565b6040513d87823e3d90fd5b60405163162908e360e11b8152600490fd5b60405162461bcd60e51b815260206004820152600f60248201526e10dbdb9d1c9858dd081c185d5cd959608a1b6044820152606490fd5b346103235760203660031901126103235760206103686108596135a4565b61413d565b346103235780600319360112610323576108766145dd565b3381526020600181526040822090600b82019061089660ff835416613bb3565b6005830191825415610a9c576108ab33614631565b82549385936001820154620151808101809111610a88579087914210610a3b575b6108e06108d9878961398f565b8454613732565b83556108f76108ef878961398f565b600354613732565b6003555554156109ee575b50838060018060a01b03600a5416604051828582019163e19fb8f560e01b8352886024820152602481526109358161378c565b51925af161094161399c565b50156109aa5783808480156109a0575b8280929181923390f115610995576040519283528201527ffbc3a599b784fe88772fc5abcc07223f64ca0b13acc341f4fb1e46bef0510eb460403392a26001815580f35b6040513d85823e3d90fd5b6108fc9150610951565b6064906040519062461bcd60e51b82526004820152601760248201527f4661696c656420746f20657874726163742066756e64730000000000000000006044820152fd5b805460ff19169055604051610a028161375c565b600181528181019082368337805115610a2757610a21913390526147a1565b84610902565b634e487b7160e01b5f52603260045260245ffd5b959450610a576064610a4f60095488613701565b048096613732565b956040518681527fb6a45448c8250adf8d836e047d46f96410d632c7089720e3aed88fcb76644ded863392a26108cc565b634e487b7160e01b88526011600452602488fd5b60405162461bcd60e51b8152600481018390526015602482015274139bc81c195b991a5b99c81dda5d1a191c985dd85b605a1b6044820152606490fd5b34610323578060031936011261032357600c546001600160a01b039081163303610be757600254610b098161410b565b918391845b818110610b6857505081610b20578380f35b610b298261410b565b92845b838110610b475750505050610b40906147a1565b8180808380f35b8083610b556001938561403d565b5116610b61828861403d565b5201610b2c565b82610b7282613634565b90549060031b1c16808752600190816020526040882060ff600b82015416159081610bdd575b50610ba8575b5050600101610b0e565b610bb686889793949761403d565b525f198114610bc9570192600187610b9e565b634e487b7160e01b87526011600452602487fd5b9050541589610b98565b60405162461bcd60e51b815260206004820152600d60248201526c4f6e6c792074696d656c6f636b60981b6044820152606490fd5b34610323576020366003190112610323576020610c3f610c3a6135a4565b614051565b6040519015158152f35b34610323578060031936011261032357600c546040516001600160a01b039091168152602090f35b3461032357606036600319011261032357610c8a6135a4565b610c926135ba565b90610c9b6135d0565b610ca583836137d7565b15611240576040516339a37a4360e11b81526001600160a01b038281166004830181905294602494919260209284169083818881855afa9081156111c3578991611207575b50156111ce5760405163b69e5c7760e01b8152938216600485018190529483858881855afa9485156111c3578995611194575b506040516378e2eb6160e11b81526004810189905284818981865afa908115611189578a9161115c575b506040516356512fcd60e11b8152600481018a90529085828a81875afa918215610fd8578b9261112d575b5081156110fb5780156110b757604051630ef7fb6760e01b81528681600481885afa9081156110ac578c9161107f575b506064018060641161106c57610db89088613701565b91670de0b6b3a76400009283810293818504149015171561106c5790610ddd91613701565b9081156110185790610dee91613714565b60405163e7602b9d60e01b81526001600160a01b038381166004830152851660248201529097908581604481875afa908115610fd8578b91610feb575b50808911610fe3575b5060405163200a4deb60e21b81528581600481875afa908115610fd8578b91610fa7575b508810610f6c575090889291813b1561069f576040516001622b512560e01b031981526001600160a01b039182166004820152908316602482015233604482015260648101889052838160848183865af1908115610419578491610f58575b5050803b15610f54576040516378974cbb60e01b81526001600160a01b039290921660048301526024820185905282908290604490829084905af18015610f4957610f31575b50506040519384528301527f61a26dafe158573397cb85ec41fab65aa51d01855779276c8eb8c6915f7c577e60403393a480f35b610f3a90613778565b610f45578587610efd565b8580fd5b6040513d84823e3d90fd5b8280fd5b610f6190613778565b610f5457828a610eb7565b8460156064926040519262461bcd60e51b84526004840152820152742132b637bb9036b4b7103634b8bab4b230ba34b7b760591b6044820152fd5b90508581813d8311610fd1575b610fbe81836137a8565b81010312610fcd57518b610e58565b5f80fd5b503d610fb4565b6040513d8d823e3d90fd5b97508a610e34565b90508581813d8311611011575b61100281836137a8565b81010312610fcd57518b610e2b565b503d610ff8565b60405162461bcd60e51b8152600481018790526027818b01527f4469766973696f6e206279207a65726f20696e207061727469616c206c69717560448201526634b230ba34b7b760c91b6064820152608490fd5b634e487b7160e01b8c526011600452898cfd5b90508681813d83116110a5575b61109681836137a8565b81010312610fcd57518c610da2565b503d61108c565b6040513d8e823e3d90fd5b60405162461bcd60e51b8152600481018790526018818b01527f436f6c6c61746572616c207072696365206973207a65726f00000000000000006044820152606490fd5b60405162461bcd60e51b815260048101879052600b818b01526a131515881b9bdd081cd95d60aa1b6044820152606490fd5b9091508581813d8311611155575b61114581836137a8565b81010312610fcd5751908b610d72565b503d61113b565b90508481813d8311611182575b61117381836137a8565b81010312610fcd57518a610d47565b503d611169565b6040513d8c823e3d90fd5b9094508381813d83116111bc575b6111ac81836137a8565b81010312610fcd57519389610d1d565b503d6111a2565b6040513d8b823e3d90fd5b60405162461bcd60e51b81526004810184905260128188015271125b9d985b1a590818dbdb1b185d195c985b60721b6044820152606490fd5b90508381813d8311611239575b61121e81836137a8565b810103126112355761122f906137ca565b89610cea565b8880fd5b503d611214565b60405162461bcd60e51b815260206004820152601060248201526f506f736974696f6e206865616c74687960801b6044820152606490fd5b34610323578060031936011261032357338152600160205260408120600581019081549182156112da578391826006925501556040519081527f2eed97477f07c07ec48f8f678f4e84f7c0de55bf33f51c3dc989b1335308031960203392a280f35b60405162461bcd60e51b815260206004820152601f60248201527f4e6f2070656e64696e67207769746864726177616c20746f2063616e63656c006044820152606490fd5b346103235780600319360112610323576020600254604051908152f35b34610323576020908160031936011261032357600a546001600160a01b0391908216611369811515613fb6565b604051624b476b60e91b81528481600481855afa9081156109955783916115ca575b5060405163b8cdf56160e01b81528581600481865afa90811561041957849161159d575b50604051635e1ead1f60e11b8152908682600481875afa9081156107e757859161156c575b6113de9250613732565b811561156457670de0b6b3a764000090818102918183041490151715611550579061140891613714565b6040516379fed8ad60e11b8152908582600481865afa91821561041957908692918592611515575b506024906040519687938492634fd41dad60e11b84526004840152165afa928315610f495790849183946114e3575b50604051635467a5a960e11b81529190829060049082905afa9182156114d757916114a2575b5061149990670de0b6b3a764000092613701565b04604051908152f35b90508281813d83116114d0575b6114b981836137a8565b81010312610fcd5751670de0b6b3a7640000611485565b503d6114af565b604051903d90823e3d90fd5b8281939295503d831161150e575b6114fb81836137a8565b81010312610fcd5751918390600461145f565b503d6114f1565b8092508391933d8311611549575b61152d81836137a8565b8101031261069f579060246115428793613c92565b9190611430565b503d611523565b634e487b7160e01b84526011600452602484fd5b505081611408565b90508682813d8311611596575b61158381836137a8565b81010312610fcd576113de9151906113d4565b503d611579565b90508581813d83116115c3575b6115b481836137a8565b81010312610fcd5751866113af565b503d6115aa565b90508481813d83116115f0575b6115e181836137a8565b81010312610fcd57518561138b565b503d6115d7565b34610323576040366003190112610323576116106135a4565b906116196135ba565b60405163042e02cf60e01b81526001600160a01b0382811660048301819052946024946020949093918316929185818881875afa9081156107e7578591611bbd575b5015611b6e5760405163c23c69d560e01b81526004810188905285818881875afa9081156107e7578591611b41575b506040516360d143f160e11b8152908682600481885afa908115611b36578691611b05575b6116b9925061398f565b4210611ac85760405163cf17622560e01b8152908482600481875afa9182156107e7578592611a29575b50845b82518110156117b857836116fa828561403d565b51604051637781200d60e11b81529116600482015287818a81895afa9081156117ad578791611774575b5015611732576001016116e6565b606488886040519162461bcd60e51b83528160048401528201527f4f7261636c65206369726375697420627265616b6572207472696767657265646044820152fd5b90508781813d83116117a6575b61178b81836137a8565b810103126117a25761179c906137ca565b8a611724565b8680fd5b503d611781565b6040513d89823e3d90fd5b5094939684604051809863b69e5c7760e01b825283600483015281875afa968715611a1e5788976119ef575b50604051639b8621d560e01b81528581600481885afa9081156111c35789916119c1575b50606461181861181f928a613701565b048861398f565b9088805b8451811015611932576118708661183a838861403d565b5160405163e7602b9d60e01b815291166001600160a01b0381811660048401528c16602483015290918a90839081906044820190565b03818c5afa918215610419578492611900575b5081611894575b5050600101611823565b883b1561069f576040516001622b512560e01b031981526001600160a01b039182166004820152908b16602482015233604482015260648101919091528281608481838c5af19081156109955783911561188a576118f190613778565b6118fc57818c61188a565b5080fd5b935090508883813d811161192b575b61191981836137a8565b81010312610fcd578b9251908d611883565b503d61190f565b5094935095915095823b1561069f576040516378974cbb60e01b81526001600160a01b0392909216600483015260248201529082908290604490829084905af18015610f49576119ad575b50507f1175522017e08c2f400d7e516608eff60816ee9e8319158d174321234b602631906040519384523393a380f35b6119b690613778565b61069f57838561197d565b90508581813d83116119e8575b6119d881836137a8565b81010312610fcd57516064611808565b503d6119ce565b9096508481813d8311611a17575b611a0781836137a8565b81010312610fcd575195886117e4565b503d6119fd565b6040513d8a823e3d90fd5b9091503d8086833e611a3b81836137a8565b8101908681830312610f455780519067ffffffffffffffff82116117a257019080601f83011215610f45578151611a7181613c7a565b92611a7f60405194856137a8565b818452888085019260051b820101928311611ac45788809101915b838310611aac575050505090886116e3565b8190611ab784613c92565b8152019101908890611a9a565b8780fd5b60405162461bcd60e51b8152600481018690526016818801527511dc9858d9481c195c9a5bd9081b9bdd08195b99195960521b6044820152606490fd5b90508682813d8311611b2f575b611b1c81836137a8565b81010312610fcd576116b99151906116af565b503d611b12565b6040513d88823e3d90fd5b90508581813d8311611b67575b611b5881836137a8565b81010312610fcd57518861168a565b503d611b4e565b60405162461bcd60e51b8152600481018690526022818801527f4163636f756e74206e6f74206d61726b656420666f72206c697175696461746960448201526137b760f11b6064820152608490fd5b90508581813d8311611beb575b611bd481836137a8565b810103126107dc57611be5906137ca565b8861165b565b503d611bca565b346103235780600319360112610323576020600954604051908152f35b346103235780600319360112610323576020600d54604051908152f35b346103235780600319360112610323576008546040516001600160a01b039091168152602090f35b346103235780600319360112610323576020600754604051908152f35b3461032357602036600319011261032357611c8a6135a4565b6001600160a01b0381168252600160205260408083209051919280611cae8461373f565b8254938481526001840154928360208301526002850154604083015260038501549460608301958652600481015492836080820152600582015460a0820152600682015460c082015261016060ff600b60078501549460e0850195865260088101546101008601526009810154610120860152600a8101546101408601520154161515910152620151808501809511611e395751948615908115611d7d575b505050611d5b60c096614991565b91604051958652602086015260408501526060840152608083015260a0820152f35b9091979350611d8e815115156139db565b611d966144fd565b90670de0b6b3a7640000918289029389850484141715611e2557828102928184041490151715611e11576ec097ce7bc90715b34b9f1000000000611ded611d5b94611de760c09c958c955190613714565b90613701565b0481811115611e0957611e009250613732565b925b9688611d4d565b505092611e02565b634e487b7160e01b89526011600452602489fd5b634e487b7160e01b8a52601160045260248afd5b634e487b7160e01b82526011600452602482fd5b3461032357806003193601126103235760206040517fbc37299a3f6cccd6c755dd8bfdf2500dcaabe80313ae76769173dd12db1d5fd98152f35b3461032357806003193601126103235760206040517f358559da74e98365ce10a27dc62f2c5b6fa4992108fa51890f8203b09b80f2628152f35b3461032357611ecf36613669565b600c80546001600160a01b039392908416330361048f57801561209057845b818110611ef9578580f35b611f0c611f0782848761395b565b61396b565b908582161561205c578582168752600160205260408720546120245761201e600192604051611f3a8161373f565b898152896020820152896040820152670de0b6b3a764000060608201528960808201528960a08201528960c08201528960e0820152896101008201528961012082015289610140820152896101608201528882168a5284602052610160600b60408c208351815560208401518882015560408401516002820155606084015160038201556080840151600482015560a0840151600582015560c0840151600682015560e0840151600782015561010084015160088201556101208401516009820155610140840151600a82015501910151151560ff80198354169116179055613ffa565b01611eee565b60405162461bcd60e51b815260206004820152601060248201526f20b63932b0b23c9030903632b73232b960811b6044820152606490fd5b60405162461bcd60e51b815260206004820152602481018590526b5a65726f206164647265737360a01b6044820152606490fd5b60405162461bcd60e51b8152602060048201526011602482015270115b5c1d1e481b195b99195c881b1a5cdd607a1b6044820152606490fd5b34610323576020366003190112610323576120e26135a4565b50600a546120fa906001600160a01b03161515613fb6565b6020610368613ca6565b3461032357806003193601126103235760405180916002549081835260208093018092600283527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90835b8181106121ac57505050846121659103856137a8565b60405193838594850191818652518092526040850193925b82811061218c57505050500390f35b83516001600160a01b03168552869550938101939281019260010161217d565b82546001600160a01b03168452928601926001928301920161214f565b34610323576020806003193601126118fc5760043590338352600181526121f960ff600b60408620015416613b78565b3383526001815261221360ff600b60408620015416613bb3565b3383526001815260408320600881018054916201518092838101809111610bc95742106122ef57805485116122b357600381018054156122a3575b5061225833614631565b846005820155600642910155429055420190814211611550576040519283528201527f24b91f4f47caf44230a57777a9be744924e82bf666f2d5702faf97df35e60f9f60403392a280f35b6122ab6144fd565b90558661224e565b60405162461bcd60e51b8152600481018590526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606490fd5b60405162461bcd60e51b815260048101859052601d60248201527f4d757374207761697420666f7220636f6f6c646f776e20706572696f640000006044820152606490fd5b3461032357806003193601126103235760206040517f96737339a958f216173e690d06f324072e6dc3146e04c060bd723906d6b190768152f35b346103235780600319360112610323576020600554604051908152f35b3461032357602036600319011261032357600c54600435906001600160a01b0316330361048f57606481116123c05760095580f35b60405162461bcd60e51b815260206004820152601060248201526f0a0cadcc2d8e8f240e8dede40d0d2ced60831b6044820152606490fd5b346103235780600319360112610323576020600454604051908152f35b346103235760203660031901126103235761242e6135a4565b6001600160a01b031681526001602052604080822090519082906124518361373f565b80548352600181015492836020820152600282015460408201526003820154916060820192835260048101546080830152600581015460a0830152600681015460c083015260ff600b60078301549260e0850193845260088101546101008601526009810154610120860152600a81015461014086015201541615156101608301526201518091828601809611610bc95785421092835f146125c35760646124fd835160095490613701565b04925b51806125a45750804201804211611e11575b61251b4261397f565b81111561259857504201804211610a885760a09750935b8151612558575b5050604051948552602085015215604084015260608301526080820152f35b6125909295508061256e612588925115156139db565b6125806125796144fd565b8451613701565b905190613714565b905190613732565b928680612539565b905060a0975093612532565b8181018091111561251257634e487b7160e01b89526011600452602489fd5b8792612500565b346103235760203660031901126103235760209060ff90600b906040906001600160a01b036125f76135a4565b16815260018552200154166040519015158152f35b346103235780600319360112610323576020600354604051908152f35b346103235780600319360112610323576020610368613ca6565b346103235761265136613669565b600c546001600160a01b0392908316330361048f5761266f82613c7a565b9261267d60405194856137a8565b828452602092602085019060051b8301923684116117a257905b8382106126ab57866126a8876147a1565b80f35b81358381168103610fcd578152908401908401612697565b34610323578060031936011261032357600a546040516001600160a01b039091168152602090f35b34610323578060031936011261032357602060ff600f54166040519015158152f35b346103235761271b36613669565b9061272960328311156138d6565b612734821515613917565b825b82811061276c57837f9765ab3445c5a4a779f6eeaae39ac242850ea470c65f6dda83fbb8cffc7812a4602085604051908152a180f35b6001906001600160a01b0380612786611f0784888861395b565b1686528260208181526040882054151592836127c6575b5050506127ab575b01612736565b6127c16127bc611f0783878761395b565b614631565b6127a5565b909192506127d8611f0785898961395b565b1687525260ff600b6040872001541686808061279d565b3461032357806003193601126103235760206040517faacf4d9ce41c3977f13dda8d61dce041128ea08757d4cc0dab99105ca55f6d208152f35b346103235760203660031901126103235760043560075481101561287b576128526040916135fc565b50602082516128608161375c565b60018354938483520154918291015282519182526020820152f35b60405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c840e8d2cae440d2dcc8caf60731b6044820152606490fd5b34610323576020366003190112610323576128ce6135a4565b506020610368613ca6565b34610323576128e7366135e6565b600c546001600160a01b0316330361048f5761271080831115908161297c575b501561294857816040917f1ad8b45a83c0b03428f4eb1fc49e5e9e4ee40bea305c8dfde416980ea7d90c9893600d5580600e5582519182526020820152a180f35b60405162461bcd60e51b815260206004820152600c60248201526b08ccaca40e8dede40d0d2ced60a31b6044820152606490fd5b905081111584612907565b34610323578060031936011261032357602060405168056bc75e2d631000008152f35b6129b3366136b6565b92915060018060a01b036129cc81600a54163314613bf6565b84841580156129d9575080f35b81808781936129ea82341015613c2e565b86600b5416908390612a5a575bf115610419577f66aecc579aa1ef463c0ed1547c2cb6163370e6311a60cba815252acbb398f2139260a09260405195865260606020870152600b60608701526a37b934b3b4b730ba34b7b760a91b608087015260408601521692a2818080808480f35b506108fc6129f7565b346103235780600319360112610323576020600e54604051908152f35b34610fcd5760a0366003190112610fcd57612a996135a4565b612aa16135ba565b612aa96135d0565b91608435916003831015610fcd576001600160a01b0391821690813b15610fcd575f60849281958560405198899788966376e674df60e01b8852166004870152166024850152606435604485015260648401525af18015612b1657612b0c575080f35b61001a9150613778565b6040513d5f823e3d90fd5b34610fcd575f366003190112610fcd57612b396145dd565b335f52602060018152612b5560ff600b60405f20015416613b78565b335f5260018152612b6f60ff600b60405f20015416613bb3565b335f526001815260405f20805415612cc057600490612b8d33614631565b01908154918215612c84575f9055612ba782600354613732565b6003555f8060018060a01b03600a5416604051828582019163e19fb8f560e01b835287602482015260248152612bdc8161378c565b51925af1612be861399c565b5015612c2c575f808080853382f115612b16577ff9984c8173c4b4ff9cc454f76ed19c053f4490ccb224fd9ddffeb4ef4bea3530906040519283523392a260015f55005b6084906040519062461bcd60e51b82526004820152602b60248201527f4661696c656420746f20657874726163742066756e64732066726f6d206c697160448201526a1d5a591a5d1e481c1bdbdb60aa1b6064820152fd5b60405162461bcd60e51b81526004810183905260146024820152734e6f20696e74657265737420746f20636c61696d60601b6044820152606490fd5b60405162461bcd60e51b8152600481018390526012602482015271139bc8199d5b991cc819195c1bdcda5d195960721b6044820152606490fd5b34610fcd576060366003190112610fcd57600c546024359060443590600435906001600160a01b0316330361048f57670de0b6b3a76400008210612db5576007548110612d93575060405191612d4f8361375c565b8252602082015260075490600160401b821015612d7f57612d7982600161001a94016007556135fc565b90613b4f565b634e487b7160e01b5f52604160045260245ffd5b612d799061001a939260405193612da98561375c565b845260208401526135fc565b60405162461bcd60e51b815260206004820152601160248201527052617465206d757374206265203e3d203160781b6044820152606490fd5b34610fcd576020366003190112610fcd57612e076135a4565b5f610160604051612e178161373f565b8281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e0820152826101008201528261012082015282610140820152015260018060a01b03165f52600160205261018060405f20610160604051612e808161373f565b60ff600b84549485845260018101546020850152600281015460408501526003810154606085015260048101546080850152600581015460a0850152600681015460c0850152600781015460e085015260088101546101008501526009810154610120850152600a8101546101408501520154161515828201526040519283526020810151602084015260408101516040840152606081015160608401526080810151608084015260a081015160a084015260c081015160c084015260e081015160e084015261010081015161010084015261012081015161012084015261014081015161014084015201511515610160820152f35b34610fcd576020366003190112610fcd576020610368612f946135a4565b613a27565b34610fcd57612fa736613669565b90612fb560148311156138d6565b612fc0821515613917565b5f905f5b83811061309a57505080612fd457005b5f8060018060a01b03600a541660405182602082019163e19fb8f560e01b8352866024820152602481526130078161378c565b51925af161301361399c565b501561304b577f3d6423b78eecbf9e43153ccd5a4ad162e04ca046dca21adc4a009a10fc3570f49160409182519182526020820152a1005b60405162461bcd60e51b815260206004820152602160248201527f4661696c656420746f20657874726163742066756e64732066726f6d20706f6f6044820152601b60fa1b6064820152608490fd5b6001600160a01b03806130b1611f0784888761395b565b165f5260206001815260405f20916005830190815491821594851580613198575b6130e5575b505050505050600101612fc4565b92809496959891848280959654906130fc91613732565b905560038281549061310d91613732565b90555f905561311b9161398f565b9682613128868b8a61395b565b6131319061396b565b16905f80938493849392849361318f575bf115612b16576001937f1a39b9c5044b9f0ff56c5951e30c1ebe24911353aafcceb9250e83a24fe158c49161317b611f07868b8a61395b565b1692604051908152a29085808080806130d7565b506108fc613142565b5060068101546201518081018091116131b3574210156130d2565b634e487b7160e01b5f52601160045260245ffd5b34610fcd576020366003190112610fcd57600435600254811015610fcd576131f0602091613634565b905460405160039290921b1c6001600160a01b03168152f35b34610fcd576040366003190112610fcd576020610c3f6132276135a4565b61322f6135ba565b906137d7565b34610fcd576020366003190112610fcd576001600160a01b036132566135a4565b165f52600160205261018060405f20805490600181015490600281015460038201546004830154600584015460068501549060078601549260088701549460098801549660ff600b600a8b01549a015416996040519b8c5260208c015260408b015260608a0152608089015260a088015260c087015260e08601526101008501526101208401526101408301521515610160820152f35b34610fcd576020366003190112610fcd57600435600754811015610fcd576133166040916135fc565b506001815491015482519182526020820152f35b34610fcd575f366003190112610fcd576020604051662386f26fc100008152f35b34610fcd576020366003190112610fcd57600c54600435906001600160a01b0316330361048f57670de0b6b3a7640000811015806133cb575b1561339757600455620151804204600555005b60405162461bcd60e51b815260206004820152600c60248201526b496e76616c6964207261746560a01b6044820152606490fd5b50670df27a2cdf448000811115613384565b34610fcd576133eb366135e6565b6133f36144fd565b90811561344a575b81905f906004545b818310613428576020610368876134238861341e8984613701565b613714565b613732565b909192670de0b6b3a764000061344083600193613701565b0493019190613403565b670de0b6b3a764000091506133fb565b34610fcd576020366003190112610fcd57600435801515809103610fcd57600c546001600160a01b0316330361048f5760ff8019600f5416911617600f555f80f35b34610fcd576020366003190112610fcd576134b56135a4565b600c546001600160a01b0391908216330361048f5716801561350957600b80546001600160a01b031916821790557f279ea638680bba6a87fddd8bcdbc37d94eee92841e1dfec2ab0f79662c7093115f80a2005b60405162461bcd60e51b815260206004820152601760248201527f496e76616c6964207265736572766520616464726573730000000000000000006044820152606490fd5b34610fcd576020366003190112610fcd5760206103686004356144a9565b34610fcd575f366003190112610fcd57807f30d714d36be891ba5851837992c580dee4624dc21d19d9fecbcabfcb0e7ce28060209252f35b600435906001600160a01b0382168203610fcd57565b602435906001600160a01b0382168203610fcd57565b604435906001600160a01b0382168203610fcd57565b6040906003190112610fcd576004359060243590565b600754811015610a275760075f5260011b7fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801905f90565b600254811015610a275760025f527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace01905f90565b906020600319830112610fcd5760043567ffffffffffffffff92838211610fcd5780602383011215610fcd578160040135938411610fcd5760248460051b83010111610fcd576024019190565b6080906003190112610fcd576004356001600160a01b0381168103610fcd5790602435906044359060643590565b34610fcd575f366003190112610fcd576020604051620151808152f35b818102929181159184041417156131b357565b811561371e570490565b634e487b7160e01b5f52601260045260245ffd5b919082039182116131b357565b610180810190811067ffffffffffffffff821117612d7f57604052565b6040810190811067ffffffffffffffff821117612d7f57604052565b67ffffffffffffffff8111612d7f57604052565b6060810190811067ffffffffffffffff821117612d7f57604052565b90601f8019910116810190811067ffffffffffffffff821117612d7f57604052565b51908115158203610fcd57565b6040805163239ad4ef60e21b81526001600160a01b0393841660048201819052939192909116908281602481855afa9081156138cc575f91613897575b50159283613823575b50505090565b829350602460209293518094819363b69e5c7760e01b835260048301525afa91821561388e57505f9161385c575b5015155f808061381d565b90506020813d602011613886575b81613877602093836137a8565b81010312610fcd57515f613851565b3d915061386a565b513d5f823e3d90fd5b90508281813d83116138c5575b6138ae81836137a8565b81010312610fcd576138bf906137ca565b5f613814565b503d6138a4565b83513d5f823e3d90fd5b156138dd57565b60405162461bcd60e51b8152602060048201526012602482015271546f6f206d616e792061646472657373657360701b6044820152606490fd5b1561391e57565b60405162461bcd60e51b8152602060048201526015602482015274139bc81859191c995cdcd95cc81c1c9bdd9a591959605a1b6044820152606490fd5b9190811015610a275760051b0190565b356001600160a01b0381168103610fcd5790565b906202a30082018092116131b357565b919082018092116131b357565b3d156139d6573d9067ffffffffffffffff8211612d7f57604051916139cb601f8201601f1916602001846137a8565b82523d5f602084013e565b606090565b156139e257565b60405162461bcd60e51b815260206004820152601e60248201527f696e746572657374496e646578206d757374206e6f74206265207a65726f00006044820152606490fd5b60018060a01b03165f52600160205260405f2060405190613a478261373f565b8054808352600182015460208401526002820154604084015260038201549060ff600b606086019484865260048101546080880152600581015460a0880152600681015460c0880152600781015460e088015260088101546101008801526009810154610120880152600a810154610140880152015416151561016085015215613b4857613ad69015156139db565b613ade6144fd565b8251670de0b6b3a764000091828202918083048414901517156131b3578281029281840414901517156131b357611de7613b2a926ec097ce7bc90715b34b9f1000000000945190613714565b0490518082115f14613b4257613b3f91613732565b90565b50505f90565b5050505f90565b9190613b65576020816001925184550151910155565b634e487b7160e01b5f525f60045260245ffd5b15613b7f57565b60405162461bcd60e51b815260206004820152600c60248201526b2737ba1030903632b73232b960a11b6044820152606490fd5b15613bba57565b60405162461bcd60e51b81526020600482015260146024820152732737ba1030b71030b1ba34bb32903632b73232b960611b6044820152606490fd5b15613bfd57565b60405162461bcd60e51b815260206004820152600960248201526813db9b1e481c1bdbdb60ba1b6044820152606490fd5b15613c3557565b60405162461bcd60e51b815260206004820152601860248201527f496e73756666696369656e7420666565207061796d656e7400000000000000006044820152606490fd5b67ffffffffffffffff8111612d7f5760051b60200190565b51906001600160a01b0382168203610fcd57565b600354600a546040805163b8cdf56160e01b81526004926001600160a01b039160209183169082818781855afa908115613fac575f91613f7f575b508451635e1ead1f60e11b81529083828881865afa908115613f75575f91613f44575b613d0e9250613732565b958015613f3957670de0b6b3a76400009687810290808204891490151715613f265790613d3a91613714565b8451906379fed8ad60e11b9485835284838981875afa928315613eb6575f93613eef575b50848260248a848b519788948593634fd41dad60e11b8552840152165afa928315613eb6575f93613ec0575b50865195865284868981875afa958615613eb6575f96613e75575b50849291604491885197889485936301508d4560e51b85528c8501526024840152165afa928315613e6b575f93613e3c575b508190845195868092635467a5a960e11b82525afa92831561388e57505f92613e0a575b50613e069250613701565b0490565b90915082813d8311613e35575b613e2181836137a8565b81010312610fcd57613e069151905f613dfb565b503d613e17565b9092508181813d8311613e64575b613e5481836137a8565b81010312610fcd57519181613dd7565b503d613e4a565b84513d5f823e3d90fd5b9095508481819493943d8311613eaf575b613e9081836137a8565b81010312610fcd578492613ea5604492613c92565b9691509192613da5565b503d613e86565b87513d5f823e3d90fd5b9092508481813d8311613ee8575b613ed881836137a8565b81010312610fcd5751915f613d8a565b503d613ece565b9092508481813d8311613f1f575b613f0781836137a8565b81010312610fcd57613f1890613c92565b915f613d5e565b503d613efd565b601187634e487b7160e01b5f525260245ffd5b505050505090505490565b90508382813d8311613f6e575b613f5b81836137a8565b81010312610fcd57613d0e915190613d04565b503d613f51565b86513d5f823e3d90fd5b90508281813d8311613fa5575b613f9681836137a8565b81010312610fcd57515f613ce1565b503d613f8c565b85513d5f823e3d90fd5b15613fbd57565b60405162461bcd60e51b8152602060048201526015602482015274131a5c5d5a591a5d1e541bdbdb081b9bdd081cd95d605a1b6044820152606490fd5b60025490600160401b821015612d7f5761401d82600161403b9401600255613634565b90919060018060a01b038084549260031b9316831b921b1916179055565b565b8051821015610a275760209160051b010190565b60018060a01b03165f52600160205260405f206040516140708161373f565b81548152600182015460208201526002820154604082015260038201546060820152600482015460808201526005820154908160a082015261016060ff600b6006860154958660c0860152600781015460e086015260088101546101008601526009810154610120860152600a810154610140860152015416151591015215614106576201518081018091116131b35742101590565b505f90565b9061411582613c7a565b61412260405191826137a8565b8281528092614133601f1991613c7a565b0190602036910137565b60018060a01b03165f5260018060205260405f20906040519161415f8361373f565b805492838152600182015460208201526002820154936040820194855260038301549060ff600b606085019584875260048101546080870152600581015460a0870152600681015460c0870152600781015460e087015260088101546101008701526009810154610120870152600a8101546101408701520154161515610160840152156142a3576141f29015156139db565b6141fa6144fd565b91815191670de0b6b3a764000092838102908082048514901517156131b357838502918583048514861517156131b3576ec097ce7bc90715b34b9f100000000061425461425d93611de76142659662015180985190613714565b04905190613732565b955142613732565b049182614274575b5050505090565b9291905f935b828510614287575061426d565b9091928261429783839798613701565b0495019392919061427a565b50505050505f90565b60035480156144a257600a546040805163b8cdf56160e01b8152909260209290916001600160a01b039182169160049185818481875afa908115613eb6575f91614475575b508651635e1ead1f60e11b81529086828581885afa90811561446b575f9161443a575b61431e9250613732565b92831561442f57670de0b6b3a76400008402670de0b6b3a763ffff198582040161441c57839161434f878993613714565b5088516379fed8ad60e11b815292839182905afa908115613eb6579087949392915f916143dd575b50906044929185519687958694634dc8336560e11b86528501526024840152165afa92831561388e575f936143ac5750505090565b9080929350813d83116143d6575b6143c481836137a8565b81010312610fcd5701515f808061381d565b503d6143ba565b8093929550878092503d8311614415575b6143f881836137a8565b81010312610fcd57869361440d604493613c92565b909192614377565b503d6143ee565b601184634e487b7160e01b5f525260245ffd5b505093505050505490565b90508682813d8311614464575b61445181836137a8565b81010312610fcd5761431e915190614314565b503d614447565b88513d5f823e3d90fd5b90508581813d831161449b575b61448c81836137a8565b81010312610fcd57515f6142f1565b503d614482565b5060045490565b90600754805b6144bb57506004549150565b5f1981018181116131b3576144cf816135fc565b50548410156144e8575080156131b3575f1901806144af565b60019293506144f791506135fc565b50015490565b600354156145d157614516600554620151804204613732565b61451e6142ac565b670de0b6b3a764000080821061459457821561458e57919080925f915b838310614549575050505090565b90919293826145588383613701565b0490811061456c579392600101919061453b565b50505050507812725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f2190565b50905090565b60405162461bcd60e51b8152602060048201526015602482015274496e76616c696420696e746572657374207261746560581b6044820152606490fd5b670de0b6b3a764000090565b60025f54146145ec5760025f55565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b6001600160a01b03165f81815260016020526040902080549091811561479c576003830190815415614787576146656144fd565b928315614780576146768482613701565b6146868261342386548094613714565b5080851161469b575b50505055600242910155565b670de0b6b3a76400008083029083820481036131b35780870290878204036131b3576146df8492611de76146e5956ec097ce7bc90715b34b9f100000000094613714565b04613732565b90811561468f578161472b7fa8994c180af00cca393507749e1d830601910f8fd81f94fdcaf6dadb646cf5a19360409360048a0161472483825461398f565b905561398f565b87556147398160035461398f565b600355426007880155837f65724bab62e2b372c625ed834016c4e1750f8074aad18b22844457f35ea61d7360208451848152a28151908152856020820152a25f808061468f565b5050505050565b50670de0b6b3a7640000915055600242910155565b505050565b80511561495657905f915b8051831015614951576001600160a01b0392836147c9828461403d565b5116805f52600194602090868252604091825f2091600b9260ff8482015416159081614947575b50614809575b50505050506001919293500191906147ac565b5f895b61484c575b50505050506001929394507f5d9d7e5f1ada1bcc5ddf7a5a4c417d004a64912af537c40f78badbf16754847b5f80a28392915f8080806147f6565b6002805480831015614940579083918861486585613634565b949054600395861b1c161461487f5750505089018961480c565b5f9c95949293979a9b9c19978882019182116131b35761401d846148a56148b294613634565b905490881b1c1691613634565b805496871561492c5760019a5f988996879586948a9301906148d382613634565b90918254918b1b1b1916905585558b84525281209581875586015584015582015582600482015582600582015582600682015582600782015582600882015582600982015582600a82015501558493925f808080614811565b634e487b7160e01b5f52603160045260245ffd5b5050614811565b905054155f6147f0565b509050565b60405162461bcd60e51b81526020600482015260136024820152724e6f206c656e6465727320746f20636865636b60681b6044820152606490fd5b60018060a01b03165f52600160205260405f206040516149b08161373f565b81549081815260018301546020820152600283015460408201526003830154606082015260048301546080820152600583015460a0820152600683015460c082015261016060ff600b6007860154958660e086015260088101546101008601526009810154610120860152600a8101546101408601520154161515910152156141065780614a6a57506201518042018042116131b3575b614a504261397f565b8111614a595790565b506201518042018042116131b35790565b62015180810180911115614a4757634e487b7160e01b5f52601160045260245ffdfea2646970667358221220f20f3099d8bbb08bce23557294ba93bcdaf880dda3b46e2f4816373dd11a072364736f6c63430008180033",
   "linkReferences": {},
   "deployedLinkReferences": {}
 }
diff --git a/Lending (BC) + frontend/loan-management/frontend/src/abis/LiquidityPool.json b/Lending (BC) + frontend/loan-management/frontend/src/abis/LiquidityPool.json
index 5f9e1d6..a344c46 100644
--- a/Lending (BC) + frontend/loan-management/frontend/src/abis/LiquidityPool.json	
+++ b/Lending (BC) + frontend/loan-management/frontend/src/abis/LiquidityPool.json	
@@ -8,31 +8,6 @@
       "name": "OnlyTimelockLiquidityPool",
       "type": "error"
     },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": true,
-          "internalType": "address",
-          "name": "user",
-          "type": "address"
-        },
-        {
-          "indexed": false,
-          "internalType": "uint256",
-          "name": "amount",
-          "type": "uint256"
-        },
-        {
-          "indexed": false,
-          "internalType": "bytes32",
-          "name": "nullifier",
-          "type": "bytes32"
-        }
-      ],
-      "name": "BorrowWithNullifier",
-      "type": "event"
-    },
     {
       "anonymous": false,
       "inputs": [
@@ -159,56 +134,6 @@
       "name": "CreditScoreContractUpdated",
       "type": "event"
     },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": true,
-          "internalType": "address",
-          "name": "user",
-          "type": "address"
-        },
-        {
-          "indexed": false,
-          "internalType": "string",
-          "name": "source",
-          "type": "string"
-        },
-        {
-          "indexed": false,
-          "internalType": "uint256",
-          "name": "score",
-          "type": "uint256"
-        },
-        {
-          "indexed": false,
-          "internalType": "uint256",
-          "name": "convertedScore",
-          "type": "uint256"
-        }
-      ],
-      "name": "CreditScoreSourceUsed",
-      "type": "event"
-    },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": true,
-          "internalType": "address",
-          "name": "oldSystem",
-          "type": "address"
-        },
-        {
-          "indexed": true,
-          "internalType": "address",
-          "name": "newSystem",
-          "type": "address"
-        }
-      ],
-      "name": "CreditSystemUpdated",
-      "type": "event"
-    },
     {
       "anonymous": false,
       "inputs": [
@@ -694,63 +619,6 @@
       "name": "UserError",
       "type": "event"
     },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": true,
-          "internalType": "address",
-          "name": "user",
-          "type": "address"
-        },
-        {
-          "indexed": false,
-          "internalType": "string",
-          "name": "action",
-          "type": "string"
-        },
-        {
-          "indexed": false,
-          "internalType": "uint256",
-          "name": "timestamp",
-          "type": "uint256"
-        }
-      ],
-      "name": "UserHistoryUpdated",
-      "type": "event"
-    },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": false,
-          "internalType": "bool",
-          "name": "required",
-          "type": "bool"
-        }
-      ],
-      "name": "ZKProofRequirementToggled",
-      "type": "event"
-    },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": true,
-          "internalType": "address",
-          "name": "user",
-          "type": "address"
-        },
-        {
-          "indexed": false,
-          "internalType": "string",
-          "name": "reason",
-          "type": "string"
-        }
-      ],
-      "name": "ZKProofValidationFailed",
-      "type": "event"
-    },
     {
       "inputs": [],
       "name": "ALLOW_COLLATERAL_PERMISSION",
@@ -1036,11 +904,6 @@
           "internalType": "uint256",
           "name": "amount",
           "type": "uint256"
-        },
-        {
-          "internalType": "bytes32",
-          "name": "nullifier",
-          "type": "bytes32"
         }
       ],
       "name": "borrow",
@@ -1439,19 +1302,6 @@
       "stateMutability": "view",
       "type": "function"
     },
-    {
-      "inputs": [],
-      "name": "creditSystem",
-      "outputs": [
-        {
-          "internalType": "contract IntegratedCreditSystem",
-          "name": "",
-          "type": "address"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
     {
       "inputs": [
         {
@@ -1659,11 +1509,26 @@
           "type": "address"
         }
       ],
-      "name": "getCreditScore",
+      "name": "getCollateralReductionInfo",
       "outputs": [
+        {
+          "internalType": "enum LiquidityPool.RiskTier",
+          "name": "currentTier",
+          "type": "uint8"
+        },
         {
           "internalType": "uint256",
-          "name": "",
+          "name": "currentCollateralRatio",
+          "type": "uint256"
+        },
+        {
+          "internalType": "uint256",
+          "name": "adjustedCollateralRatio",
+          "type": "uint256"
+        },
+        {
+          "internalType": "uint256",
+          "name": "potentialReductionPercent",
           "type": "uint256"
         }
       ],
@@ -1678,22 +1543,12 @@
           "type": "address"
         }
       ],
-      "name": "getCreditScoreWithSource",
+      "name": "getCreditScore",
       "outputs": [
         {
           "internalType": "uint256",
-          "name": "score",
+          "name": "",
           "type": "uint256"
-        },
-        {
-          "internalType": "string",
-          "name": "source",
-          "type": "string"
-        },
-        {
-          "internalType": "bool",
-          "name": "isVerified",
-          "type": "bool"
         }
       ],
       "stateMutability": "view",
@@ -1800,6 +1655,94 @@
       "stateMutability": "view",
       "type": "function"
     },
+    {
+      "inputs": [
+        {
+          "internalType": "address",
+          "name": "user",
+          "type": "address"
+        }
+      ],
+      "name": "getLoanDetails",
+      "outputs": [
+        {
+          "internalType": "uint256",
+          "name": "principal",
+          "type": "uint256"
+        },
+        {
+          "internalType": "uint256",
+          "name": "outstanding",
+          "type": "uint256"
+        },
+        {
+          "internalType": "uint256",
+          "name": "interestRate",
+          "type": "uint256"
+        },
+        {
+          "internalType": "uint256",
+          "name": "nextDueDate",
+          "type": "uint256"
+        },
+        {
+          "internalType": "uint256",
+          "name": "installmentAmount",
+          "type": "uint256"
+        },
+        {
+          "internalType": "uint256",
+          "name": "penaltyBps",
+          "type": "uint256"
+        },
+        {
+          "internalType": "bool",
+          "name": "active",
+          "type": "bool"
+        },
+        {
+          "internalType": "uint256",
+          "name": "daysUntilDue",
+          "type": "uint256"
+        },
+        {
+          "internalType": "uint256",
+          "name": "latePenaltyIfPaidNow",
+          "type": "uint256"
+        },
+        {
+          "internalType": "uint256",
+          "name": "totalInstallmentsRemaining",
+          "type": "uint256"
+        }
+      ],
+      "stateMutability": "view",
+      "type": "function"
+    },
+    {
+      "inputs": [
+        {
+          "internalType": "address",
+          "name": "user",
+          "type": "address"
+        },
+        {
+          "internalType": "address",
+          "name": "token",
+          "type": "address"
+        }
+      ],
+      "name": "getMaxWithdrawableCollateral",
+      "outputs": [
+        {
+          "internalType": "uint256",
+          "name": "maxWithdrawable",
+          "type": "uint256"
+        }
+      ],
+      "stateMutability": "view",
+      "type": "function"
+    },
     {
       "inputs": [],
       "name": "getMinCollateralRatio",
@@ -1986,42 +1929,6 @@
       "stateMutability": "view",
       "type": "function"
     },
-    {
-      "inputs": [
-        {
-          "internalType": "address",
-          "name": "user",
-          "type": "address"
-        }
-      ],
-      "name": "getUserHistory",
-      "outputs": [
-        {
-          "components": [
-            {
-              "internalType": "uint256",
-              "name": "firstInteractionTimestamp",
-              "type": "uint256"
-            },
-            {
-              "internalType": "uint256",
-              "name": "liquidations",
-              "type": "uint256"
-            },
-            {
-              "internalType": "uint256",
-              "name": "succesfullPayments",
-              "type": "uint256"
-            }
-          ],
-          "internalType": "struct UserHistory",
-          "name": "",
-          "type": "tuple"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
     {
       "inputs": [],
       "name": "getUtilizationRate",
@@ -2035,45 +1942,6 @@
       "stateMutability": "view",
       "type": "function"
     },
-    {
-      "inputs": [
-        {
-          "internalType": "address",
-          "name": "user",
-          "type": "address"
-        }
-      ],
-      "name": "getZKVerificationStatus",
-      "outputs": [
-        {
-          "internalType": "bool",
-          "name": "hasTradFi",
-          "type": "bool"
-        },
-        {
-          "internalType": "bool",
-          "name": "hasAccount",
-          "type": "bool"
-        },
-        {
-          "internalType": "bool",
-          "name": "hasNesting",
-          "type": "bool"
-        },
-        {
-          "internalType": "uint256",
-          "name": "finalScore",
-          "type": "uint256"
-        },
-        {
-          "internalType": "bool",
-          "name": "isEligible",
-          "type": "bool"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
     {
       "inputs": [
         {
@@ -2166,16 +2034,6 @@
           "internalType": "address",
           "name": "_interestRateModel",
           "type": "address"
-        },
-        {
-          "internalType": "address",
-          "name": "_creditSystem",
-          "type": "address"
-        },
-        {
-          "internalType": "address",
-          "name": "_nullifierRegistry",
-          "type": "address"
         }
       ],
       "name": "initialize",
@@ -2447,19 +2305,6 @@
       "stateMutability": "view",
       "type": "function"
     },
-    {
-      "inputs": [],
-      "name": "nullifierRegistry",
-      "outputs": [
-        {
-          "internalType": "contract NullifierRegistry",
-          "name": "",
-          "type": "address"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
     {
       "inputs": [],
       "name": "paused",
@@ -2648,19 +2493,6 @@
       "stateMutability": "nonpayable",
       "type": "function"
     },
-    {
-      "inputs": [
-        {
-          "internalType": "address",
-          "name": "_creditSystem",
-          "type": "address"
-        }
-      ],
-      "name": "setCreditSystem",
-      "outputs": [],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
     {
       "inputs": [
         {
@@ -2785,19 +2617,6 @@
       "stateMutability": "nonpayable",
       "type": "function"
     },
-    {
-      "inputs": [
-        {
-          "internalType": "bool",
-          "name": "required",
-          "type": "bool"
-        }
-      ],
-      "name": "setZKProofRequirement",
-      "outputs": [],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
     {
       "inputs": [],
       "name": "stablecoinManager",
@@ -2900,13 +2719,6 @@
       "stateMutability": "nonpayable",
       "type": "function"
     },
-    {
-      "inputs": [],
-      "name": "toggleZKProofRequirement",
-      "outputs": [],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
     {
       "inputs": [],
       "name": "totalBorrowedAllTime",
@@ -2984,24 +2796,6 @@
       "stateMutability": "nonpayable",
       "type": "function"
     },
-    {
-      "inputs": [
-        {
-          "internalType": "address",
-          "name": "user",
-          "type": "address"
-        },
-        {
-          "internalType": "uint256",
-          "name": "score",
-          "type": "uint256"
-        }
-      ],
-      "name": "updateCreditScoreFromZK",
-      "outputs": [],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
     {
       "inputs": [],
       "name": "useRISC0CreditScores",
@@ -3034,35 +2828,6 @@
       "stateMutability": "view",
       "type": "function"
     },
-    {
-      "inputs": [
-        {
-          "internalType": "address",
-          "name": "",
-          "type": "address"
-        }
-      ],
-      "name": "userHistory",
-      "outputs": [
-        {
-          "internalType": "uint256",
-          "name": "firstInteractionTimestamp",
-          "type": "uint256"
-        },
-        {
-          "internalType": "uint256",
-          "name": "liquidations",
-          "type": "uint256"
-        },
-        {
-          "internalType": "uint256",
-          "name": "succesfullPayments",
-          "type": "uint256"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
     {
       "inputs": [
         {
@@ -3173,26 +2938,13 @@
       "stateMutability": "nonpayable",
       "type": "function"
     },
-    {
-      "inputs": [],
-      "name": "zkProofRequired",
-      "outputs": [
-        {
-          "internalType": "bool",
-          "name": "",
-          "type": "bool"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
     {
       "stateMutability": "payable",
       "type": "receive"
     }
   ],
-  "bytecode": "0x608080604052346100175761668690816200001c8239f35b5f80fdfe6080604081815260048036101561002f575b505050361561001e575f80fd5b61002a3460a354614fb2565b60a355005b5f925f3560e01c90816301c76f8114614c4e5750806301ffc9a714614bfb57806303a42b6f14614bd3578063042e02cf14614b97578063080d9c2b14614a585780630835e14514614a385780630b044c7914614a1c5780630ef7fb6714614a015780630f61b81014614989578063100cd71d1461492f57806312065fe01461297a57806314673d311461487c5780631bfe4261146148425780631fd48b9a1461480957806320dfcae1146144fb57806323fe5a33146144e3578063248a9ca3146144b85780632a28ec44146144375780632a7beafe146144085780632f2ff15d1461436657806330332f9f146142ed57806333481fc914614203578063350c35e914613f87578063357619a914613f4d57806335f6798114613f2157806336568abe14613e8f578063365b98b214613e6657806338053ef314613e2f5780633d7c5d3e14613e11578063402d888314613b7c5780634046ebae14613b4f578063418eea3114613b14578063450a375a14613aee5780634585e33b14613936578063488683cd146138fb5780634a417a53146138de5780634c8f35ab146120345780634c95da66146138935780634fb3d3b1146138115780635141df41146137d757806352226ef01461378c57806355f4d9e21461362a578063594ad93f1461360c57806359705bb3146135ee5780635a70348f14612f6f5780635b66e7fc146135d15780635b6cca80146135805780635c44f10d146135645780635c975abb146121835780635f558e5314613548578063613cf420146134e35780636579b73e146134ab57806368272ecc1461343257806369ff0a0d1461340b5780636c648fc4146133e55780636e04ff0d1461320b5780636e9960c314611924578063704b6c021461317a57806370ed11bc1461311c57806372ed9f7b14612fad5780637346f48614612f6f57806373b4086b14612ef457806376e1128614612e7357806378974cbb14612d755780637a8ce68b14612d3a578063802937ac14612d1b57806383475f0c14612ce057806383ae7345146120da57806384bdc9a814612cbe57806386d785e614612c715780638e6b53bc14612c3f57806391d1485414612bfc57806393a517a214612b835780639490a51e14612b45578063962a0da514612b0a578063968ed60014611f0157806397ed81cf146129f55780639ac77e1b1461297f5780639b745aec1461297a5780639b8621d51461295e5780639ce625f7146129385780639e3b77af1461290f578063a217fddf146128f4578063a36e4ad614612663578063a5d5db0c146123f9578063a6f48e5d146123ad578063a75b24c7146122ee578063a787572e14612299578063a814519114612222578063a89ef5ca146121f9578063a8cf4b521461149b578063aca25f9a146121d3578063b0340123146121aa578063b187bd2614612183578063b3075fb714612152578063b3a5a0a214612112578063b69e5c77146120da578063b870676c146120b1578063b8cdf56114612092578063ba1c5e801461206f578063bc3d5a3e14612050578063c129d50414612034578063c1a287e214612016578063c23c69d514611fde578063c39537e114611fa3578063c4ae316814611f20578063c4e41b2214611f01578063c869d0ed14611e5f578063c941f32114611e36578063cc2a9a5b14611b01578063cc484c5c14611a9f578063cf17622514611a76578063cf30901214611a52578063d1f151c114611985578063d29255f91461194d578063d33219b414611924578063d3dd2bdf14611903578063d547741f146118c5578063ddac7f1b1461183c578063e19fb8f51461172b578063e1c5010014611620578063e1f7c2c914611589578063e2842d79146114f8578063e2d74628146114a0578063e6aa216c1461149b578063e6ae357614611460578063e7602b9d14611413578063e84bae45146113df578063e884cf23146113b8578063e9ffb2911461137d578063eb8d655114611342578063ebdcc16414611313578063ec9ab59914610944578063f1c5d6c214610917578063f3fdb15a146108ee578063f79ed94b146108c5578063f7e590ee1461088d578063fbbff3d114610819578063feb50e521461073a5763ffd4aedb036100115734610736576080366003190112610736576106e291610658614cae565b610660614cc4565b92610669614cda565b90606435918760018060a01b0380956106878260a6541633146158a0565b169283825260209788966097885288842091165f528652865f206106ac868254615014565b9055865163a9059cbb60e01b81526001600160a01b03909316908301908152602081019490945290968793849291839160400190565b03925af190811561072d57506106f6578280f35b81813d8311610726575b61070a8183614f84565b810103126107225761071b90614fa5565b505f808280f35b5080fd5b503d610700565b513d85823e3d90fd5b8280fd5b50903461073657806003193601126107365781356024356001600160a01b03818116918290036108155760aa54163303610806578147106107eb578480809381935af13d156107e6573d61078d81615af9565b9061079a84519283614f84565b81528460203d92013e5b156107ad578280f35b906020606492519162461bcd60e51b83528201526013602482015272115512081d1c985b9cd9995c8819985a5b1959606a1b6044820152fd5b6107a4565b825162461bcd60e51b8152806108028187016153b4565b0390fd5b505051630925c89960e31b8152fd5b8580fd5b5082903461072257602036600319011261072257610835614cae565b6001600160a01b0381168352609a602052838320549290610855906157d5565b9160058402938085046005149015171561087a57505060648351920482526020820152f35b634e487b7160e01b825260119052602490fd5b5050346107225760203660031901126107225760209181906001600160a01b036108b5614cae565b1681526099845220549051908152f35b50503461072257816003193601126107225760b35490516001600160a01b039091168152602090f35b50503461072257816003193601126107225760a75490516001600160a01b039091168152602090f35b5050346107225760203660031901126107225760209061093d610938614cae565b615dbb565b9051908152f35b50829082600319360112610722578035602493843560a4549361096d60ff8660081c1615614fd3565b61097a60ff8616156154dd565b600160ff198096161760a455338652602090609a8252838720546112d35760a95484516308b71ed360e21b81528083018590526001600160a01b039182169991929190848183818e5afa90811561125c578a9161129e575b506112665785516345d92d7760e01b81523383820152848183818e5afa90811561125c578a91611227575b50156111ed5789899a3b156111df578990818851809263305ccc3960e01b8252898783015233868301528160449e8f925af180156111e3576111cb575b5050610a453361629b565b91865163a6f48e5d60e01b815233828201528b818481305afa9384156111c1578c918d9561110a575b507f0dda2aa47a3db5dda18a4f06501647c631e2c43e7e7876dbeaf21023b8266fb590895190610aa660609788845288840190614e46565b93898301528a8201528033930390a2610abe336155e5565b91600583101580610e74578284146110d25760a35460011c8a1161107857610ae53361546e565b9150508a1161102957610af73361546e565b5050610b02336157d5565b90606482029180830460641490151715610e2b57610b20908c61503f565b11610fda578c9081968060b35416978c8a8d8b610fae575b505081610b4491615014565b9881158015610f0f575b5050508860a35491610b6560af5460b05490615014565b92859381610ec4575b505060a7541691858d5180948193634fd41dad60e11b83528a8301525afa928315610eb95792610e86575b50610e74576003610ba985614e6b565b500154818e80831215610e3d575050610bc190615890565b9061271091820390828211610e2b5790610bda9161503f565b049a5b600c8a10610ddc575062278d00420190814211610dcb5750938b9493610ca5869594610c8e8b8f8b8f8b9a998b9a918b92600695875197610c1d89614f20565b83895286890190848252808a019283528d8a01938452600c60808b019504855260a08a01966101f4885260b560c08c019960018b52338352522098518955516001890155516002880155516003870155519085015551600584015551151591019060ff801983541691151516179055565b609a89528b8b862055609b8952428b862055614ec6565b610cb08b8254614fb2565b9055610cbe8a60af54614fb2565b60af55338352609f8752888320805415610d8a575b5050818115610d81575b3390f115610d77577f6a0741a9322a7aded3431ce697f586d89a196820acf4bd0430035d7b3dab74c0939495835190868252828201527f5660f932172e1664b98577a703dd9484d374b28e3bf8c87b345bee97af612412843392a282518581527fac59582e5396aca512fa873a2047e7f4c80f8f55d4a06cb34a78a0187f62719f823392a282519485528401523392a260a4541660a45580f35b82513d88823e3d90fd5b506108fc610cdd565b4290556b66697273745f626f72726f7760a01b8951918a8352600c8b84015282015242878201525f8051602061663183398151915260803392a28c80610cd3565b634e487b7160e01b8d52601183528cfd5b6084935060267f4c6f616e20616d6f756e7420746f6f20736d616c6c20666f7220616d6f72746992888b519562461bcd60e51b8752860152840152820152653d30ba34b7b760d11b6064820152fd5b634e487b7160e01b8f5260118552838ffd5b829e93919e13610e4f575b5050610bdd565b90919c5061271091820190818311610e2b5790610e6b9161503f565b049a8d80610e48565b50634e487b7160e01b8c52602182528bfd5b9091508781813d8311610eb2575b610e9e8183614f84565b81010312610eae5751908e610b99565b5f80fd5b503d610e94565b8b51903d90823e3d90fd5b92509250929350670de0b6b3a764000090818102918183041490151715610efc578f939291610ef4908b92615021565b915f80610b6e565b50634e487b7160e01b8f5260118552838ffd5b94808381949596979382948390610fa5575bf115610f995782610f8757908e92918b51908152878a820152600b888201526a37b934b3b4b730ba34b7b760a91b6080820152868c8201527f66aecc579aa1ef463c0ed1547c2cb6163370e6311a60cba815252acbb398f21360a03392a28f8080610b4e565b634e487b7160e01b8f5260218552838ffd5b8e8b51903d90823e3d90fd5b506108fc610f21565b612710919550610b44929350610fcf9060b45f978c8a52528720548461503f565b049190508a8d610b38565b885162461bcd60e51b81528084018890526025818401527f496e73756666696369656e7420636f6c6c61746572616c20666f722074686973818e015264103637b0b760d91b6064820152608490fd5b885162461bcd60e51b81528084018890526025818401527f426f72726f7720616d6f756e74206578636565647320796f7572207469657220818e0152641b1a5b5a5d60da1b6064820152608490fd5b885162461bcd60e51b81528084018890526030818401527f426f72726f7720616d6f756e74206578636565647320617661696c61626c6520818e01526f6c656e64696e6720636170616369747960801b6064820152608490fd5b885162461bcd60e51b8152808401889052601481840152734372656469742073636f726520746f6f206c6f7760601b818e0152606490fd5b915093503d808d833e61111d8183614f84565b8101906060818303126111bd578051878201516001600160401b0381116111b957820183601f820112156111b957805161115681615af9565b946111638d519687614f84565b8186528a82840101116111b5577f0dda2aa47a3db5dda18a4f06501647c631e2c43e7e7876dbeaf21023b8266fb5936111a68d926111ac948d808a019101614e25565b01614fa5565b50919490610a6e565b8f80fd5b8e80fd5b8c80fd5b88513d8e823e3d90fd5b6111d490614f3b565b6111df57898b610a3a565b8980fd5b88513d84823e3d90fd5b855162461bcd60e51b81529182018490526015908201527414d95b1958dd081858d8dbdd5b9d1cc8199a5c9cdd605a1b6044820152606490fd5b90508481813d8311611255575b61123e8183614f84565b810103126111df5761124f90614fa5565b8b6109fd565b503d611234565b87513d8c823e3d90fd5b855162461bcd60e51b81529182018490526013908201527250726f6f6620616c726561647920757365642160681b6044820152606490fd5b90508481813d83116112cc575b6112b58183614f84565b810103126111df576112c690614fa5565b8b6109d2565b503d6112ab565b601e8860649386519362461bcd60e51b85528401528201527f526570617920796f7572206578697374696e67206465627420666972737400006044820152fd5b50503461072257602036600319011261072257602090611339611334614cae565b61629b565b15159051908152f35b505034610722578160031936011261072257602090517f742d8195bebb59905cedb6c02453745e9ef7090c163e7dea727ab0849b3dfc008152f35b505034610722578160031936011261072257602090517fa22cb6bd33c714cffaf72f196d1ebf87829cac5214f3ad84491fa8669ede7a6a8152f35b50503461072257816003193601126107225760209060ff60ab5460a01c1690519015158152f35b503461073657602036600319011261073657359160058310156114105750611408602092614ec6565b549051908152f35b80fd5b505034610722578060031936011261072257602091611430614cae565b82611439614cc4565b6001600160a01b03928316845260978652922091165f908152908352819020549051908152f35b505034610722578160031936011261072257602090517fb438992c2c4c65322b65fd8e2dacea9efd63443e69e5ed52f4a77ed6c78f7c2a8152f35b614ea4565b5034610736576020366003190112610736576114ba614cae565b60aa546001600160a01b039391929190841633036114eb575050166001600160601b0360a01b60a854161760a85580f35b51630925c89960e31b8152fd5b828434611410578060031936011261141057815191829160a15480855260208095019460a183527faadc37b8ba5645e62f4546802db221593a94729ccbfc5a97d01365a88f64987892905b82821061156957611565868661155b828b0383614f84565b5191829182614d1a565b0390f35b83546001600160a01b031687529586019560019384019390910190611543565b509034610736576020366003190112610736576115a4614cae565b60aa5490926001600160a01b03929091831633036114eb5750508060ac54921691826001600160601b0360a01b82161760ac5582611605575b167f7fc5e57c5215ef3b834df4680694bbed4808bf88ddc971b470cb8ef9365e63868380a380f35b6001600160a81b031981168317600160a01b1760ac556115dd565b509034610736576020806003193601126117275761163c614cae565b611645816159cf565b506116ef576001600160a01b0316808552609c82528285205490939060ff166116ae5750828452609c8152818420805460ff19166001179055609d905282204290557f7f62ed89ea2c6fb057e4ea77729c1d3f18056339791fce29ac89760197b45b298280a280f35b915162461bcd60e51b815291820152601b60248201527f4c69717569646174696f6e20616c7265616479207374617274656400000000006044820152606490fd5b50905162461bcd60e51b8152918201526013602482015272506f736974696f6e206973206865616c74687960681b6044820152606490fd5b8380fd5b50903461073657602036600319011261073657813560a4549261175160ff8516156154dd565b60ff1993841660011760a45560a6546001600160a01b031633036117ee574782116117ab575083808080938181156117a2575b3390f115611797575060a4541660a45580f35b51913d9150823e3d90fd5b506108fc611784565b606490602084519162461bcd60e51b8352820152601d60248201527f496e73756666696369656e7420636f6e74726163742062616c616e63650000006044820152fd5b608490602084519162461bcd60e51b8352820152602260248201527f4f6e6c79206c656e64696e67206d616e616765722063616e2063616c6c207468604482015261697360f01b6064820152fd5b509034610736578060031936011261073657611856614cae565b60aa54602435936001600160a01b039291831633036118b757620151808511611888575016835260b160205282205580f35b606490602085519162461bcd60e51b83528201526009602482015268546f6f206c6172676560b81b6044820152fd5b8351630925c89960e31b8152fd5b50903461073657806003193601126107365761190091356118fb60016118e9614cc4565b93838752606560205286200154616001565b616228565b80f35b5050346107225760203660031901126107225760209061093d611334614cae565b50503461072257816003193601126107225760aa5490516001600160a01b039091168152602090f35b5050346107225760203660031901126107225760209181906001600160a01b03611975614cae565b168152609b845220549051908152f35b509190346107225760603660031901126107225760aa548335919060243590604435906001600160a01b03163303611a42576119c460ad548510615306565b82518381018181106001600160401b03821117611a2f577f7543d68ffbde1802767cee31f14403e1b914f7249f14f2724e7398aa10de092395969750845282815260016020820183815287895260b4602052858920925183555191015582519182526020820152a280f35b604188634e487b7160e01b5f525260245ffd5b8251630925c89960e31b81528690fd5b50503461072257816003193601126107225760209060ff60a4541690519015158152f35b50503461072257816003193601126107225761156590611a94615cf8565b905191829182614d1a565b50503461072257816003193601126107225781908260a1545b808210611ac9576020848451908152f35b9092611af9600191611ada86614d5e565b848060a01b0391549060031b1c168752609a6020528487205490614fb2565b930190611ab8565b50346107365760c036600319011261073657611b1b614cae565b611b23614cc4565b611b2b614cda565b916064356001600160a01b0381811691829003610eae5760843594818616809603610eae5760a43594828616809603610eae5789549760ff8960081c16159889809a611e29575b8015611e12575b15611db85760ff1981166001178c5589611da7575b5060ff8b5460081c1615611d5057508290816001600160601b0360a01b96168660aa54161760aa55168460a554161760a555168260a654161760a6558160a754161760a75560a954161760a95580611d31575b5060ac805460ff60a01b19169055815190611bfb82614ef1565b605a8252611c25602092606484820152606e8582015260181960608201526032608082015261651d565b611c578351611c3381614ef1565b60508152605984820152607d8582015260091960608201526028608082015261651d565b611c878351611c6581614ef1565b60468152604f84820152608c85820152856060820152601e608082015261651d565b611cb88351611c9581614ef1565b603c815260458482015260a085820152600f60608201526014608082015261651d565b611ce78351611cc681614ef1565b858152603b8482015260c885820152601e606082015285608082015261651d565b662386f26fc1000060b255611cfa578280f35b7f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989161ff001984541684555160018152a15f808280f35b60ab80546001600160a81b031916909117600160a01b1790555f611be1565b60849060208b519162461bcd60e51b8352820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152fd5b61ffff1916610101178b555f611b8e565b8a5162461bcd60e51b8152602081840152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b158015611b795750600160ff821614611b79565b50600160ff821610611b72565b50503461072257816003193601126107225760a55490516001600160a01b039091168152602090f35b503461073657602036600319011261073657611e79614cae565b60aa546001600160a01b03919082163303611ef15716918215611eae5750506001600160601b0360a01b60a654161760a65580f35b906020606492519162461bcd60e51b8352820152601f60248201527f496e76616c6964206c656e64696e67206d616e616765722061646472657373006044820152fd5b8351630925c89960e31b81528390fd5b50503461072257816003193601126107225760209060a3549051908152f35b503461073657826003193601126107365760aa546001600160a01b03163303611f95575060207f228f455d7bc3d0b24a3a08d7847f391c3e78fc8aeb83acf226b7a96ee162b8ac9160ff60a45461ff00828260081c161560081b169061ff00191617918260a455519160081c1615158152a180f35b9051630925c89960e31b8152fd5b505034610722578160031936011261072257602090517facd38b7c4e04b2b78fc2ca994eae1a3eb206005ffa4c11fcf4a9d81c94684b2d8152f35b5050346107225760203660031901126107225760209181906001600160a01b03612006614cae565b168152609d845220549051908152f35b505034610722578160031936011261072257602090516203f4808152f35b5050346107225781600319360112610722576020905160828152f35b50503461072257816003193601126107225760209060b0549051908152f35b5050346107225781600319360112610722576020905167011c37937e0800008152f35b50503461072257816003193601126107225760209060af549051908152f35b50503461072257816003193601126107225760a95490516001600160a01b039091168152602090f35b5050346107225760203660031901126107225760209181906001600160a01b03612102614cae565b168152609a845220549051908152f35b503461073657602036600319011261073657359160a054831015611410575061213c602092614da7565b905491519160018060a01b039160031b1c168152f35b50346107365760203660031901126107365791819235815260b4602052206001815491015482519182526020820152f35b50503461072257816003193601126107225760209060ff60a45460081c1690519015158152f35b50503461072257816003193601126107225760a85490516001600160a01b039091168152602090f35b505034610722576020366003190112610722576020906121f1614cae565b505160508152f35b50503461072257816003193601126107225760ab5490516001600160a01b039091168152602090f35b503461073657826003193601126107365760aa546001600160a01b03163303611f95575060207f895b395338611f71448ee682a563b0c13233e238236eb6700d45720ec4bf44459160ff60ab548160a01b828260a01c161560a01b16908260a01b191617918260ab55519160a01c1615158152a180f35b50503461072257602036600319011261072257606091906203f480906001600160a01b036122c5614cae565b168352609c6020528060ff818520541693609d6020522054815193151584526020840152820152f35b5034610736578160031936011261073657612307614cae565b60ab54602435926001600160a01b0392918316330361236a5750916020917f4afae6838a181695abc7978598380d73bc2144eb38580c130f86e4b1e6531e15936123546064841115615a3f565b169384865260998352818187205551908152a280f35b606490602086519162461bcd60e51b8352820152601d60248201527f4f6e6c79206372656469742073797374656d2063616e207570646174650000006044820152fd5b82843461141057602036600319011261141057506123d16123cc614cae565b615b14565b90926123ee81519485948552606060208601526060850190614e46565b911515908301520390f35b509034610736578060031936011261073657612413614cae565b6024359160018060a01b03809216938486526020926098845260ff83882054161561262b5784156125f357338752609c845260ff83882054166125bb5790849133885260a28552838820805460ff811615612556575b505083516323b872dd60e01b815233928101928352306020840152604083019390935250909291908290849081906060015b038189895af1801561254c576124f8575b7ff1c0dd7e9b98bbff859029005ef89b127af049cd18df1a8d79f0b7e019911e56925084865260978252808620335f528252805f206124ec858254614fb2565b9055519283523392a380f35b8183813d8311612545575b61250d8183614f84565b810103126108155761253f7ff1c0dd7e9b98bbff859029005ef89b127af049cd18df1a8d79f0b7e019911e5693614fa5565b506124ac565b503d612503565b81513d88823e3d90fd5b60ff1916600117905560a15491925090600160401b8110156125a85784939261249b959261258b8360018a950160a155614d5e565b819291549060031b9133831b921b19161790559194819394612469565b604183634e487b7160e01b5f525260245ffd5b508161080292515f805160206166118339815191523391806125dc816153e3565b0390a25162461bcd60e51b815291829182016153e3565b508161080292515f8051602061661183398151915233918061261481615acc565b0390a25162461bcd60e51b81529182918201615acc565b508161080292515f8051602061661183398151915233918061264c81615388565b0390a25162461bcd60e51b81529182918201615388565b503461073657816003193601126107365761267c614cae565b6024359060a4549361269460ff8660081c1615614fd3565b6126a160ff8616156154dd565b60ff1994851660011760a45582156128de5760018060a01b0382169384875260209260978452828820335f52845284835f20541061289c57338852609a845282882054859291816127c0575b50509280929161273f94878a5260978352838a20335f528352835f20612714838254615014565b9055835163a9059cbb60e01b8152339181019182526020820192909252909485918291604090910190565b03818a895af180156127b657612771575b5f805160206165f18339815191529250519283523392a360a4541660a45580f35b8183813d83116127af575b6127868183614f84565b810103126127ab576127a55f805160206165f183398151915293614fa5565b50612750565b8680fd5b503d61277c565b81513d89823e3d90fd5b612827919293506127ff670de0b6b3a764000091898c5260978852868c20335f5288526127f96127f38a895f2054615014565b91615dbb565b9061503f565b049161280a336155e5565b60646128216128183361546e565b5050339461503f565b046163fc565b116128355783905f806126ed565b82608492519162461bcd60e51b8352820152603b60248201527f5769746864726177616c20776f756c642076696f6c61746520746965722d626160448201527f73656420636f6c6c61746572616c20726571756972656d656e747300000000006064820152fd5b5082606492519162461bcd60e51b8352820152601760248201527f496e73756666696369656e7420636f6c6c61746572616c0000000000000000006044820152fd5b5162461bcd60e51b815280610802818601615acc565b50503461072257816003193601126107225751908152602090f35b50503461072257816003193601126107225760a65490516001600160a01b039091168152602090f35b5050346107225760203660031901126107225760209061093d612959614cae565b615a80565b5050346107225781600319360112610722576020905160058152f35b614cff565b5090346107365760203660031901126107365761299a614cae565b60aa5490926001600160a01b03929091831633036114eb5750508060ab54921691826001600160601b0360a01b82161760ab55167f3637d79e8b0bd63fa3bcc41c2ab614b349b83626b91f73211bc80c6ec5ec4e958380a380f35b509034610736578060031936011261073657612a0f614cae565b60aa5460243592916001600160a01b039182163303612afa5716928315612ab857308414612a7e575081602091612a6a60647f4afae6838a181695abc7978598380d73bc2144eb38580c130f86e4b1e6531e15951115615a3f565b84865260998352818187205551908152a280f35b6020606492519162461bcd60e51b8352820152601560248201527424b73b30b634b21030b2323932b9b99d1039b2b63360591b6044820152fd5b6020606492519162461bcd60e51b8352820152601d60248201527f496e76616c696420616464726573733a207a65726f20616464726573730000006044820152fd5b8251630925c89960e31b81528590fd5b505034610722578160031936011261072257602090517f96737339a958f216173e690d06f324072e6dc3146e04c060bd723906d6b190768152f35b5050346107225760203660031901126107225760209160ff9082906001600160a01b03612b70614cae565b16815260a2855220541690519015158152f35b50913461141057602036600319011261141057612b9e614cae565b612bb0612baa826157d5565b9161546e565b926050808202935081159184041417159050612be9576020945060649004915080821015612be15750905b51908152f35b905090612bdb565b634e487b7160e01b835260118552602483fd5b503461073657816003193601126107365781602093612c19614cc4565b9235815260658552209060018060a01b03165f52825260ff815f20541690519015158152f35b8284346114105760203660031901126114105750612c63612c5e614cae565b6159cf565b825191151582526020820152f35b5050346107225760203660031901126107225760a090612c97612c92614cae565b615926565b93949190928251951515865215156020860152151590840152606083015215156080820152f35b5050346107225781600319360112610722576020905166b1a2bc2ec500008152f35b505034610722578160031936011261072257602090517fce802e42c93d0fbd61dfc706a0e806b78ac046397e07510da2f223464e4788e08152f35b50503461072257816003193601126107225760209060b2549051908152f35b505034610722578160031936011261072257602090517f0e0e24c52bc4f24612e3f568966757426acd82325205933a9270e1ce7c4d93c28152f35b509034610736578060031936011261073657612d8f614cae565b60243592612e0460018060a01b03612dac8160a6541633146158a0565b831694858752612def612dea602095609a87528988812055609b87528988812055609c8752878a2060ff198154169055609d875289888120556155e5565b614ec6565b612dfa828254615014565b905560b054614fb2565b60b055838552609f825260018386200180549160018301809311612e605750915f80516020616631833981519152939160809355600b8251928084528301526a3634b8bab4b230ba34b7b760a91b60608301524290820152a280f35b634e487b7160e01b875260119052602486fd5b5034610736578160031936011261073657612e8c614cae565b91612e95614cc4565b60aa5490936001600160a01b0393909184163303612ee6575082168085526098602052612ec760ff8387205416615789565b8452609e602052832091166001600160601b0360a01b82541617905580f35b8251630925c89960e31b8152fd5b50346107365760203660031901126107365760e09282906001600160a01b03612f1b614cae565b16815260b56020522080549260018201549260028301546003840154918401549260ff600660058701549601541695815197885260208801528601526060850152608084015260a0830152151560c0820152f35b5050346107225760203660031901126107225760209160ff9082906001600160a01b03612f9a614cae565b1681526098855220541690519015158152f35b509034610736576020928360031936011261141057612fca614cae565b9260a354612fdd60af5460b05490615014565b811561311357670de0b6b3a764000090818102918183041490151715613100579061300791615021565b935b60a7548451634fd41dad60e11b8152838101969096528690869060249082906001600160a01b03165afa9485156130f65783956130c5575b5061304b9061546e565b508591508381121561308857613065919293949550615890565b926127109384039284841161087a575050906130809161503f565b049051908152f35b9280841361309a575b50505050612bdb565b9091929394506127109384019283851161087a575050906130ba9161503f565b04905f808080613091565b9094508581813d83116130ef575b6130dd8183614f84565b81010312610eae57519361304b613041565b503d6130d3565b84513d85823e3d90fd5b634e487b7160e01b845260118352602484fd5b50508193613009565b5090346107365760203660031901126107365781359260ad54841015611410575061314860a093614e6b565b508054926001820154926002830154916003840154930154938151958652602086015284015260608301526080820152f35b503461073657602036600319011261073657613194614cae565b60aa5491906001600160a01b039081841633036131fb57169283156131c65750506001600160a01b0319161760aa5580f35b906020606492519162461bcd60e51b8352820152600f60248201526e496e76616c6964206164647265737360881b6044820152fd5b8451630925c89960e31b81528390fd5b509190346107225761321c36614ddc565b505060609160b654603c81018091116133d25761323a904211615519565b8151809160a15480835283602080940160a184527faadc37b8ba5645e62f4546802db221593a94729ccbfc5a97d01365a88f64987892845b868282106133b35750505061328992500384614f84565b613293835161585e565b938193825b815181101561331e576001600160a01b036132b38284615052565b5116808552609c865260ff84862054166132d1575b50600101613298565b609d8652838520546203f480810180911161330b5742106132c85786613304916132fe600194998b615052565b52615066565b95906132c8565b634e487b7160e01b865260118b52602486fd5b50849050858782156133a757506133348261585e565b935b82811061337f575050506115659061335a6133686001948351928391888301614d1a565b03601f198101835282614f84565b905b80805195869515158652850152830190614e46565b6001906001600160a01b036133948285615052565b51166133a08288615052565b5201613336565b9150506115659161336a565b85546001600160a01b0316845260019586019589955093019201613272565b634e487b7160e01b825260118552602482fd5b5050346107225760203660031901126107225760209061093d613406614cae565b6157d5565b50503461072257816003193601126107225760209060ff60ac5460a01c1690519015158152f35b50346107365760203660031901126107365761344c614cf0565b60aa549091906001600160a01b03163303612ee657507f895b395338611f71448ee682a563b0c13233e238236eb6700d45720ec4bf44459160209115159060ab5460ff60a01b8360a01b169060ff60a01b19161760ab5551908152a180f35b5050346107225760203660031901126107225760209181906001600160a01b036134d3614cae565b16815260b1845220549051908152f35b50503461072257602036600319011261072257611565613501614cae565b918060018060a01b03841694858152609a60205261352282822054956157d5565b958152609b60205220549051938493846040919493926060820195825260208201520152565b50503461072257816003193601126107225760209051600a8152f35b50503461072257816003193601126107225760209051603c8152f35b505034610722576020366003190112610722576020916001600160a01b03908290826135aa614cae565b16808252609886526135c160ff8484205416615789565b8152609e85522054169051908152f35b505034610722578160031936011261072257602090516103848152f35b505034610722578160031936011261072257602090516276a7008152f35b50503461072257816003193601126107225751600a47048152602090f35b509034610736578060031936011261073657613644614cae565b906024359182151592838103610eae5760aa546001600160a01b0392908316330361377c57821694858752609860205261368c828589209060ff801983541691151516179055565b60a0549187805b848110613752575b5081613749575b506136d8575b5050507f15f5cc64ca777db85f6c05fdba671568758b38329616d4d4b43bb8b092fe9a8d9160209151908152a280f35b600160401b8210156137365750917f15f5cc64ca777db85f6c05fdba671568758b38329616d4d4b43bb8b092fe9a8d939161371b8460016020960160a055614da7565b819291549060031b9188831b921b19161790559181936136a8565b604190634e487b7160e01b5f525260245ffd5b9050155f6136a2565b888661375d83614da7565b90549060031b1c161461377257600101613693565b505060015f61369b565b8351630925c89960e31b81528690fd5b5050346107225780600319360112610722576020916137a9614cae565b906001600160a01b03908390826137be614cc4565b168152609786522091165f528252805f20549051908152f35b505034610722576020366003190112610722576060906137fd6137f8614cae565b61568c565b919290815193151584526020840152820152f35b5050346107225760203660031901126107225780606092613830614cae565b8183805161383d81614f4e565b828152826020820152015260018060a01b03168152609f6020522090805161386481614f4e565b825492838252826002600183015492602085019384520154920191825282519384525160208401525190820152f35b50919034610722576020366003190112610722576138b76138b2614cae565b6155e5565b90519160058210156138cb57602083838152f35b634e487b7160e01b815260218452602490fd5b50503461072257816003193601126107225760209061093d61556f565b505034610722578160031936011261072257602090517f430b074324c1d9f1ce97c9e9efd8cc6b779c8a501b53808a5cafe19682f95dd58152f35b50346107365761394536614ddc565b60b693919354603c8101809111613adb57613961904211615519565b4260b6558301926020908181860312610815578035906001600160401b0382116127ab57019380601f8601121561081557843561399d81615558565b956139aa85519788614f84565b818752838088019260051b820101928311613ad7578301905b828210613ab857505050845b8451811015613ab4576001600160a01b03806139eb8388615052565b511690818852609c845260ff8589205416613a0b575b50506001016139cf565b609d8452848820546203f4808101809111613aa15790889291421015613a32575b50613a01565b60a65416803b1561073657855163bcebb1d760e01b8152308882019081526001600160a01b039093166020840152918391839182908490829060400103925af18015613a9757613a83575b80613a2c565b613a8c90614f3b565b61081557855f613a7d565b85513d84823e3d90fd5b634e487b7160e01b895260118752602489fd5b8580f35b81356001600160a01b0381168103610eae5781529083019083016139c3565b8780fd5b634e487b7160e01b865260118452602486fd5b50503461072257816003193601126107225780602092338152609a845220549051908152f35b505034610722578160031936011261072257602090517f5fef09193e4e8110de1cc5ba269e889a5fb9093ba33c4df4b67dc2eaa1ca1fff8152f35b50503461072257816003193601126107225760a454905160109190911c6001600160a01b03168152602090f35b505f366003190112610eae5760a45491613b9c60ff8460081c1615614fd3565b613ba960ff8416156154dd565b600160ff198094161760a455335f52602090609a8252805f20548015613ddc573415613daa57803411805f14613da35781945b335f52609a8552835f20613bf1878254615014565b9055613bff8660b054614fb2565b60b055613c0e612dea336155e5565b613c19878254615014565b9055335f52609f85526002845f200180549060018201809211613d9057908994939291558451858152600986820152681c995c185e5b595b9d60ba1b606082015242878201525f8051602061663183398151915260803392a2335f52609c8652845f2088815460ff8116613d7c575b505060a8546001600160a01b0316905080613d08575b5050613cdb575b5050907f0516911bcc3a0a7412a44601057c0a0a1ec628bde049a84284bc42886653448891519283523392a260a4541660a45580f35b8180613ce8819334615014565b818115613cff575b3390f11561072d57845f613ca5565b506108fc613cf0565b8091929394503b15610eae5784516340c10f1960e01b815233928101928352662386f26fc1000088046020840152915f91839182908490829060400103925af18015613d7257613d5d575b9081889392613c9e565b613d6991929750614f3b565b5f95905f613d53565b84513d5f823e3d90fd5b169055609d86525f858120555f8881613c88565b601183634e487b7160e01b5f525260245ffd5b3494613bdc565b505162461bcd60e51b815291820152600d60248201526c09aeae6e840e6cadcc8408aa89609b1b604482015260649150fd5b505162461bcd60e51b815291820152601060248201526f4e6f206465627420746f20726570617960801b604482015260649150fd5b8234610eae575f366003190112610eae5760209060b6549051908152f35b8234610eae576020366003190112610eae57606090613e54613e4f614cae565b61546e565b91929081519384526020840152820152f35b5034610eae576020366003190112610eae57359060a154821015610eae5761213c602092614d5e565b5034610eae5781600319360112610eae57613ea8614cc4565b90336001600160a01b03831603613ec657613ec4925035616228565b005b608490602084519162461bcd60e51b8352820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152fd5b509034610eae576020366003190112610eae5760aa546001600160a01b031633036114eb57503560b255005b8234610eae575f366003190112610eae57602090517ffed613f2d4bec2209ff904769fa3c094c155ec5048c0bb2e17f16e523671ca2c8152f35b509034610eae5780600319360112610eae57613fa1614cae565b6024359160018060a01b039384831694855f526020936098855260ff845f205416156141e257865f5260978552835f20335f52855285845f2054106141aa57335f52609c855260ff845f2054166141895761402190670de0b6b3a764000061401a61401461400e336157d5565b93615dbb565b8961503f565b0490615014565b90606482029180830460641490151715613d9057602490335f52609a865285855f20549160a55416865193848092631ee1b90b60e21b82528c898301525afa90811561417f575f9161414e575b614078925061503f565b11614117579082846140a29493875f5260978352835f20335f528352835f20612714838254615014565b03815f895af1801561410d576140cc575b5f805160206165f18339815191529250519283523392a3005b8183813d8311614106575b6140e18183614f84565b81010312610eae576141005f805160206165f183398151915293614fa5565b506140b3565b503d6140d7565b50513d5f823e3d90fd5b8161080292515f805160206166118339815191523391806141378161541b565b0390a25162461bcd60e51b8152918291820161541b565b90508582813d8311614178575b6141658183614f84565b81010312610eae5761407891519061406e565b503d61415b565b85513d5f823e3d90fd5b610802838580515f805160206166118339815191523391806125dc816153e3565b610802838580515f805160206166118339815191523391806141cb816153b4565b0390a25162461bcd60e51b815291829182016153b4565b610802838580515f8051602061661183398151915233918061264c81615388565b5034610eae576020366003190112610eae5760e091614220614cae565b5f60c0835161422e81614f20565b82815282602082015282858201528260608201528260808201528260a0820152015260018060a01b03165f5260b5602052805f2081519161426e83614f20565b81549384845260018301549160208501928352600284015481860190815260038501549260608701938452850154936080870194855260c060ff600660058901549860a08b01998a5201541697019615158752825197885251602088015251908601525160608501525160808401525160a083015251151560c0820152f35b509034610eae5760c0366003190112610eae5760aa54823592906001600160a01b03163303611f955750614360613ec49261432b60ad548210615306565b82519261433784614ef1565b6024358452604435602085015260643590840152608435606084015260a4356080840152614e6b565b90615341565b5034610eae5781600319360112610eae573590614381614cc4565b90825f5260656020526143996001825f200154616001565b825f526065602052805f209160018060a01b031691825f5260205260ff815f205416156143c257005b825f526065602052805f20825f526020525f20600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d5f80a4005b5034610eae576020366003190112610eae5735906001600160401b0382168203610eae5761093d6020926152b6565b8234610eae575f366003190112610eae57805160a080548083525f918252602080840194927f78fdc8d422c49ced035a9edf18d00d3c6a8d81df210f3e5e448e045e77b41e8892915b82821061449857611565868661155b828b0383614f84565b83546001600160a01b031687529586019560019384019390910190614480565b509034610eae576020366003190112610eae57602091355f52606582526001815f2001549051908152f35b34610eae575f366003190112610eae57613ec4615074565b50905f366003190112610eae5761451a60ff60a45460081c1615614fd3565b335f52602060b58152815f20600681019360ff855416156147d5578082019182549283341061479257600382019182548042106147635762093a80810180911161475057804211614689575b5090600161459d92019461457b818754615014565b8655335f52609a8752614592885f20918254615014565b90555460b054614fb2565b60b05580549062278d008201809211613d905755335f52609f83526002845f2001805491600183018093116146765750907fd3cf6d8c55fed98c7b9f9d18d95a51dbdb316503bb854fc1f676c8974cb10f4f9291558351848152601385820152721a5b9cdd185b1b1b595b9d17dc185e5b595b9d606a1b606082015242848201525f8051602061663183398151915260803392a25492838151933485528401523392a21561464757005b805460ff19169055337f59bd56f70adeefb0cd83dca0f34f066bed6ee442068f3d07b5fc974b944d5aa65f80a2005b601190634e487b7160e01b5f525260245ffd5b614692336155e5565b600581101561473d579160019161459d94935f5260b48952620151806146be848c5f2001549242615014565b0480151580614734575b6146d7575b5050919250614566565b61470161271061016d6146f8878701946146f38654978861503f565b61503f565b04048093614fb2565b905589519081527fce0d6b567089a0bce35e0693cdb625006f0cf915f9f3686bb0343bc2c667c1b2893392a28a806146cd565b508115156146c8565b602186634e487b7160e01b5f525260245ffd5b601185634e487b7160e01b5f525260245ffd5b875162461bcd60e51b81528086018890526009602482015268546f6f206561726c7960b81b6044820152606490fd5b855162461bcd60e51b8152808401869052601860248201527f496e73756666696369656e7420696e7374616c6c6d656e7400000000000000006044820152606490fd5b835162461bcd60e51b8152908101839052600e60248201526d27379030b1ba34bb32903637b0b760911b6044820152606490fd5b8234610eae576020366003190112610eae576020906001600160a01b038061482f614cae565b165f52609e8352815f2054169051908152f35b8234610eae575f366003190112610eae57602090517f8b473ac3e35dc431c1dba0191b7615ccaca6bfeb14f9573dcaae9e614fbe8b208152f35b5034610eae576020366003190112610eae57614896614cae565b60aa546001600160a01b03919082163303611ef157169182156148ec5760b380546001600160a01b03191684179055827f279ea638680bba6a87fddd8bcdbc37d94eee92841e1dfec2ab0f79662c7093115f80a2005b906020606492519162461bcd60e51b8352820152601760248201527f496e76616c6964207265736572766520616464726573730000000000000000006044820152fd5b8234610eae576020366003190112610eae576001600160a01b03614951614cae565b165f52609f602052805f2090611565825491600260018501549401549051938493846040919493926060820195825260208201520152565b509034610eae576020366003190112610eae576149a4614cf0565b60aa549092906001600160a01b03163303611f95577fb01450010edba5be11857fe89630b2ff764d237a9f9f77ab651643effd8699886020838515159060ac5460ff60a01b8360a01b169060ff60a01b19161760ac5551908152a1005b8234610eae575f366003190112610eae5760209051600a8152f35b8234610eae575f366003190112610eae5760209051610e108152f35b8234610eae576020366003190112610eae5760209061093d613406614cae565b509034610eae5780600319360112610eae57614a72614cae565b9160243590335f52602093609c855260ff845f20541615614b545783516323b872dd60e01b815233928101928352306020840152604083018490526001600160a01b039091169185908290819060600103815f865af18015613d7257614b20575b505f5260978352815f20335f528352614af0825f20918254614fb2565b9055614afb336159cf565b50614b0257005b335f908152609c8352818120805460ff19169055609d909252812055005b8481813d8311614b4d575b614b358183614f84565b81010312610eae57614b4690614fa5565b5084614ad3565b503d614b2b565b835162461bcd60e51b8152808301869052601a60248201527f4163636f756e74206e6f7420696e206c69717569646174696f6e0000000000006044820152606490fd5b8234610eae576020366003190112610eae576020906001600160a01b03614bbc614cae565b165f52609c825260ff815f20541690519015158152f35b8234610eae575f366003190112610eae5760ac5490516001600160a01b039091168152602090f35b5034610eae576020366003190112610eae573563ffffffff60e01b8116809103610eae57602091637965db0b60e01b8214918215614c3d575b50519015158152f35b6301ffc9a760e01b14915083614c34565b8234610eae576020366003190112610eae57614c68614cae565b60aa549092906001600160a01b03163303614ca25760a4805462010000600160b01b031916601085901b62010000600160b01b0316179055005b630925c89960e31b8152fd5b600435906001600160a01b0382168203610eae57565b602435906001600160a01b0382168203610eae57565b604435906001600160a01b0382168203610eae57565b600435908115158203610eae57565b34610eae575f366003190112610eae57602047604051908152f35b60209060206040818301928281528551809452019301915f5b828110614d41575050505090565b83516001600160a01b031685529381019392810192600101614d33565b60a154811015614d935760a15f527faadc37b8ba5645e62f4546802db221593a94729ccbfc5a97d01365a88f64987801905f90565b634e487b7160e01b5f52603260045260245ffd5b60a054811015614d935760a05f527f78fdc8d422c49ced035a9edf18d00d3c6a8d81df210f3e5e448e045e77b41e8801905f90565b906020600319830112610eae576004356001600160401b0392838211610eae5780602383011215610eae578160040135938411610eae5760248483010111610eae576024019190565b5f5b838110614e365750505f910152565b8181015183820152602001614e27565b90602091614e5f81518092818552858086019101614e25565b601f01601f1916010190565b60ad54811015614d935760059060ad5f52027f0440fd76b4e685d17019b0eef836cea9994650028b99dddfb48be06fa4240aa601905f90565b34610eae575f366003190112610eae576020604051670de0b6b3a76400008152f35b6005811015614edd575f5260ae60205260405f2090565b634e487b7160e01b5f52602160045260245ffd5b60a081019081106001600160401b03821117614f0c57604052565b634e487b7160e01b5f52604160045260245ffd5b60e081019081106001600160401b03821117614f0c57604052565b6001600160401b038111614f0c57604052565b606081019081106001600160401b03821117614f0c57604052565b604081019081106001600160401b03821117614f0c57604052565b90601f801991011681019081106001600160401b03821117614f0c57604052565b51908115158203610eae57565b91908201809211614fbf57565b634e487b7160e01b5f52601160045260245ffd5b15614fda57565b60405162461bcd60e51b815260206004820152601260248201527110dbdb9d1c9858dd081a5cc81c185d5cd95960721b6044820152606490fd5b91908203918211614fbf57565b811561502b570490565b634e487b7160e01b5f52601260045260245ffd5b81810292918115918404141715614fbf57565b8051821015614d935760209160051b010190565b5f198114614fbf5760010190565b61507c615cf8565b5f5b815181101561511e576001600160a01b038061509a8385615052565b511690815f52602091609e8352604091825f2054166150bf575b50505060010161507e565b6150d66150ce610e1092615e88565b905042615014565b116150e157806150b4565b60a4805461ff00191661010017905551600181527f228f455d7bc3d0b24a3a08d7847f391c3e78fc8aeb83acf226b7a96ee162b8ac9350909150a1565b505060a354801515908161527f575b506151645760a15460a6545f91906001600160a01b03908116835b8381106151ca5750505080151591826151a0575b505061516457565b61010061ff001960a454161760a4557f228f455d7bc3d0b24a3a08d7847f391c3e78fc8aeb83acf226b7a96ee162b8ac602060405160018152a1565b909150606481029080820460641490151715614fbf576005916151c291615021565b115f8061515c565b6151d381614d5e565b905460408051632cf5889360e01b815230600482015260039390931b9190911c85166001600160a01b031660248301529060208082604481885afa92831561527657505f92615240575b505061522c575b600101615148565b93615238600191615066565b949050615224565b90809250813d831161526f575b6152578183614f84565b81010312610eae5761526890614fa5565b5f8061521d565b503d61524d565b513d5f823e3d90fd5b905061529060af5460b05490615014565b606481029080820460641490151715614fbf57605f916152af91615021565b115f61512d565b6001600160401b0380911661012c811115615300576103528110156152f95761012b1901818111614fbf578116606402808216908103614fbf5761022690041690565b5050606490565b50505f90565b1561530d57565b60405162461bcd60e51b815260206004820152600c60248201526b24b73b30b634b2103a34b2b960a11b6044820152606490fd5b9190615375576080816004925184556020810151600185015560408101516002850155606081015160038501550151910155565b634e487b7160e01b5f525f60045260245ffd5b606090602081526011602082015270151bdad95b881b9bdd08185b1b1bddd959607a1b60408201520190565b606090602081526014602082015273496e73756666696369656e742062616c616e636560601b60408201520190565b60609060208152601960208201527f4163636f756e7420697320696e206c69717569646174696f6e0000000000000060408201520190565b60809060208152603260208201527f5769746864726177616c20776f756c64206d616b6520706f736974696f6e20756040820152711b99195c98dbdb1b185d195c985b1a5e995960721b60608201520190565b615477906155e5565b6005811015614edd5761548990614e6b565b50906040519061549882614ef1565b825482526001830154602083015260646154d6608060028601549485604082015260046003880154978860608401520154918291015260a35461503f565b0491929190565b156154e457565b60405162461bcd60e51b815260206004820152600d60248201526c4e6f207265656e7472616e637960981b6044820152606490fd5b1561552057565b60405162461bcd60e51b815260206004820152601060248201526f155c1ad9595c081d1a1c9bdd1d1b195960821b6044820152606490fd5b6001600160401b038111614f0c5760051b60200190565b60a35480156155e0575f905f60a1545b8082106155a7575050606482029180830460641490151715614fbf576155a491615021565b90565b90926155d86001916155b886614d5e565b848060a01b0391549060031b1c165f52609a60205260405f205490614fb2565b93019061557f565b505f90565b6155ee9061629b565b60ad54905f5b8281106156145750505f198101908111614fbf576005811015614edd5790565b61561d81614e6b565b505482101580615643575b615634576001016155f4565b9150506005811015614edd5790565b50600161564f82614e6b565b500154821115615628565b90816060910312610eae5780516001600160401b0381168103610eae5791604061568660208401614fa5565b92015190565b60ac549060ff8260a01c16158015615778575b61576e5760405163d3dd2bdf60e01b81526001600160a01b0391821660048201529160609183916024918391165afa5f91829182918161573a575b506156eb575b5050505f905f905f90565b80615728575b80615712575b61570157806156e0565b61570a906152b6565b916001929190565b506276a7008201808311614fbf574211156156f7565b506001600160401b03811615156156f1565b91509250615760915060603d606011615767575b6157588183614f84565b81019061565a565b925f6156da565b503d61574e565b50505f905f905f90565b506001600160a01b0382161561569f565b1561579057565b60405162461bcd60e51b815260206004820152601f60248201527f546f6b656e206e6f7420616c6c6f77656420617320636f6c6c61746572616c006044820152606490fd5b905f916157e0615cf8565b925f5b8451811015615858576001600160a01b03806157ff8388615052565b511690815f5260209060978252604091825f209187165f52525f2054908161582c575b50506001016157e3565b92670de0b6b3a7640000615849615850936127f960019697615dbb565b0490614fb2565b91905f615822565b50925050565b9061586882615558565b6158756040519182614f84565b8281528092615886601f1991615558565b0190602036910137565b600160ff1b8114614fbf575f0390565b156158a757565b60405162461bcd60e51b815260206004820152601360248201527227b7363c902632b73234b733a6b0b730b3b2b960691b6044820152606490fd5b91908260c0910312610eae576158f782614fa5565b9161590460208201614fa5565b9161591160408301614fa5565b9160608101519160a061568660808401614fa5565b60ab546001600160a01b0390811691908261594a575050505f905f905f905f905f90565b602460c09260405194859384926335856b7f60e11b84521660048301525afa5f91829182918291829181615992575b5061598f5750505050505f905f905f905f905f90565b94565b9350945050506159ba915060c03d60c0116159c8575b6159b28183614f84565b8101906158e2565b50929491939092915f615979565b503d6159a8565b906159d9826157d5565b6001600160a01b0383165f908152609a6020526040902054928315615a33578115615a2957615a079061546e565b50509260648202918204606403614fbf57615a2191615021565b918210159190565b505090505f905f90565b50600192505f19919050565b15615a4657565b60405162461bcd60e51b815260206004820152601260248201527153636f7265206f7574206f662072616e676560701b6044820152606490fd5b6001600160a01b0381165f908152609a6020526040902054908115615ac557615aa8906157d5565b90606482029180830460641490151715614fbf576155a491615021565b50505f1990565b6060906020815260126020820152710416d6f756e74206d757374206265203e20360741b60408201520190565b6001600160401b038111614f0c57601f01601f191660200190565b60ac5460ff8160a01c1680615ce6575b615c07575b5060ab546001600160a01b039190821680615b79575b50165f52609960205260405f205490604051615b5a81614f69565b600d81526c4c4f43414c5f53544f5241474560981b6020820152905f90565b60c0602491604051928380926335856b7f60e11b825287871660048301525afa5f9181615be0575b5015615b3f578015615b3f5791505090604051615bbd81614f69565b6011815270494e54454752415445445f53595354454d60781b6020820152905f90565b615bfa91925060c03d60c0116159c8576159b28183614f84565b505092505050905f615ba1565b60405163d3dd2bdf60e01b81526001600160a01b038381166004830152909160609183916024918391165afa5f91815f915f93615cc1575b50615c4c575b5050615b29565b80615caf575b615c5d575b80615c45565b6276a7008101809111614fbf57421115615c775780615c57565b615c8191506152b6565b90604051615c8e81614f69565b600e81526d149254d0cc17d59154925192515160921b602082015290600190565b506001600160401b0382161515615c52565b91509250615cde915060603d606011615767576157588183614f84565b91925f615c3f565b506001600160a01b0381161515615b24565b60a0545f805b828110615d735750615d0f9061585e565b905f805b828110615d205750505090565b615d2981614da7565b905460039190911b1c6001600160a01b03165f8181526098602052604090205460ff16615d5a575b50600101615d13565b82615d6c916132fe6001949588615052565b9190615d51565b615d7c81614da7565b60018060a01b0391549060031b1c165f52609860205260ff60405f205416615da7575b600101615cfe565b90615db3600191615066565b919050615d9f565b60046020615dc883615e88565b509260018060a01b038091165f52609e825260405f2054166040519283809263313ce56760e01b82525afa8015615e66575f90615e29575b60ff91501660120360ff8111614fbf5760ff1690604d8211614fbf576155a491600a0a9061503f565b506020813d602011615e5e575b81615e4360209383614f84565b81010312610eae575160ff81168103610eae5760ff90615e00565b3d9150615e36565b6040513d5f823e3d90fd5b519069ffffffffffffffffffff82168203610eae57565b9060018060a01b03918281165f52609e602052604092835f2054168015615fc8579260a0600494825195868092633fabe5a360e21b82525afa801561410d575f80935f965f93615f6e575b50615ee7615ee18842615014565b91616542565b10615f3c5769ffffffffffffffffffff809116911610615f0657509190565b5162461bcd60e51b815260206004820152601060248201526f5374616c6520726f756e64206461746160801b6044820152606490fd5b825162461bcd60e51b815260206004820152600b60248201526a5374616c6520707269636560a81b6044820152606490fd5b94509550505060a0823d60a011615fc0575b81615f8d60a09383614f84565b81010312610eae57615f9e82615e71565b936020830151615fb5608060608601519501615e71565b95909395915f615ed3565b3d9150615f80565b835162461bcd60e51b8152602060048201526012602482015271141c9a58d94819995959081b9bdd081cd95d60721b6044820152606490fd5b805f52602060658152604091825f20335f52825260ff835f2054161561602657505050565b3383519161603383614f4e565b602a83528383019085368337835115614d93576030825383519260019360011015614d93576078602186015360295b8481116161e757506161625790855191608083018381106001600160401b03821117614f0c57875260428352858301936060368637835115614d935760308553835160011015614d9357607860218501536041905b8082116161a4575050616162576108029386936161469361613760489461610e9a519a8b957f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008c8801525180926037880190614e25565b8401917001034b99036b4b9b9b4b733903937b6329607d1b603784015251809386840190614e25565b01036028810187520185614f84565b5192839262461bcd60e51b845260048401526024830190614e46565b60648587519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81166010811015614d93576f181899199a1a9b1b9c1cb0b131b232b360811b901a6161d384876165df565b5360041c918015614fbf575f1901906160b7565b90600f81166010811015614d93576f181899199a1a9b1b9c1cb0b131b232b360811b901a61621583886165df565b5360041c908015614fbf575f1901616062565b90815f52606560205260405f209060018060a01b031690815f5260205260ff60405f205416616255575050565b815f52606560205260405f20815f5260205260405f2060ff19815416905533917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b5f80a4565b60ac5460ff8160a01c16806163ea575b616339575b5060ab546001600160a01b0391908216806162d7575b50165f52609960205260405f205490565b60c0602491604051928380926335856b7f60e11b825287871660048301525afa5f9181616312575b50156162c65780156162c6575b91505090565b61632c91925060c03d60c0116159c8576159b28183614f84565b505092505050905f6162ff565b60405163d3dd2bdf60e01b81526001600160a01b038381166004830152909160609183916024918391165afa5f91815f915f936163c5575b5061637e575b50506162b0565b806163b3575b61638f575b80616377565b6276a7008101809111614fbf574211156163a95780616389565b6155a491506152b6565b506001600160401b0382161515616384565b915092506163e2915060603d606011615767576157588183614f84565b91925f616371565b506001600160a01b03811615156162ab565b916164069061629b565b906005811015614edd5761641981614e6b565b5050806164465750605f111561642c5790565b605f810290808204605f1490151715614fbf576064900490565b6001810361647d5750605581106164725750605a810290808204605a1490151715614fbf576064900490565b6052111561642c5790565b600281036164ca5750604b81106164a95750605581029080820460551490151715614fbf576064900490565b6048116155a457605c810290808204605c1490151715614fbf576064900490565b6003146164d5575090565b604181106164f85750605081029080820460501490151715614fbf576064900490565b603e11156165035790565b605a810290808204605a1490151715614fbf576064900490565b60ad5490600160401b821015614f0c57614360826001616540940160ad55614e6b565b565b6001600160a01b039081165f81815260b160205260409020549091908061630c575060209060a5541691602460405180948193631a650cc760e01b835260048301525afa908115615e66575f916165a5575b5061659f5761038490565b610e1090565b90506020813d6020116165d7575b816165c060209383614f84565b81010312610eae576165d190614fa5565b5f616594565b3d91506165b3565b908151811015614d9357016020019056fe45892a46e6cef329bb642da6d69846d324db43d19008edc141ed82382eda1bee3c364b9decdac59fbe037e99687219ac0feed46572bfbcbd5284b6b8e67f402d3f7c433051856ef6c6f502f4e60ac20498082f86a4d68de64f1a2d06924432c4a2646970667358221220d7f8e6d98dbc4ecea374f026b75524eccf7d44f354db06a8ae071d6ca92bb2e764736f6c63430008180033",
-  "deployedBytecode": "0x6080604081815260048036101561002f575b505050361561001e575f80fd5b61002a3460a354614fb2565b60a355005b5f925f3560e01c90816301c76f8114614c4e5750806301ffc9a714614bfb57806303a42b6f14614bd3578063042e02cf14614b97578063080d9c2b14614a585780630835e14514614a385780630b044c7914614a1c5780630ef7fb6714614a015780630f61b81014614989578063100cd71d1461492f57806312065fe01461297a57806314673d311461487c5780631bfe4261146148425780631fd48b9a1461480957806320dfcae1146144fb57806323fe5a33146144e3578063248a9ca3146144b85780632a28ec44146144375780632a7beafe146144085780632f2ff15d1461436657806330332f9f146142ed57806333481fc914614203578063350c35e914613f87578063357619a914613f4d57806335f6798114613f2157806336568abe14613e8f578063365b98b214613e6657806338053ef314613e2f5780633d7c5d3e14613e11578063402d888314613b7c5780634046ebae14613b4f578063418eea3114613b14578063450a375a14613aee5780634585e33b14613936578063488683cd146138fb5780634a417a53146138de5780634c8f35ab146120345780634c95da66146138935780634fb3d3b1146138115780635141df41146137d757806352226ef01461378c57806355f4d9e21461362a578063594ad93f1461360c57806359705bb3146135ee5780635a70348f14612f6f5780635b66e7fc146135d15780635b6cca80146135805780635c44f10d146135645780635c975abb146121835780635f558e5314613548578063613cf420146134e35780636579b73e146134ab57806368272ecc1461343257806369ff0a0d1461340b5780636c648fc4146133e55780636e04ff0d1461320b5780636e9960c314611924578063704b6c021461317a57806370ed11bc1461311c57806372ed9f7b14612fad5780637346f48614612f6f57806373b4086b14612ef457806376e1128614612e7357806378974cbb14612d755780637a8ce68b14612d3a578063802937ac14612d1b57806383475f0c14612ce057806383ae7345146120da57806384bdc9a814612cbe57806386d785e614612c715780638e6b53bc14612c3f57806391d1485414612bfc57806393a517a214612b835780639490a51e14612b45578063962a0da514612b0a578063968ed60014611f0157806397ed81cf146129f55780639ac77e1b1461297f5780639b745aec1461297a5780639b8621d51461295e5780639ce625f7146129385780639e3b77af1461290f578063a217fddf146128f4578063a36e4ad614612663578063a5d5db0c146123f9578063a6f48e5d146123ad578063a75b24c7146122ee578063a787572e14612299578063a814519114612222578063a89ef5ca146121f9578063a8cf4b521461149b578063aca25f9a146121d3578063b0340123146121aa578063b187bd2614612183578063b3075fb714612152578063b3a5a0a214612112578063b69e5c77146120da578063b870676c146120b1578063b8cdf56114612092578063ba1c5e801461206f578063bc3d5a3e14612050578063c129d50414612034578063c1a287e214612016578063c23c69d514611fde578063c39537e114611fa3578063c4ae316814611f20578063c4e41b2214611f01578063c869d0ed14611e5f578063c941f32114611e36578063cc2a9a5b14611b01578063cc484c5c14611a9f578063cf17622514611a76578063cf30901214611a52578063d1f151c114611985578063d29255f91461194d578063d33219b414611924578063d3dd2bdf14611903578063d547741f146118c5578063ddac7f1b1461183c578063e19fb8f51461172b578063e1c5010014611620578063e1f7c2c914611589578063e2842d79146114f8578063e2d74628146114a0578063e6aa216c1461149b578063e6ae357614611460578063e7602b9d14611413578063e84bae45146113df578063e884cf23146113b8578063e9ffb2911461137d578063eb8d655114611342578063ebdcc16414611313578063ec9ab59914610944578063f1c5d6c214610917578063f3fdb15a146108ee578063f79ed94b146108c5578063f7e590ee1461088d578063fbbff3d114610819578063feb50e521461073a5763ffd4aedb036100115734610736576080366003190112610736576106e291610658614cae565b610660614cc4565b92610669614cda565b90606435918760018060a01b0380956106878260a6541633146158a0565b169283825260209788966097885288842091165f528652865f206106ac868254615014565b9055865163a9059cbb60e01b81526001600160a01b03909316908301908152602081019490945290968793849291839160400190565b03925af190811561072d57506106f6578280f35b81813d8311610726575b61070a8183614f84565b810103126107225761071b90614fa5565b505f808280f35b5080fd5b503d610700565b513d85823e3d90fd5b8280fd5b50903461073657806003193601126107365781356024356001600160a01b03818116918290036108155760aa54163303610806578147106107eb578480809381935af13d156107e6573d61078d81615af9565b9061079a84519283614f84565b81528460203d92013e5b156107ad578280f35b906020606492519162461bcd60e51b83528201526013602482015272115512081d1c985b9cd9995c8819985a5b1959606a1b6044820152fd5b6107a4565b825162461bcd60e51b8152806108028187016153b4565b0390fd5b505051630925c89960e31b8152fd5b8580fd5b5082903461072257602036600319011261072257610835614cae565b6001600160a01b0381168352609a602052838320549290610855906157d5565b9160058402938085046005149015171561087a57505060648351920482526020820152f35b634e487b7160e01b825260119052602490fd5b5050346107225760203660031901126107225760209181906001600160a01b036108b5614cae565b1681526099845220549051908152f35b50503461072257816003193601126107225760b35490516001600160a01b039091168152602090f35b50503461072257816003193601126107225760a75490516001600160a01b039091168152602090f35b5050346107225760203660031901126107225760209061093d610938614cae565b615dbb565b9051908152f35b50829082600319360112610722578035602493843560a4549361096d60ff8660081c1615614fd3565b61097a60ff8616156154dd565b600160ff198096161760a455338652602090609a8252838720546112d35760a95484516308b71ed360e21b81528083018590526001600160a01b039182169991929190848183818e5afa90811561125c578a9161129e575b506112665785516345d92d7760e01b81523383820152848183818e5afa90811561125c578a91611227575b50156111ed5789899a3b156111df578990818851809263305ccc3960e01b8252898783015233868301528160449e8f925af180156111e3576111cb575b5050610a453361629b565b91865163a6f48e5d60e01b815233828201528b818481305afa9384156111c1578c918d9561110a575b507f0dda2aa47a3db5dda18a4f06501647c631e2c43e7e7876dbeaf21023b8266fb590895190610aa660609788845288840190614e46565b93898301528a8201528033930390a2610abe336155e5565b91600583101580610e74578284146110d25760a35460011c8a1161107857610ae53361546e565b9150508a1161102957610af73361546e565b5050610b02336157d5565b90606482029180830460641490151715610e2b57610b20908c61503f565b11610fda578c9081968060b35416978c8a8d8b610fae575b505081610b4491615014565b9881158015610f0f575b5050508860a35491610b6560af5460b05490615014565b92859381610ec4575b505060a7541691858d5180948193634fd41dad60e11b83528a8301525afa928315610eb95792610e86575b50610e74576003610ba985614e6b565b500154818e80831215610e3d575050610bc190615890565b9061271091820390828211610e2b5790610bda9161503f565b049a5b600c8a10610ddc575062278d00420190814211610dcb5750938b9493610ca5869594610c8e8b8f8b8f8b9a998b9a918b92600695875197610c1d89614f20565b83895286890190848252808a019283528d8a01938452600c60808b019504855260a08a01966101f4885260b560c08c019960018b52338352522098518955516001890155516002880155516003870155519085015551600584015551151591019060ff801983541691151516179055565b609a89528b8b862055609b8952428b862055614ec6565b610cb08b8254614fb2565b9055610cbe8a60af54614fb2565b60af55338352609f8752888320805415610d8a575b5050818115610d81575b3390f115610d77577f6a0741a9322a7aded3431ce697f586d89a196820acf4bd0430035d7b3dab74c0939495835190868252828201527f5660f932172e1664b98577a703dd9484d374b28e3bf8c87b345bee97af612412843392a282518581527fac59582e5396aca512fa873a2047e7f4c80f8f55d4a06cb34a78a0187f62719f823392a282519485528401523392a260a4541660a45580f35b82513d88823e3d90fd5b506108fc610cdd565b4290556b66697273745f626f72726f7760a01b8951918a8352600c8b84015282015242878201525f8051602061663183398151915260803392a28c80610cd3565b634e487b7160e01b8d52601183528cfd5b6084935060267f4c6f616e20616d6f756e7420746f6f20736d616c6c20666f7220616d6f72746992888b519562461bcd60e51b8752860152840152820152653d30ba34b7b760d11b6064820152fd5b634e487b7160e01b8f5260118552838ffd5b829e93919e13610e4f575b5050610bdd565b90919c5061271091820190818311610e2b5790610e6b9161503f565b049a8d80610e48565b50634e487b7160e01b8c52602182528bfd5b9091508781813d8311610eb2575b610e9e8183614f84565b81010312610eae5751908e610b99565b5f80fd5b503d610e94565b8b51903d90823e3d90fd5b92509250929350670de0b6b3a764000090818102918183041490151715610efc578f939291610ef4908b92615021565b915f80610b6e565b50634e487b7160e01b8f5260118552838ffd5b94808381949596979382948390610fa5575bf115610f995782610f8757908e92918b51908152878a820152600b888201526a37b934b3b4b730ba34b7b760a91b6080820152868c8201527f66aecc579aa1ef463c0ed1547c2cb6163370e6311a60cba815252acbb398f21360a03392a28f8080610b4e565b634e487b7160e01b8f5260218552838ffd5b8e8b51903d90823e3d90fd5b506108fc610f21565b612710919550610b44929350610fcf9060b45f978c8a52528720548461503f565b049190508a8d610b38565b885162461bcd60e51b81528084018890526025818401527f496e73756666696369656e7420636f6c6c61746572616c20666f722074686973818e015264103637b0b760d91b6064820152608490fd5b885162461bcd60e51b81528084018890526025818401527f426f72726f7720616d6f756e74206578636565647320796f7572207469657220818e0152641b1a5b5a5d60da1b6064820152608490fd5b885162461bcd60e51b81528084018890526030818401527f426f72726f7720616d6f756e74206578636565647320617661696c61626c6520818e01526f6c656e64696e6720636170616369747960801b6064820152608490fd5b885162461bcd60e51b8152808401889052601481840152734372656469742073636f726520746f6f206c6f7760601b818e0152606490fd5b915093503d808d833e61111d8183614f84565b8101906060818303126111bd578051878201516001600160401b0381116111b957820183601f820112156111b957805161115681615af9565b946111638d519687614f84565b8186528a82840101116111b5577f0dda2aa47a3db5dda18a4f06501647c631e2c43e7e7876dbeaf21023b8266fb5936111a68d926111ac948d808a019101614e25565b01614fa5565b50919490610a6e565b8f80fd5b8e80fd5b8c80fd5b88513d8e823e3d90fd5b6111d490614f3b565b6111df57898b610a3a565b8980fd5b88513d84823e3d90fd5b855162461bcd60e51b81529182018490526015908201527414d95b1958dd081858d8dbdd5b9d1cc8199a5c9cdd605a1b6044820152606490fd5b90508481813d8311611255575b61123e8183614f84565b810103126111df5761124f90614fa5565b8b6109fd565b503d611234565b87513d8c823e3d90fd5b855162461bcd60e51b81529182018490526013908201527250726f6f6620616c726561647920757365642160681b6044820152606490fd5b90508481813d83116112cc575b6112b58183614f84565b810103126111df576112c690614fa5565b8b6109d2565b503d6112ab565b601e8860649386519362461bcd60e51b85528401528201527f526570617920796f7572206578697374696e67206465627420666972737400006044820152fd5b50503461072257602036600319011261072257602090611339611334614cae565b61629b565b15159051908152f35b505034610722578160031936011261072257602090517f742d8195bebb59905cedb6c02453745e9ef7090c163e7dea727ab0849b3dfc008152f35b505034610722578160031936011261072257602090517fa22cb6bd33c714cffaf72f196d1ebf87829cac5214f3ad84491fa8669ede7a6a8152f35b50503461072257816003193601126107225760209060ff60ab5460a01c1690519015158152f35b503461073657602036600319011261073657359160058310156114105750611408602092614ec6565b549051908152f35b80fd5b505034610722578060031936011261072257602091611430614cae565b82611439614cc4565b6001600160a01b03928316845260978652922091165f908152908352819020549051908152f35b505034610722578160031936011261072257602090517fb438992c2c4c65322b65fd8e2dacea9efd63443e69e5ed52f4a77ed6c78f7c2a8152f35b614ea4565b5034610736576020366003190112610736576114ba614cae565b60aa546001600160a01b039391929190841633036114eb575050166001600160601b0360a01b60a854161760a85580f35b51630925c89960e31b8152fd5b828434611410578060031936011261141057815191829160a15480855260208095019460a183527faadc37b8ba5645e62f4546802db221593a94729ccbfc5a97d01365a88f64987892905b82821061156957611565868661155b828b0383614f84565b5191829182614d1a565b0390f35b83546001600160a01b031687529586019560019384019390910190611543565b509034610736576020366003190112610736576115a4614cae565b60aa5490926001600160a01b03929091831633036114eb5750508060ac54921691826001600160601b0360a01b82161760ac5582611605575b167f7fc5e57c5215ef3b834df4680694bbed4808bf88ddc971b470cb8ef9365e63868380a380f35b6001600160a81b031981168317600160a01b1760ac556115dd565b509034610736576020806003193601126117275761163c614cae565b611645816159cf565b506116ef576001600160a01b0316808552609c82528285205490939060ff166116ae5750828452609c8152818420805460ff19166001179055609d905282204290557f7f62ed89ea2c6fb057e4ea77729c1d3f18056339791fce29ac89760197b45b298280a280f35b915162461bcd60e51b815291820152601b60248201527f4c69717569646174696f6e20616c7265616479207374617274656400000000006044820152606490fd5b50905162461bcd60e51b8152918201526013602482015272506f736974696f6e206973206865616c74687960681b6044820152606490fd5b8380fd5b50903461073657602036600319011261073657813560a4549261175160ff8516156154dd565b60ff1993841660011760a45560a6546001600160a01b031633036117ee574782116117ab575083808080938181156117a2575b3390f115611797575060a4541660a45580f35b51913d9150823e3d90fd5b506108fc611784565b606490602084519162461bcd60e51b8352820152601d60248201527f496e73756666696369656e7420636f6e74726163742062616c616e63650000006044820152fd5b608490602084519162461bcd60e51b8352820152602260248201527f4f6e6c79206c656e64696e67206d616e616765722063616e2063616c6c207468604482015261697360f01b6064820152fd5b509034610736578060031936011261073657611856614cae565b60aa54602435936001600160a01b039291831633036118b757620151808511611888575016835260b160205282205580f35b606490602085519162461bcd60e51b83528201526009602482015268546f6f206c6172676560b81b6044820152fd5b8351630925c89960e31b8152fd5b50903461073657806003193601126107365761190091356118fb60016118e9614cc4565b93838752606560205286200154616001565b616228565b80f35b5050346107225760203660031901126107225760209061093d611334614cae565b50503461072257816003193601126107225760aa5490516001600160a01b039091168152602090f35b5050346107225760203660031901126107225760209181906001600160a01b03611975614cae565b168152609b845220549051908152f35b509190346107225760603660031901126107225760aa548335919060243590604435906001600160a01b03163303611a42576119c460ad548510615306565b82518381018181106001600160401b03821117611a2f577f7543d68ffbde1802767cee31f14403e1b914f7249f14f2724e7398aa10de092395969750845282815260016020820183815287895260b4602052858920925183555191015582519182526020820152a280f35b604188634e487b7160e01b5f525260245ffd5b8251630925c89960e31b81528690fd5b50503461072257816003193601126107225760209060ff60a4541690519015158152f35b50503461072257816003193601126107225761156590611a94615cf8565b905191829182614d1a565b50503461072257816003193601126107225781908260a1545b808210611ac9576020848451908152f35b9092611af9600191611ada86614d5e565b848060a01b0391549060031b1c168752609a6020528487205490614fb2565b930190611ab8565b50346107365760c036600319011261073657611b1b614cae565b611b23614cc4565b611b2b614cda565b916064356001600160a01b0381811691829003610eae5760843594818616809603610eae5760a43594828616809603610eae5789549760ff8960081c16159889809a611e29575b8015611e12575b15611db85760ff1981166001178c5589611da7575b5060ff8b5460081c1615611d5057508290816001600160601b0360a01b96168660aa54161760aa55168460a554161760a555168260a654161760a6558160a754161760a75560a954161760a95580611d31575b5060ac805460ff60a01b19169055815190611bfb82614ef1565b605a8252611c25602092606484820152606e8582015260181960608201526032608082015261651d565b611c578351611c3381614ef1565b60508152605984820152607d8582015260091960608201526028608082015261651d565b611c878351611c6581614ef1565b60468152604f84820152608c85820152856060820152601e608082015261651d565b611cb88351611c9581614ef1565b603c815260458482015260a085820152600f60608201526014608082015261651d565b611ce78351611cc681614ef1565b858152603b8482015260c885820152601e606082015285608082015261651d565b662386f26fc1000060b255611cfa578280f35b7f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989161ff001984541684555160018152a15f808280f35b60ab80546001600160a81b031916909117600160a01b1790555f611be1565b60849060208b519162461bcd60e51b8352820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152fd5b61ffff1916610101178b555f611b8e565b8a5162461bcd60e51b8152602081840152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b158015611b795750600160ff821614611b79565b50600160ff821610611b72565b50503461072257816003193601126107225760a55490516001600160a01b039091168152602090f35b503461073657602036600319011261073657611e79614cae565b60aa546001600160a01b03919082163303611ef15716918215611eae5750506001600160601b0360a01b60a654161760a65580f35b906020606492519162461bcd60e51b8352820152601f60248201527f496e76616c6964206c656e64696e67206d616e616765722061646472657373006044820152fd5b8351630925c89960e31b81528390fd5b50503461072257816003193601126107225760209060a3549051908152f35b503461073657826003193601126107365760aa546001600160a01b03163303611f95575060207f228f455d7bc3d0b24a3a08d7847f391c3e78fc8aeb83acf226b7a96ee162b8ac9160ff60a45461ff00828260081c161560081b169061ff00191617918260a455519160081c1615158152a180f35b9051630925c89960e31b8152fd5b505034610722578160031936011261072257602090517facd38b7c4e04b2b78fc2ca994eae1a3eb206005ffa4c11fcf4a9d81c94684b2d8152f35b5050346107225760203660031901126107225760209181906001600160a01b03612006614cae565b168152609d845220549051908152f35b505034610722578160031936011261072257602090516203f4808152f35b5050346107225781600319360112610722576020905160828152f35b50503461072257816003193601126107225760209060b0549051908152f35b5050346107225781600319360112610722576020905167011c37937e0800008152f35b50503461072257816003193601126107225760209060af549051908152f35b50503461072257816003193601126107225760a95490516001600160a01b039091168152602090f35b5050346107225760203660031901126107225760209181906001600160a01b03612102614cae565b168152609a845220549051908152f35b503461073657602036600319011261073657359160a054831015611410575061213c602092614da7565b905491519160018060a01b039160031b1c168152f35b50346107365760203660031901126107365791819235815260b4602052206001815491015482519182526020820152f35b50503461072257816003193601126107225760209060ff60a45460081c1690519015158152f35b50503461072257816003193601126107225760a85490516001600160a01b039091168152602090f35b505034610722576020366003190112610722576020906121f1614cae565b505160508152f35b50503461072257816003193601126107225760ab5490516001600160a01b039091168152602090f35b503461073657826003193601126107365760aa546001600160a01b03163303611f95575060207f895b395338611f71448ee682a563b0c13233e238236eb6700d45720ec4bf44459160ff60ab548160a01b828260a01c161560a01b16908260a01b191617918260ab55519160a01c1615158152a180f35b50503461072257602036600319011261072257606091906203f480906001600160a01b036122c5614cae565b168352609c6020528060ff818520541693609d6020522054815193151584526020840152820152f35b5034610736578160031936011261073657612307614cae565b60ab54602435926001600160a01b0392918316330361236a5750916020917f4afae6838a181695abc7978598380d73bc2144eb38580c130f86e4b1e6531e15936123546064841115615a3f565b169384865260998352818187205551908152a280f35b606490602086519162461bcd60e51b8352820152601d60248201527f4f6e6c79206372656469742073797374656d2063616e207570646174650000006044820152fd5b82843461141057602036600319011261141057506123d16123cc614cae565b615b14565b90926123ee81519485948552606060208601526060850190614e46565b911515908301520390f35b509034610736578060031936011261073657612413614cae565b6024359160018060a01b03809216938486526020926098845260ff83882054161561262b5784156125f357338752609c845260ff83882054166125bb5790849133885260a28552838820805460ff811615612556575b505083516323b872dd60e01b815233928101928352306020840152604083019390935250909291908290849081906060015b038189895af1801561254c576124f8575b7ff1c0dd7e9b98bbff859029005ef89b127af049cd18df1a8d79f0b7e019911e56925084865260978252808620335f528252805f206124ec858254614fb2565b9055519283523392a380f35b8183813d8311612545575b61250d8183614f84565b810103126108155761253f7ff1c0dd7e9b98bbff859029005ef89b127af049cd18df1a8d79f0b7e019911e5693614fa5565b506124ac565b503d612503565b81513d88823e3d90fd5b60ff1916600117905560a15491925090600160401b8110156125a85784939261249b959261258b8360018a950160a155614d5e565b819291549060031b9133831b921b19161790559194819394612469565b604183634e487b7160e01b5f525260245ffd5b508161080292515f805160206166118339815191523391806125dc816153e3565b0390a25162461bcd60e51b815291829182016153e3565b508161080292515f8051602061661183398151915233918061261481615acc565b0390a25162461bcd60e51b81529182918201615acc565b508161080292515f8051602061661183398151915233918061264c81615388565b0390a25162461bcd60e51b81529182918201615388565b503461073657816003193601126107365761267c614cae565b6024359060a4549361269460ff8660081c1615614fd3565b6126a160ff8616156154dd565b60ff1994851660011760a45582156128de5760018060a01b0382169384875260209260978452828820335f52845284835f20541061289c57338852609a845282882054859291816127c0575b50509280929161273f94878a5260978352838a20335f528352835f20612714838254615014565b9055835163a9059cbb60e01b8152339181019182526020820192909252909485918291604090910190565b03818a895af180156127b657612771575b5f805160206165f18339815191529250519283523392a360a4541660a45580f35b8183813d83116127af575b6127868183614f84565b810103126127ab576127a55f805160206165f183398151915293614fa5565b50612750565b8680fd5b503d61277c565b81513d89823e3d90fd5b612827919293506127ff670de0b6b3a764000091898c5260978852868c20335f5288526127f96127f38a895f2054615014565b91615dbb565b9061503f565b049161280a336155e5565b60646128216128183361546e565b5050339461503f565b046163fc565b116128355783905f806126ed565b82608492519162461bcd60e51b8352820152603b60248201527f5769746864726177616c20776f756c642076696f6c61746520746965722d626160448201527f73656420636f6c6c61746572616c20726571756972656d656e747300000000006064820152fd5b5082606492519162461bcd60e51b8352820152601760248201527f496e73756666696369656e7420636f6c6c61746572616c0000000000000000006044820152fd5b5162461bcd60e51b815280610802818601615acc565b50503461072257816003193601126107225751908152602090f35b50503461072257816003193601126107225760a65490516001600160a01b039091168152602090f35b5050346107225760203660031901126107225760209061093d612959614cae565b615a80565b5050346107225781600319360112610722576020905160058152f35b614cff565b5090346107365760203660031901126107365761299a614cae565b60aa5490926001600160a01b03929091831633036114eb5750508060ab54921691826001600160601b0360a01b82161760ab55167f3637d79e8b0bd63fa3bcc41c2ab614b349b83626b91f73211bc80c6ec5ec4e958380a380f35b509034610736578060031936011261073657612a0f614cae565b60aa5460243592916001600160a01b039182163303612afa5716928315612ab857308414612a7e575081602091612a6a60647f4afae6838a181695abc7978598380d73bc2144eb38580c130f86e4b1e6531e15951115615a3f565b84865260998352818187205551908152a280f35b6020606492519162461bcd60e51b8352820152601560248201527424b73b30b634b21030b2323932b9b99d1039b2b63360591b6044820152fd5b6020606492519162461bcd60e51b8352820152601d60248201527f496e76616c696420616464726573733a207a65726f20616464726573730000006044820152fd5b8251630925c89960e31b81528590fd5b505034610722578160031936011261072257602090517f96737339a958f216173e690d06f324072e6dc3146e04c060bd723906d6b190768152f35b5050346107225760203660031901126107225760209160ff9082906001600160a01b03612b70614cae565b16815260a2855220541690519015158152f35b50913461141057602036600319011261141057612b9e614cae565b612bb0612baa826157d5565b9161546e565b926050808202935081159184041417159050612be9576020945060649004915080821015612be15750905b51908152f35b905090612bdb565b634e487b7160e01b835260118552602483fd5b503461073657816003193601126107365781602093612c19614cc4565b9235815260658552209060018060a01b03165f52825260ff815f20541690519015158152f35b8284346114105760203660031901126114105750612c63612c5e614cae565b6159cf565b825191151582526020820152f35b5050346107225760203660031901126107225760a090612c97612c92614cae565b615926565b93949190928251951515865215156020860152151590840152606083015215156080820152f35b5050346107225781600319360112610722576020905166b1a2bc2ec500008152f35b505034610722578160031936011261072257602090517fce802e42c93d0fbd61dfc706a0e806b78ac046397e07510da2f223464e4788e08152f35b50503461072257816003193601126107225760209060b2549051908152f35b505034610722578160031936011261072257602090517f0e0e24c52bc4f24612e3f568966757426acd82325205933a9270e1ce7c4d93c28152f35b509034610736578060031936011261073657612d8f614cae565b60243592612e0460018060a01b03612dac8160a6541633146158a0565b831694858752612def612dea602095609a87528988812055609b87528988812055609c8752878a2060ff198154169055609d875289888120556155e5565b614ec6565b612dfa828254615014565b905560b054614fb2565b60b055838552609f825260018386200180549160018301809311612e605750915f80516020616631833981519152939160809355600b8251928084528301526a3634b8bab4b230ba34b7b760a91b60608301524290820152a280f35b634e487b7160e01b875260119052602486fd5b5034610736578160031936011261073657612e8c614cae565b91612e95614cc4565b60aa5490936001600160a01b0393909184163303612ee6575082168085526098602052612ec760ff8387205416615789565b8452609e602052832091166001600160601b0360a01b82541617905580f35b8251630925c89960e31b8152fd5b50346107365760203660031901126107365760e09282906001600160a01b03612f1b614cae565b16815260b56020522080549260018201549260028301546003840154918401549260ff600660058701549601541695815197885260208801528601526060850152608084015260a0830152151560c0820152f35b5050346107225760203660031901126107225760209160ff9082906001600160a01b03612f9a614cae565b1681526098855220541690519015158152f35b509034610736576020928360031936011261141057612fca614cae565b9260a354612fdd60af5460b05490615014565b811561311357670de0b6b3a764000090818102918183041490151715613100579061300791615021565b935b60a7548451634fd41dad60e11b8152838101969096528690869060249082906001600160a01b03165afa9485156130f65783956130c5575b5061304b9061546e565b508591508381121561308857613065919293949550615890565b926127109384039284841161087a575050906130809161503f565b049051908152f35b9280841361309a575b50505050612bdb565b9091929394506127109384019283851161087a575050906130ba9161503f565b04905f808080613091565b9094508581813d83116130ef575b6130dd8183614f84565b81010312610eae57519361304b613041565b503d6130d3565b84513d85823e3d90fd5b634e487b7160e01b845260118352602484fd5b50508193613009565b5090346107365760203660031901126107365781359260ad54841015611410575061314860a093614e6b565b508054926001820154926002830154916003840154930154938151958652602086015284015260608301526080820152f35b503461073657602036600319011261073657613194614cae565b60aa5491906001600160a01b039081841633036131fb57169283156131c65750506001600160a01b0319161760aa5580f35b906020606492519162461bcd60e51b8352820152600f60248201526e496e76616c6964206164647265737360881b6044820152fd5b8451630925c89960e31b81528390fd5b509190346107225761321c36614ddc565b505060609160b654603c81018091116133d25761323a904211615519565b8151809160a15480835283602080940160a184527faadc37b8ba5645e62f4546802db221593a94729ccbfc5a97d01365a88f64987892845b868282106133b35750505061328992500384614f84565b613293835161585e565b938193825b815181101561331e576001600160a01b036132b38284615052565b5116808552609c865260ff84862054166132d1575b50600101613298565b609d8652838520546203f480810180911161330b5742106132c85786613304916132fe600194998b615052565b52615066565b95906132c8565b634e487b7160e01b865260118b52602486fd5b50849050858782156133a757506133348261585e565b935b82811061337f575050506115659061335a6133686001948351928391888301614d1a565b03601f198101835282614f84565b905b80805195869515158652850152830190614e46565b6001906001600160a01b036133948285615052565b51166133a08288615052565b5201613336565b9150506115659161336a565b85546001600160a01b0316845260019586019589955093019201613272565b634e487b7160e01b825260118552602482fd5b5050346107225760203660031901126107225760209061093d613406614cae565b6157d5565b50503461072257816003193601126107225760209060ff60ac5460a01c1690519015158152f35b50346107365760203660031901126107365761344c614cf0565b60aa549091906001600160a01b03163303612ee657507f895b395338611f71448ee682a563b0c13233e238236eb6700d45720ec4bf44459160209115159060ab5460ff60a01b8360a01b169060ff60a01b19161760ab5551908152a180f35b5050346107225760203660031901126107225760209181906001600160a01b036134d3614cae565b16815260b1845220549051908152f35b50503461072257602036600319011261072257611565613501614cae565b918060018060a01b03841694858152609a60205261352282822054956157d5565b958152609b60205220549051938493846040919493926060820195825260208201520152565b50503461072257816003193601126107225760209051600a8152f35b50503461072257816003193601126107225760209051603c8152f35b505034610722576020366003190112610722576020916001600160a01b03908290826135aa614cae565b16808252609886526135c160ff8484205416615789565b8152609e85522054169051908152f35b505034610722578160031936011261072257602090516103848152f35b505034610722578160031936011261072257602090516276a7008152f35b50503461072257816003193601126107225751600a47048152602090f35b509034610736578060031936011261073657613644614cae565b906024359182151592838103610eae5760aa546001600160a01b0392908316330361377c57821694858752609860205261368c828589209060ff801983541691151516179055565b60a0549187805b848110613752575b5081613749575b506136d8575b5050507f15f5cc64ca777db85f6c05fdba671568758b38329616d4d4b43bb8b092fe9a8d9160209151908152a280f35b600160401b8210156137365750917f15f5cc64ca777db85f6c05fdba671568758b38329616d4d4b43bb8b092fe9a8d939161371b8460016020960160a055614da7565b819291549060031b9188831b921b19161790559181936136a8565b604190634e487b7160e01b5f525260245ffd5b9050155f6136a2565b888661375d83614da7565b90549060031b1c161461377257600101613693565b505060015f61369b565b8351630925c89960e31b81528690fd5b5050346107225780600319360112610722576020916137a9614cae565b906001600160a01b03908390826137be614cc4565b168152609786522091165f528252805f20549051908152f35b505034610722576020366003190112610722576060906137fd6137f8614cae565b61568c565b919290815193151584526020840152820152f35b5050346107225760203660031901126107225780606092613830614cae565b8183805161383d81614f4e565b828152826020820152015260018060a01b03168152609f6020522090805161386481614f4e565b825492838252826002600183015492602085019384520154920191825282519384525160208401525190820152f35b50919034610722576020366003190112610722576138b76138b2614cae565b6155e5565b90519160058210156138cb57602083838152f35b634e487b7160e01b815260218452602490fd5b50503461072257816003193601126107225760209061093d61556f565b505034610722578160031936011261072257602090517f430b074324c1d9f1ce97c9e9efd8cc6b779c8a501b53808a5cafe19682f95dd58152f35b50346107365761394536614ddc565b60b693919354603c8101809111613adb57613961904211615519565b4260b6558301926020908181860312610815578035906001600160401b0382116127ab57019380601f8601121561081557843561399d81615558565b956139aa85519788614f84565b818752838088019260051b820101928311613ad7578301905b828210613ab857505050845b8451811015613ab4576001600160a01b03806139eb8388615052565b511690818852609c845260ff8589205416613a0b575b50506001016139cf565b609d8452848820546203f4808101809111613aa15790889291421015613a32575b50613a01565b60a65416803b1561073657855163bcebb1d760e01b8152308882019081526001600160a01b039093166020840152918391839182908490829060400103925af18015613a9757613a83575b80613a2c565b613a8c90614f3b565b61081557855f613a7d565b85513d84823e3d90fd5b634e487b7160e01b895260118752602489fd5b8580f35b81356001600160a01b0381168103610eae5781529083019083016139c3565b8780fd5b634e487b7160e01b865260118452602486fd5b50503461072257816003193601126107225780602092338152609a845220549051908152f35b505034610722578160031936011261072257602090517f5fef09193e4e8110de1cc5ba269e889a5fb9093ba33c4df4b67dc2eaa1ca1fff8152f35b50503461072257816003193601126107225760a454905160109190911c6001600160a01b03168152602090f35b505f366003190112610eae5760a45491613b9c60ff8460081c1615614fd3565b613ba960ff8416156154dd565b600160ff198094161760a455335f52602090609a8252805f20548015613ddc573415613daa57803411805f14613da35781945b335f52609a8552835f20613bf1878254615014565b9055613bff8660b054614fb2565b60b055613c0e612dea336155e5565b613c19878254615014565b9055335f52609f85526002845f200180549060018201809211613d9057908994939291558451858152600986820152681c995c185e5b595b9d60ba1b606082015242878201525f8051602061663183398151915260803392a2335f52609c8652845f2088815460ff8116613d7c575b505060a8546001600160a01b0316905080613d08575b5050613cdb575b5050907f0516911bcc3a0a7412a44601057c0a0a1ec628bde049a84284bc42886653448891519283523392a260a4541660a45580f35b8180613ce8819334615014565b818115613cff575b3390f11561072d57845f613ca5565b506108fc613cf0565b8091929394503b15610eae5784516340c10f1960e01b815233928101928352662386f26fc1000088046020840152915f91839182908490829060400103925af18015613d7257613d5d575b9081889392613c9e565b613d6991929750614f3b565b5f95905f613d53565b84513d5f823e3d90fd5b169055609d86525f858120555f8881613c88565b601183634e487b7160e01b5f525260245ffd5b3494613bdc565b505162461bcd60e51b815291820152600d60248201526c09aeae6e840e6cadcc8408aa89609b1b604482015260649150fd5b505162461bcd60e51b815291820152601060248201526f4e6f206465627420746f20726570617960801b604482015260649150fd5b8234610eae575f366003190112610eae5760209060b6549051908152f35b8234610eae576020366003190112610eae57606090613e54613e4f614cae565b61546e565b91929081519384526020840152820152f35b5034610eae576020366003190112610eae57359060a154821015610eae5761213c602092614d5e565b5034610eae5781600319360112610eae57613ea8614cc4565b90336001600160a01b03831603613ec657613ec4925035616228565b005b608490602084519162461bcd60e51b8352820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152fd5b509034610eae576020366003190112610eae5760aa546001600160a01b031633036114eb57503560b255005b8234610eae575f366003190112610eae57602090517ffed613f2d4bec2209ff904769fa3c094c155ec5048c0bb2e17f16e523671ca2c8152f35b509034610eae5780600319360112610eae57613fa1614cae565b6024359160018060a01b039384831694855f526020936098855260ff845f205416156141e257865f5260978552835f20335f52855285845f2054106141aa57335f52609c855260ff845f2054166141895761402190670de0b6b3a764000061401a61401461400e336157d5565b93615dbb565b8961503f565b0490615014565b90606482029180830460641490151715613d9057602490335f52609a865285855f20549160a55416865193848092631ee1b90b60e21b82528c898301525afa90811561417f575f9161414e575b614078925061503f565b11614117579082846140a29493875f5260978352835f20335f528352835f20612714838254615014565b03815f895af1801561410d576140cc575b5f805160206165f18339815191529250519283523392a3005b8183813d8311614106575b6140e18183614f84565b81010312610eae576141005f805160206165f183398151915293614fa5565b506140b3565b503d6140d7565b50513d5f823e3d90fd5b8161080292515f805160206166118339815191523391806141378161541b565b0390a25162461bcd60e51b8152918291820161541b565b90508582813d8311614178575b6141658183614f84565b81010312610eae5761407891519061406e565b503d61415b565b85513d5f823e3d90fd5b610802838580515f805160206166118339815191523391806125dc816153e3565b610802838580515f805160206166118339815191523391806141cb816153b4565b0390a25162461bcd60e51b815291829182016153b4565b610802838580515f8051602061661183398151915233918061264c81615388565b5034610eae576020366003190112610eae5760e091614220614cae565b5f60c0835161422e81614f20565b82815282602082015282858201528260608201528260808201528260a0820152015260018060a01b03165f5260b5602052805f2081519161426e83614f20565b81549384845260018301549160208501928352600284015481860190815260038501549260608701938452850154936080870194855260c060ff600660058901549860a08b01998a5201541697019615158752825197885251602088015251908601525160608501525160808401525160a083015251151560c0820152f35b509034610eae5760c0366003190112610eae5760aa54823592906001600160a01b03163303611f955750614360613ec49261432b60ad548210615306565b82519261433784614ef1565b6024358452604435602085015260643590840152608435606084015260a4356080840152614e6b565b90615341565b5034610eae5781600319360112610eae573590614381614cc4565b90825f5260656020526143996001825f200154616001565b825f526065602052805f209160018060a01b031691825f5260205260ff815f205416156143c257005b825f526065602052805f20825f526020525f20600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d5f80a4005b5034610eae576020366003190112610eae5735906001600160401b0382168203610eae5761093d6020926152b6565b8234610eae575f366003190112610eae57805160a080548083525f918252602080840194927f78fdc8d422c49ced035a9edf18d00d3c6a8d81df210f3e5e448e045e77b41e8892915b82821061449857611565868661155b828b0383614f84565b83546001600160a01b031687529586019560019384019390910190614480565b509034610eae576020366003190112610eae57602091355f52606582526001815f2001549051908152f35b34610eae575f366003190112610eae57613ec4615074565b50905f366003190112610eae5761451a60ff60a45460081c1615614fd3565b335f52602060b58152815f20600681019360ff855416156147d5578082019182549283341061479257600382019182548042106147635762093a80810180911161475057804211614689575b5090600161459d92019461457b818754615014565b8655335f52609a8752614592885f20918254615014565b90555460b054614fb2565b60b05580549062278d008201809211613d905755335f52609f83526002845f2001805491600183018093116146765750907fd3cf6d8c55fed98c7b9f9d18d95a51dbdb316503bb854fc1f676c8974cb10f4f9291558351848152601385820152721a5b9cdd185b1b1b595b9d17dc185e5b595b9d606a1b606082015242848201525f8051602061663183398151915260803392a25492838151933485528401523392a21561464757005b805460ff19169055337f59bd56f70adeefb0cd83dca0f34f066bed6ee442068f3d07b5fc974b944d5aa65f80a2005b601190634e487b7160e01b5f525260245ffd5b614692336155e5565b600581101561473d579160019161459d94935f5260b48952620151806146be848c5f2001549242615014565b0480151580614734575b6146d7575b5050919250614566565b61470161271061016d6146f8878701946146f38654978861503f565b61503f565b04048093614fb2565b905589519081527fce0d6b567089a0bce35e0693cdb625006f0cf915f9f3686bb0343bc2c667c1b2893392a28a806146cd565b508115156146c8565b602186634e487b7160e01b5f525260245ffd5b601185634e487b7160e01b5f525260245ffd5b875162461bcd60e51b81528086018890526009602482015268546f6f206561726c7960b81b6044820152606490fd5b855162461bcd60e51b8152808401869052601860248201527f496e73756666696369656e7420696e7374616c6c6d656e7400000000000000006044820152606490fd5b835162461bcd60e51b8152908101839052600e60248201526d27379030b1ba34bb32903637b0b760911b6044820152606490fd5b8234610eae576020366003190112610eae576020906001600160a01b038061482f614cae565b165f52609e8352815f2054169051908152f35b8234610eae575f366003190112610eae57602090517f8b473ac3e35dc431c1dba0191b7615ccaca6bfeb14f9573dcaae9e614fbe8b208152f35b5034610eae576020366003190112610eae57614896614cae565b60aa546001600160a01b03919082163303611ef157169182156148ec5760b380546001600160a01b03191684179055827f279ea638680bba6a87fddd8bcdbc37d94eee92841e1dfec2ab0f79662c7093115f80a2005b906020606492519162461bcd60e51b8352820152601760248201527f496e76616c6964207265736572766520616464726573730000000000000000006044820152fd5b8234610eae576020366003190112610eae576001600160a01b03614951614cae565b165f52609f602052805f2090611565825491600260018501549401549051938493846040919493926060820195825260208201520152565b509034610eae576020366003190112610eae576149a4614cf0565b60aa549092906001600160a01b03163303611f95577fb01450010edba5be11857fe89630b2ff764d237a9f9f77ab651643effd8699886020838515159060ac5460ff60a01b8360a01b169060ff60a01b19161760ac5551908152a1005b8234610eae575f366003190112610eae5760209051600a8152f35b8234610eae575f366003190112610eae5760209051610e108152f35b8234610eae576020366003190112610eae5760209061093d613406614cae565b509034610eae5780600319360112610eae57614a72614cae565b9160243590335f52602093609c855260ff845f20541615614b545783516323b872dd60e01b815233928101928352306020840152604083018490526001600160a01b039091169185908290819060600103815f865af18015613d7257614b20575b505f5260978352815f20335f528352614af0825f20918254614fb2565b9055614afb336159cf565b50614b0257005b335f908152609c8352818120805460ff19169055609d909252812055005b8481813d8311614b4d575b614b358183614f84565b81010312610eae57614b4690614fa5565b5084614ad3565b503d614b2b565b835162461bcd60e51b8152808301869052601a60248201527f4163636f756e74206e6f7420696e206c69717569646174696f6e0000000000006044820152606490fd5b8234610eae576020366003190112610eae576020906001600160a01b03614bbc614cae565b165f52609c825260ff815f20541690519015158152f35b8234610eae575f366003190112610eae5760ac5490516001600160a01b039091168152602090f35b5034610eae576020366003190112610eae573563ffffffff60e01b8116809103610eae57602091637965db0b60e01b8214918215614c3d575b50519015158152f35b6301ffc9a760e01b14915083614c34565b8234610eae576020366003190112610eae57614c68614cae565b60aa549092906001600160a01b03163303614ca25760a4805462010000600160b01b031916601085901b62010000600160b01b0316179055005b630925c89960e31b8152fd5b600435906001600160a01b0382168203610eae57565b602435906001600160a01b0382168203610eae57565b604435906001600160a01b0382168203610eae57565b600435908115158203610eae57565b34610eae575f366003190112610eae57602047604051908152f35b60209060206040818301928281528551809452019301915f5b828110614d41575050505090565b83516001600160a01b031685529381019392810192600101614d33565b60a154811015614d935760a15f527faadc37b8ba5645e62f4546802db221593a94729ccbfc5a97d01365a88f64987801905f90565b634e487b7160e01b5f52603260045260245ffd5b60a054811015614d935760a05f527f78fdc8d422c49ced035a9edf18d00d3c6a8d81df210f3e5e448e045e77b41e8801905f90565b906020600319830112610eae576004356001600160401b0392838211610eae5780602383011215610eae578160040135938411610eae5760248483010111610eae576024019190565b5f5b838110614e365750505f910152565b8181015183820152602001614e27565b90602091614e5f81518092818552858086019101614e25565b601f01601f1916010190565b60ad54811015614d935760059060ad5f52027f0440fd76b4e685d17019b0eef836cea9994650028b99dddfb48be06fa4240aa601905f90565b34610eae575f366003190112610eae576020604051670de0b6b3a76400008152f35b6005811015614edd575f5260ae60205260405f2090565b634e487b7160e01b5f52602160045260245ffd5b60a081019081106001600160401b03821117614f0c57604052565b634e487b7160e01b5f52604160045260245ffd5b60e081019081106001600160401b03821117614f0c57604052565b6001600160401b038111614f0c57604052565b606081019081106001600160401b03821117614f0c57604052565b604081019081106001600160401b03821117614f0c57604052565b90601f801991011681019081106001600160401b03821117614f0c57604052565b51908115158203610eae57565b91908201809211614fbf57565b634e487b7160e01b5f52601160045260245ffd5b15614fda57565b60405162461bcd60e51b815260206004820152601260248201527110dbdb9d1c9858dd081a5cc81c185d5cd95960721b6044820152606490fd5b91908203918211614fbf57565b811561502b570490565b634e487b7160e01b5f52601260045260245ffd5b81810292918115918404141715614fbf57565b8051821015614d935760209160051b010190565b5f198114614fbf5760010190565b61507c615cf8565b5f5b815181101561511e576001600160a01b038061509a8385615052565b511690815f52602091609e8352604091825f2054166150bf575b50505060010161507e565b6150d66150ce610e1092615e88565b905042615014565b116150e157806150b4565b60a4805461ff00191661010017905551600181527f228f455d7bc3d0b24a3a08d7847f391c3e78fc8aeb83acf226b7a96ee162b8ac9350909150a1565b505060a354801515908161527f575b506151645760a15460a6545f91906001600160a01b03908116835b8381106151ca5750505080151591826151a0575b505061516457565b61010061ff001960a454161760a4557f228f455d7bc3d0b24a3a08d7847f391c3e78fc8aeb83acf226b7a96ee162b8ac602060405160018152a1565b909150606481029080820460641490151715614fbf576005916151c291615021565b115f8061515c565b6151d381614d5e565b905460408051632cf5889360e01b815230600482015260039390931b9190911c85166001600160a01b031660248301529060208082604481885afa92831561527657505f92615240575b505061522c575b600101615148565b93615238600191615066565b949050615224565b90809250813d831161526f575b6152578183614f84565b81010312610eae5761526890614fa5565b5f8061521d565b503d61524d565b513d5f823e3d90fd5b905061529060af5460b05490615014565b606481029080820460641490151715614fbf57605f916152af91615021565b115f61512d565b6001600160401b0380911661012c811115615300576103528110156152f95761012b1901818111614fbf578116606402808216908103614fbf5761022690041690565b5050606490565b50505f90565b1561530d57565b60405162461bcd60e51b815260206004820152600c60248201526b24b73b30b634b2103a34b2b960a11b6044820152606490fd5b9190615375576080816004925184556020810151600185015560408101516002850155606081015160038501550151910155565b634e487b7160e01b5f525f60045260245ffd5b606090602081526011602082015270151bdad95b881b9bdd08185b1b1bddd959607a1b60408201520190565b606090602081526014602082015273496e73756666696369656e742062616c616e636560601b60408201520190565b60609060208152601960208201527f4163636f756e7420697320696e206c69717569646174696f6e0000000000000060408201520190565b60809060208152603260208201527f5769746864726177616c20776f756c64206d616b6520706f736974696f6e20756040820152711b99195c98dbdb1b185d195c985b1a5e995960721b60608201520190565b615477906155e5565b6005811015614edd5761548990614e6b565b50906040519061549882614ef1565b825482526001830154602083015260646154d6608060028601549485604082015260046003880154978860608401520154918291015260a35461503f565b0491929190565b156154e457565b60405162461bcd60e51b815260206004820152600d60248201526c4e6f207265656e7472616e637960981b6044820152606490fd5b1561552057565b60405162461bcd60e51b815260206004820152601060248201526f155c1ad9595c081d1a1c9bdd1d1b195960821b6044820152606490fd5b6001600160401b038111614f0c5760051b60200190565b60a35480156155e0575f905f60a1545b8082106155a7575050606482029180830460641490151715614fbf576155a491615021565b90565b90926155d86001916155b886614d5e565b848060a01b0391549060031b1c165f52609a60205260405f205490614fb2565b93019061557f565b505f90565b6155ee9061629b565b60ad54905f5b8281106156145750505f198101908111614fbf576005811015614edd5790565b61561d81614e6b565b505482101580615643575b615634576001016155f4565b9150506005811015614edd5790565b50600161564f82614e6b565b500154821115615628565b90816060910312610eae5780516001600160401b0381168103610eae5791604061568660208401614fa5565b92015190565b60ac549060ff8260a01c16158015615778575b61576e5760405163d3dd2bdf60e01b81526001600160a01b0391821660048201529160609183916024918391165afa5f91829182918161573a575b506156eb575b5050505f905f905f90565b80615728575b80615712575b61570157806156e0565b61570a906152b6565b916001929190565b506276a7008201808311614fbf574211156156f7565b506001600160401b03811615156156f1565b91509250615760915060603d606011615767575b6157588183614f84565b81019061565a565b925f6156da565b503d61574e565b50505f905f905f90565b506001600160a01b0382161561569f565b1561579057565b60405162461bcd60e51b815260206004820152601f60248201527f546f6b656e206e6f7420616c6c6f77656420617320636f6c6c61746572616c006044820152606490fd5b905f916157e0615cf8565b925f5b8451811015615858576001600160a01b03806157ff8388615052565b511690815f5260209060978252604091825f209187165f52525f2054908161582c575b50506001016157e3565b92670de0b6b3a7640000615849615850936127f960019697615dbb565b0490614fb2565b91905f615822565b50925050565b9061586882615558565b6158756040519182614f84565b8281528092615886601f1991615558565b0190602036910137565b600160ff1b8114614fbf575f0390565b156158a757565b60405162461bcd60e51b815260206004820152601360248201527227b7363c902632b73234b733a6b0b730b3b2b960691b6044820152606490fd5b91908260c0910312610eae576158f782614fa5565b9161590460208201614fa5565b9161591160408301614fa5565b9160608101519160a061568660808401614fa5565b60ab546001600160a01b0390811691908261594a575050505f905f905f905f905f90565b602460c09260405194859384926335856b7f60e11b84521660048301525afa5f91829182918291829181615992575b5061598f5750505050505f905f905f905f905f90565b94565b9350945050506159ba915060c03d60c0116159c8575b6159b28183614f84565b8101906158e2565b50929491939092915f615979565b503d6159a8565b906159d9826157d5565b6001600160a01b0383165f908152609a6020526040902054928315615a33578115615a2957615a079061546e565b50509260648202918204606403614fbf57615a2191615021565b918210159190565b505090505f905f90565b50600192505f19919050565b15615a4657565b60405162461bcd60e51b815260206004820152601260248201527153636f7265206f7574206f662072616e676560701b6044820152606490fd5b6001600160a01b0381165f908152609a6020526040902054908115615ac557615aa8906157d5565b90606482029180830460641490151715614fbf576155a491615021565b50505f1990565b6060906020815260126020820152710416d6f756e74206d757374206265203e20360741b60408201520190565b6001600160401b038111614f0c57601f01601f191660200190565b60ac5460ff8160a01c1680615ce6575b615c07575b5060ab546001600160a01b039190821680615b79575b50165f52609960205260405f205490604051615b5a81614f69565b600d81526c4c4f43414c5f53544f5241474560981b6020820152905f90565b60c0602491604051928380926335856b7f60e11b825287871660048301525afa5f9181615be0575b5015615b3f578015615b3f5791505090604051615bbd81614f69565b6011815270494e54454752415445445f53595354454d60781b6020820152905f90565b615bfa91925060c03d60c0116159c8576159b28183614f84565b505092505050905f615ba1565b60405163d3dd2bdf60e01b81526001600160a01b038381166004830152909160609183916024918391165afa5f91815f915f93615cc1575b50615c4c575b5050615b29565b80615caf575b615c5d575b80615c45565b6276a7008101809111614fbf57421115615c775780615c57565b615c8191506152b6565b90604051615c8e81614f69565b600e81526d149254d0cc17d59154925192515160921b602082015290600190565b506001600160401b0382161515615c52565b91509250615cde915060603d606011615767576157588183614f84565b91925f615c3f565b506001600160a01b0381161515615b24565b60a0545f805b828110615d735750615d0f9061585e565b905f805b828110615d205750505090565b615d2981614da7565b905460039190911b1c6001600160a01b03165f8181526098602052604090205460ff16615d5a575b50600101615d13565b82615d6c916132fe6001949588615052565b9190615d51565b615d7c81614da7565b60018060a01b0391549060031b1c165f52609860205260ff60405f205416615da7575b600101615cfe565b90615db3600191615066565b919050615d9f565b60046020615dc883615e88565b509260018060a01b038091165f52609e825260405f2054166040519283809263313ce56760e01b82525afa8015615e66575f90615e29575b60ff91501660120360ff8111614fbf5760ff1690604d8211614fbf576155a491600a0a9061503f565b506020813d602011615e5e575b81615e4360209383614f84565b81010312610eae575160ff81168103610eae5760ff90615e00565b3d9150615e36565b6040513d5f823e3d90fd5b519069ffffffffffffffffffff82168203610eae57565b9060018060a01b03918281165f52609e602052604092835f2054168015615fc8579260a0600494825195868092633fabe5a360e21b82525afa801561410d575f80935f965f93615f6e575b50615ee7615ee18842615014565b91616542565b10615f3c5769ffffffffffffffffffff809116911610615f0657509190565b5162461bcd60e51b815260206004820152601060248201526f5374616c6520726f756e64206461746160801b6044820152606490fd5b825162461bcd60e51b815260206004820152600b60248201526a5374616c6520707269636560a81b6044820152606490fd5b94509550505060a0823d60a011615fc0575b81615f8d60a09383614f84565b81010312610eae57615f9e82615e71565b936020830151615fb5608060608601519501615e71565b95909395915f615ed3565b3d9150615f80565b835162461bcd60e51b8152602060048201526012602482015271141c9a58d94819995959081b9bdd081cd95d60721b6044820152606490fd5b805f52602060658152604091825f20335f52825260ff835f2054161561602657505050565b3383519161603383614f4e565b602a83528383019085368337835115614d93576030825383519260019360011015614d93576078602186015360295b8481116161e757506161625790855191608083018381106001600160401b03821117614f0c57875260428352858301936060368637835115614d935760308553835160011015614d9357607860218501536041905b8082116161a4575050616162576108029386936161469361613760489461610e9a519a8b957f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008c8801525180926037880190614e25565b8401917001034b99036b4b9b9b4b733903937b6329607d1b603784015251809386840190614e25565b01036028810187520185614f84565b5192839262461bcd60e51b845260048401526024830190614e46565b60648587519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81166010811015614d93576f181899199a1a9b1b9c1cb0b131b232b360811b901a6161d384876165df565b5360041c918015614fbf575f1901906160b7565b90600f81166010811015614d93576f181899199a1a9b1b9c1cb0b131b232b360811b901a61621583886165df565b5360041c908015614fbf575f1901616062565b90815f52606560205260405f209060018060a01b031690815f5260205260ff60405f205416616255575050565b815f52606560205260405f20815f5260205260405f2060ff19815416905533917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b5f80a4565b60ac5460ff8160a01c16806163ea575b616339575b5060ab546001600160a01b0391908216806162d7575b50165f52609960205260405f205490565b60c0602491604051928380926335856b7f60e11b825287871660048301525afa5f9181616312575b50156162c65780156162c6575b91505090565b61632c91925060c03d60c0116159c8576159b28183614f84565b505092505050905f6162ff565b60405163d3dd2bdf60e01b81526001600160a01b038381166004830152909160609183916024918391165afa5f91815f915f936163c5575b5061637e575b50506162b0565b806163b3575b61638f575b80616377565b6276a7008101809111614fbf574211156163a95780616389565b6155a491506152b6565b506001600160401b0382161515616384565b915092506163e2915060603d606011615767576157588183614f84565b91925f616371565b506001600160a01b03811615156162ab565b916164069061629b565b906005811015614edd5761641981614e6b565b5050806164465750605f111561642c5790565b605f810290808204605f1490151715614fbf576064900490565b6001810361647d5750605581106164725750605a810290808204605a1490151715614fbf576064900490565b6052111561642c5790565b600281036164ca5750604b81106164a95750605581029080820460551490151715614fbf576064900490565b6048116155a457605c810290808204605c1490151715614fbf576064900490565b6003146164d5575090565b604181106164f85750605081029080820460501490151715614fbf576064900490565b603e11156165035790565b605a810290808204605a1490151715614fbf576064900490565b60ad5490600160401b821015614f0c57614360826001616540940160ad55614e6b565b565b6001600160a01b039081165f81815260b160205260409020549091908061630c575060209060a5541691602460405180948193631a650cc760e01b835260048301525afa908115615e66575f916165a5575b5061659f5761038490565b610e1090565b90506020813d6020116165d7575b816165c060209383614f84565b81010312610eae576165d190614fa5565b5f616594565b3d91506165b3565b908151811015614d9357016020019056fe45892a46e6cef329bb642da6d69846d324db43d19008edc141ed82382eda1bee3c364b9decdac59fbe037e99687219ac0feed46572bfbcbd5284b6b8e67f402d3f7c433051856ef6c6f502f4e60ac20498082f86a4d68de64f1a2d06924432c4a2646970667358221220d7f8e6d98dbc4ecea374f026b75524eccf7d44f354db06a8ae071d6ca92bb2e764736f6c63430008180033",
+  "bytecode": "0x6080806040523461001757615f0490816200001c8239f35b5f80fdfe6080604081815260048036101561002f575b505050361561001e575f80fd5b61002a3460a254614a24565b60a255005b5f925f3560e01c90816301c76f81146146a65750806301ffc9a71461465357806303a42b6f1461462b578063042e02cf146145ef57806305510b911461451d578063080d9c2b146143de5780630835e145146143be5780630b044c79146143a25780630ef7fb67146143875780630f61b8101461430f57806312065fe0146125c157806314673d311461425c5780631bfe4261146142225780631fd48b9a146141e957806320dfcae114613f3857806323fe5a3314613f20578063248a9ca314613ef55780632a28ec4414613e745780632a7beafe14613e455780632f2ff15d14613da357806330332f9f14613d2a57806333481fc914613c40578063350c35e9146139b1578063357619a91461397757806335f679811461394b57806336568abe146138b9578063365b98b21461389057806338053ef3146138585780633d7c5d3e1461383a578063402d88831461360a5780634046ebae146135dd578063418eea31146135a2578063450a375a1461357c5780634585e33b146133c4578063488683cd146133895780634a417a531461336c5780634c8f35ab14611e415780634c95da661461333a5780635141df411461330057806352226ef0146132b557806355f4d9e214613153578063594ad93f1461313557806359705bb3146131175780635a70348f14612af25780635b66e7fc146130fa5780635b6cca80146130a95780635c44f10d1461308d5780635c975abb14611f675780635f558e5314613071578063613cf420146130185780636579b73e14612fe057806369ff0a0d14612fb95780636c648fc414612f935780636e04ff0d14612db95780636e9960c314611428578063704b6c0214612d2857806370ed11bc14612cca57806372ed9f7b14612b305780637346f48614612af257806373b4086b14612a7757806376e11286146129f657806378974cbb1461295f5780637a8ce68b14612924578063802937ac1461290557806383475f0c146128ca57806383ae734514611ebe57806384bdc9a8146128a85780638e6b53bc1461287657806391d148541461283357806393a517a2146127b45780639490a51e1461277657806395eb0d1514612748578063962a0da51461270d578063968ed60014611d0e57806397ed81cf146125c65780639b745aec146125c15780639b8621d5146125a55780639ce625f71461257f5780639e3b77af14612556578063a217fddf1461253b578063a36e4ad61461229c578063a5d5db0c14612032578063a787572e14611fdd578063a8cf4b5214610fa3578063aca25f9a14611fb7578063b034012314611f8e578063b187bd2614611f67578063b3075fb714611f36578063b3a5a0a214611ef6578063b69e5c7714611ebe578063b8cdf56114611e9f578063ba1c5e8014611e7c578063bc3d5a3e14611e5d578063c129d50414611e41578063c1a287e214611e23578063c23c69d514611deb578063c39537e114611db0578063c4ae316814611d2d578063c4e41b2214611d0e578063c5ebeaec146116d0578063c869d0ed1461162e578063c941f32114611605578063cc484c5c146115a3578063cf1762251461157a578063cf30901214611556578063d1f151c114611489578063d29255f914611451578063d33219b414611428578063d3dd2bdf14611407578063d547741f146113c9578063ddac7f1b14611340578063e19fb8f51461122f578063e1c5010014611128578063e1f7c2c914611091578063e2842d7914611000578063e2d7462814610fa8578063e6aa216c14610fa3578063e6ae357614610f68578063e7602b9d14610f1b578063e84bae4514610eea578063e8a7da8e14610ca5578063e9ffb29114610c6a578063eb8d655114610c2f578063ebdcc16414610c00578063f1c5d6c214610bd3578063f3fdb15a14610baa578063f79ed94b14610b81578063f7e590ee14610b49578063f8c8765e14610857578063fbbff3d1146107e3578063feb50e52146106e25763ffd4aedb0361001157346106de5760803660031901126106de5761068a91610600614706565b61060861471c565b92610611614732565b90606435918760018060a01b03809561062f8260a5541633146151dc565b169283825260209788966097885288842091165f528652865f2061065486825461498c565b9055865163a9059cbb60e01b81526001600160a01b03909316908301908152602081019490945290968793849291839160400190565b03925af19081156106d5575061069e578280f35b81813d83116106ce575b6106b281836149f6565b810103126106ca576106c390614a17565b505f808280f35b5080fd5b503d6106a8565b513d85823e3d90fd5b8280fd5b5090346106de57806003193601126106de5781356024356001600160a01b03818116918290036107df5760a8541633036107d0578147106107b5578480809381935af13d156107b0573d6001600160401b03811161079d57825190610751601f8201601f1916602001836149f6565b81528460203d92013e5b15610764578280f35b906020606492519162461bcd60e51b83528201526013602482015272115512081d1c985b9cd9995c8819985a5b1959606a1b6044820152fd5b604184634e487b7160e01b5f525260245ffd5b61075b565b825162461bcd60e51b8152806107cc818701614dd4565b0390fd5b505051630925c89960e31b8152fd5b8580fd5b508290346106ca5760203660031901126106ca576107ff614706565b6001600160a01b0381168352609a60205283832054929061081f90615111565b9160058402938085046005149015171561084457505060648351920482526020820152f35b634e487b7160e01b825260119052602490fd5b50346106de5760809081600319360112610b4557610873614706565b61087b61471c565b90610884614732565b6064356001600160a01b0381811694909291859003610b415788549560ff8760081c161596878098610b34575b8015610b1d575b15610ac35760ff1981166001178b5587610ab2575b5060ff8a5460081c1615610a5b57508290816001600160601b0360a01b95168560a854161760a855168360a454161760a455168160a554161760a55560a654161760a65560ff60a01b1960a9541660a955610a1183519261092d84614999565b605a8452610956602094606486820152606e878201526018196060820152603283820152615db5565b610987855161096481614999565b60508152605986820152607d878201526009196060820152602883820152615db5565b6109b6855161099581614999565b60468152604f86820152608c87820152876060820152601e83820152615db5565b6109e685516109c481614999565b603c815260458682015260a087820152600f6060820152601483820152615db5565b858551916109f383614999565b818352603b8684015260c887840152601e6060840152820152615db5565b662386f26fc1000060af55610a24578280f35b7f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989161ff001984541684555160018152a15f808280f35b60849060208a519162461bcd60e51b8352820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152fd5b61ffff1916610101178a555f6108cd565b895162461bcd60e51b8152602081840152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156108b85750600160ff8216146108b8565b50600160ff8216106108b1565b5f80fd5b8380fd5b5050346106ca5760203660031901126106ca5760209181906001600160a01b03610b71614706565b1681526099845220549051908152f35b5050346106ca57816003193601126106ca5760b05490516001600160a01b039091168152602090f35b5050346106ca57816003193601126106ca5760a65490516001600160a01b039091168152602090f35b5050346106ca5760203660031901126106ca57602090610bf9610bf4614706565b61549d565b9051908152f35b5050346106ca5760203660031901126106ca57602090610c26610c21614706565b615b50565b15159051908152f35b5050346106ca57816003193601126106ca57602090517f742d8195bebb59905cedb6c02453745e9ef7090c163e7dea727ab0849b3dfc008152f35b5050346106ca57816003193601126106ca57602090517fa22cb6bd33c714cffaf72f196d1ebf87829cac5214f3ad84491fa8669ede7a6a8152f35b509134610ee7576020366003190112610ee757610cc0614706565b6001600160a01b038116825260b26020528282208351610cdf816149c8565b60a08254958683526001840154956020840191878352600286015490818187015260038701549260608701978489528c8101549560c060ff600660808c01948a86528c60058201549c8d9101520154169901981515988981528642105f14610ee05762015180610d4f428961498c565b049a5b849c81519062093a8091828101809111610ec957421180610ebf575b610e0c575b50505051151580610e02575b15610df557518151610d9091614a24565b5f19810192908311610de25750516101409c50610dac9161496e565b985b81519a8b5260208b01528901526060880152608087015260a086015260c085015260e0840152610100830152610120820152f35b634e487b7160e01b815260118e52602490fd5b50506101409b5098610dae565b5080511515610d7f565b610e18610e1d91615b50565b615c43565b6005811015610ea957865260b1602052600187872001549151908101809111610e9457610e4e62015180914261498c565b049081151580610e8b575b610e64575b80610d73565b612710929d5061016d91610e7c610e81928651614947565b614947565b04049a5f80610e5e565b50801515610e59565b508f856011602492634e487b7160e01b835252fd5b50508f856021602492634e487b7160e01b835252fd5b5083511515610d6e565b5050508f856011602492634e487b7160e01b835252fd5b839a610d52565b80fd5b50346106de5760203660031901126106de5735916005831015610ee75750610f13602092614930565b549051908152f35b5050346106ca57806003193601126106ca57602091610f38614706565b82610f4161471c565b6001600160a01b03928316845260978652922091165f908152908352819020549051908152f35b5050346106ca57816003193601126106ca57602090517fb438992c2c4c65322b65fd8e2dacea9efd63443e69e5ed52f4a77ed6c78f7c2a8152f35b61490e565b50346106de5760203660031901126106de57610fc2614706565b60a8546001600160a01b03939192919084163303610ff3575050166001600160601b0360a01b60a754161760a75580f35b51630925c89960e31b8152fd5b828434610ee75780600319360112610ee757815191829160a05480855260208095019460a083527f78fdc8d422c49ced035a9edf18d00d3c6a8d81df210f3e5e448e045e77b41e8892905b8282106110715761106d8686611063828b03836149f6565b5191829182614784565b0390f35b83546001600160a01b03168752958601956001938401939091019061104b565b5090346106de5760203660031901126106de576110ac614706565b60a85490926001600160a01b0392909183163303610ff35750508060a954921691826001600160601b0360a01b82161760a9558261110d575b167f7fc5e57c5215ef3b834df4680694bbed4808bf88ddc971b470cb8ef9365e63868380a380f35b6001600160a81b031981168317600160a01b1760a9556110e5565b5090346106de57602080600319360112610b4557611144614706565b61114d8161521e565b506111f7576001600160a01b0316808552609c82528285205490939060ff166111b65750828452609c8152818420805460ff19166001179055609d905282204290557f7f62ed89ea2c6fb057e4ea77729c1d3f18056339791fce29ac89760197b45b298280a280f35b915162461bcd60e51b815291820152601b60248201527f4c69717569646174696f6e20616c7265616479207374617274656400000000006044820152606490fd5b50905162461bcd60e51b8152918201526013602482015272506f736974696f6e206973206865616c74687960681b6044820152606490fd5b5090346106de5760203660031901126106de57813560a3549261125560ff851615614e8e565b60ff1993841660011760a35560a5546001600160a01b031633036112f2574782116112af575083808080938181156112a6575b3390f11561129b575060a3541660a35580f35b51913d9150823e3d90fd5b506108fc611288565b606490602084519162461bcd60e51b8352820152601d60248201527f496e73756666696369656e7420636f6e74726163742062616c616e63650000006044820152fd5b608490602084519162461bcd60e51b8352820152602260248201527f4f6e6c79206c656e64696e67206d616e616765722063616e2063616c6c207468604482015261697360f01b6064820152fd5b5090346106de57806003193601126106de5761135a614706565b60a854602435936001600160a01b039291831633036113bb5762015180851161138c575016835260ae60205282205580f35b606490602085519162461bcd60e51b83528201526009602482015268546f6f206c6172676560b81b6044820152fd5b8351630925c89960e31b8152fd5b5090346106de57806003193601126106de5761140491356113ff60016113ed61471c565b93838752606560205286200154615804565b615a77565b80f35b5050346106ca5760203660031901126106ca57602090610bf9610c21614706565b5050346106ca57816003193601126106ca5760a85490516001600160a01b039091168152602090f35b5050346106ca5760203660031901126106ca5760209181906001600160a01b03611479614706565b168152609b845220549051908152f35b509190346106ca5760603660031901126106ca5760a8548335919060243590604435906001600160a01b03163303611546576114c860aa548510614d26565b82518381018181106001600160401b03821117611533577f7543d68ffbde1802767cee31f14403e1b914f7249f14f2724e7398aa10de092395969750845282815260016020820183815287895260b1602052858920925183555191015582519182526020820152a280f35b604188634e487b7160e01b5f525260245ffd5b8251630925c89960e31b81528690fd5b5050346106ca57816003193601126106ca5760209060ff60a3541690519015158152f35b5050346106ca57816003193601126106ca5761106d906115986153da565b905191829182614784565b5050346106ca57816003193601126106ca5781908260a0545b8082106115cd576020848451908152f35b90926115fd6001916115de866147c8565b848060a01b0391549060031b1c168752609a6020528487205490614a24565b9301906115bc565b5050346106ca57816003193601126106ca5760a45490516001600160a01b039091168152602090f35b50346106de5760203660031901126106de57611648614706565b60a8546001600160a01b039190821633036116c0571691821561167d5750506001600160601b0360a01b60a554161760a55580f35b906020606492519162461bcd60e51b8352820152601f60248201527f496e76616c6964206c656e64696e67206d616e616765722061646472657373006044820152fd5b8351630925c89960e31b81528390fd5b5090602080600319360112610b455782359160a354936116f660ff8660081c1615614a31565b61170360ff861615614e8e565b60ff1994851660011760a355338652609a835281862054611ccd5761173061172a33615caf565b50615c43565b60058110159081611cba57828114611c805760a25460011c8611611c245761175781615aea565b8892919211611bd35761176933615111565b90606482029180830460641490151715611a02576117879089614947565b11611b825760b0546001600160a01b03908116939091908a9085611b61575b8b6117b1838c61498c565b9683158015611ac9575b50505050508660a254926117d460ac5460ad549061498c565b938c9481611a84575b505060a65416926024885180958193634fd41dad60e11b83528a8301525afa918215611a7a578a92611a4b575b50818a821215611a15575061181e906151cc565b9061271091820390828211611a02579061183791614947565b04925b600c87106119b05762278d00420180421161199d5789936118fa85946118e38960068c898f99819a829a8f875197611871896149c8565b83895286890190848252808a0192835260608a01938452600c60808b019504855260a08a01966101f4885260b260c08c019960018b52338352522098518955516001890155516002880155516003870155519085015551600584015551151591019060ff801983541691151516179055565b609a8a528a89852055609b8a524289852055614930565b6119058a8254614a24565b90556119138960ac54614a24565b60ac55818115611994575b3390f11561198a57907fac59582e5396aca512fa873a2047e7f4c80f8f55d4a06cb34a78a0187f62719f9291815190858252838201527f5660f932172e1664b98577a703dd9484d374b28e3bf8c87b345bee97af612412823392a2519283523392a260a3541660a35580f35b81513d87823e3d90fd5b506108fc61191e565b634e487b7160e01b8a526011825260248afd5b845162461bcd60e51b8152908101869052602660248201527f4c6f616e20616d6f756e7420746f6f20736d616c6c20666f7220616d6f7274696044820152653d30ba34b7b760d11b6064820152608490fd5b634e487b7160e01b8b526011865260248bfd5b94918a8213611a26575b505061183a565b9091945061271091820190818311611a025790611a4291614947565b04925f80611a1f565b9091508681813d8311611a73575b611a6381836149f6565b81010312610b415751905f61180a565b503d611a59565b86513d8c823e3d90fd5b9194509150670de0b6b3a764000090818102918183041490151715611ab6578891611aae9161496e565b925f806117dd565b634e487b7160e01b8c526011875260248cfd5b8285819382938390611b58575bf115611b4e57611b3b578651908152606088820152600b60608201526a37b934b3b4b730ba34b7b760a91b608082015283878201527f66aecc579aa1ef463c0ed1547c2cb6163370e6311a60cba815252acbb398f21360a03392a25f808b81806117bb565b634e487b7160e01b8b526021865260248bfd5b87513d8d823e3d90fd5b506108fc611ad6565b50505f838b5260b18852612710611b7b888d20548b614947565b04906117a6565b845162461bcd60e51b8152808501879052602560248201527f496e73756666696369656e7420636f6c6c61746572616c20666f722074686973604482015264103637b0b760d91b6064820152608490fd5b855162461bcd60e51b8152808601889052602560248201527f426f72726f7720616d6f756e74206578636565647320796f75722074696572206044820152641b1a5b5a5d60da1b6064820152608490fd5b835162461bcd60e51b8152808401869052603060248201527f426f72726f7720616d6f756e74206578636565647320617661696c61626c652060448201526f6c656e64696e6720636170616369747960801b6064820152608490fd5b835162461bcd60e51b815280840186905260146024820152734372656469742073636f726520746f6f206c6f7760601b6044820152606490fd5b634e487b7160e01b885260218352602488fd5b82606492519162461bcd60e51b8352820152601e60248201527f526570617920796f7572206578697374696e67206465627420666972737400006044820152fd5b5050346106ca57816003193601126106ca5760209060a2549051908152f35b50346106de57826003193601126106de5760a8546001600160a01b03163303611da2575060207f228f455d7bc3d0b24a3a08d7847f391c3e78fc8aeb83acf226b7a96ee162b8ac9160ff60a35461ff00828260081c161560081b169061ff00191617918260a355519160081c1615158152a180f35b9051630925c89960e31b8152fd5b5050346106ca57816003193601126106ca57602090517facd38b7c4e04b2b78fc2ca994eae1a3eb206005ffa4c11fcf4a9d81c94684b2d8152f35b5050346106ca5760203660031901126106ca5760209181906001600160a01b03611e13614706565b168152609d845220549051908152f35b5050346106ca57816003193601126106ca57602090516203f4808152f35b5050346106ca57816003193601126106ca576020905160828152f35b5050346106ca57816003193601126106ca5760209060ad549051908152f35b5050346106ca57816003193601126106ca576020905167011c37937e0800008152f35b5050346106ca57816003193601126106ca5760209060ac549051908152f35b5050346106ca5760203660031901126106ca5760209181906001600160a01b03611ee6614706565b168152609a845220549051908152f35b50346106de5760203660031901126106de573591609f54831015610ee75750611f20602092614811565b905491519160018060a01b039160031b1c168152f35b50346106de5760203660031901126106de5791819235815260b1602052206001815491015482519182526020820152f35b5050346106ca57816003193601126106ca5760209060ff60a35460081c1690519015158152f35b5050346106ca57816003193601126106ca5760a75490516001600160a01b039091168152602090f35b5050346106ca5760203660031901126106ca57602090611fd5614706565b505160508152f35b5050346106ca5760203660031901126106ca57606091906203f480906001600160a01b03612009614706565b168352609c6020528060ff818520541693609d6020522054815193151584526020840152820152f35b5090346106de57806003193601126106de5761204c614706565b6024359160018060a01b03809216938486526020926098845260ff83882054161561226457841561222c57338752609c845260ff83882054166121f45790849133885260a18552838820805460ff81161561218f575b505083516323b872dd60e01b815233928101928352306020840152604083019390935250909291908290849081906060015b038189895af1801561218557612131575b7ff1c0dd7e9b98bbff859029005ef89b127af049cd18df1a8d79f0b7e019911e56925084865260978252808620335f528252805f20612125858254614a24565b9055519283523392a380f35b8183813d831161217e575b61214681836149f6565b810103126107df576121787ff1c0dd7e9b98bbff859029005ef89b127af049cd18df1a8d79f0b7e019911e5693614a17565b506120e5565b503d61213c565b81513d88823e3d90fd5b60ff1916600117905560a05491925090600160401b8110156121e1578493926120d495926121c48360018a950160a0556147c8565b819291549060031b9133831b921b191617905591948193946120a2565b604183634e487b7160e01b5f525260245ffd5b50816107cc92515f80516020615eaf83398151915233918061221581614e03565b0390a25162461bcd60e51b81529182918201614e03565b50816107cc92515f80516020615eaf83398151915233918061224d816153ad565b0390a25162461bcd60e51b815291829182016153ad565b50816107cc92515f80516020615eaf83398151915233918061228581614da8565b0390a25162461bcd60e51b81529182918201614da8565b50346106de57816003193601126106de576122b5614706565b6024359060a354936122cd60ff8660081c1615614a31565b6122da60ff861615614e8e565b60ff1994851660011760a35582156125255760018060a01b0382169384875260209260978452828820335f52845284835f2054106124e357338852609a845282882054859291816123f9575b50509280929161237894878a5260978352838a20335f528352835f2061234d83825461498c565b9055835163a9059cbb60e01b8152339181019182526020820192909252909485918291604090910190565b03818a895af180156123ef576123aa575b5f80516020615e8f8339815191529250519283523392a360a3541660a35580f35b8183813d83116123e8575b6123bf81836149f6565b810103126123e4576123de5f80516020615e8f83398151915293614a17565b50612389565b8680fd5b503d6123b5565b81513d89823e3d90fd5b61246e91929350612438670de0b6b3a764000091898c5260978852868c20335f52885261243261242c8a895f205461498c565b9161549d565b90614947565b0491612446610e1833615b50565b606461246861245f61245a610e1833615b50565b615aea565b50503394614947565b04615553565b1161247c5783905f80612326565b82608492519162461bcd60e51b8352820152603b60248201527f5769746864726177616c20776f756c642076696f6c61746520746965722d626160448201527f73656420636f6c6c61746572616c20726571756972656d656e747300000000006064820152fd5b5082606492519162461bcd60e51b8352820152601760248201527f496e73756666696369656e7420636f6c6c61746572616c0000000000000000006044820152fd5b5162461bcd60e51b8152806107cc8186016153ad565b5050346106ca57816003193601126106ca5751908152602090f35b5050346106ca57816003193601126106ca5760a55490516001600160a01b039091168152602090f35b5050346106ca5760203660031901126106ca57602090610bf96125a0614706565b615361565b5050346106ca57816003193601126106ca576020905160058152f35b614769565b5090346106de57806003193601126106de576125e0614706565b60a85460243592916001600160a01b0391821633036126fd57169283156126bb57308414612681576064831161264a57507f4afae6838a181695abc7978598380d73bc2144eb38580c130f86e4b1e6531e159160209184865260998352818187205551908152a280f35b6020606492519162461bcd60e51b8352820152601260248201527153636f7265206f7574206f662072616e676560701b6044820152fd5b6020606492519162461bcd60e51b8352820152601560248201527424b73b30b634b21030b2323932b9b99d1039b2b63360591b6044820152fd5b6020606492519162461bcd60e51b8352820152601d60248201527f496e76616c696420616464726573733a207a65726f20616464726573730000006044820152fd5b8251630925c89960e31b81528590fd5b5050346106ca57816003193601126106ca57602090517f96737339a958f216173e690d06f324072e6dc3146e04c060bd723906d6b190768152f35b5050346106ca57806003193601126106ca57602090610bf9612768614706565b61277061471c565b90615294565b5050346106ca5760203660031901126106ca5760209160ff9082906001600160a01b036127a1614706565b16815260a1855220541690519015158152f35b509134610ee7576020366003190112610ee7576127cf614706565b6127e761245a610e186127e184615111565b93615b50565b9260508082029350811591840414171590506128205760209450606490049150808210156128185750905b51908152f35b905090612812565b634e487b7160e01b835260118552602483fd5b50346106de57816003193601126106de578160209361285061471c565b9235815260658552209060018060a01b03165f52825260ff815f20541690519015158152f35b828434610ee7576020366003190112610ee7575061289a612895614706565b61521e565b825191151582526020820152f35b5050346106ca57816003193601126106ca576020905166b1a2bc2ec500008152f35b5050346106ca57816003193601126106ca57602090517fce802e42c93d0fbd61dfc706a0e806b78ac046397e07510da2f223464e4788e08152f35b5050346106ca57816003193601126106ca5760209060af549051908152f35b5050346106ca57816003193601126106ca57602090517f0e0e24c52bc4f24612e3f568966757426acd82325205933a9270e1ce7c4d93c28152f35b5050346106ca57806003193601126106ca576129f0906129db6129d6610e18612986614706565b866024359560018060a01b036129a18160a5541633146151dc565b83168252609a6020528181812055609b6020528181812055609c60205280822060ff198154169055609d602052812055615b50565b614930565b6129e682825461498c565b905560ad54614a24565b60ad5580f35b50346106de57816003193601126106de57612a0f614706565b91612a1861471c565b60a85490936001600160a01b0393909184163303612a69575082168085526098602052612a4a60ff83872054166150c5565b8452609e602052832091166001600160601b0360a01b82541617905580f35b8251630925c89960e31b8152fd5b50346106de5760203660031901126106de5760e09282906001600160a01b03612a9e614706565b16815260b26020522080549260018201549260028301546003840154918401549260ff600660058701549601541695815197885260208801528601526060850152608084015260a0830152151560c0820152f35b5050346106ca5760203660031901126106ca5760209160ff9082906001600160a01b03612b1d614706565b1681526098855220541690519015158152f35b5090346106de5760209283600319360112610ee757612b4d614706565b9260a254612b6060ac5460ad549061498c565b8115612cc157670de0b6b3a764000090818102918183041490151715612cae5790612b8a9161496e565b935b60a6548451634fd41dad60e11b8152838101969096528690869060249082906001600160a01b03165afa948515612ca4578395612c73575b50610e18612bd191615b50565b6005811015612c6057612be56003916148d5565b500154849083811215612c2357612c009192939495506151cc565b926127109384039284841161084457505090612c1b91614947565b049051908152f35b92808413612c35575b50505050612812565b9091929394506127109384019283851161084457505090612c5591614947565b04905f808080612c2c565b634e487b7160e01b835260218252602483fd5b9094508581813d8311612c9d575b612c8b81836149f6565b81010312610b41575193610e18612bc4565b503d612c81565b84513d85823e3d90fd5b634e487b7160e01b845260118352602484fd5b50508193612b8c565b5090346106de5760203660031901126106de5781359260aa54841015610ee75750612cf660a0936148d5565b508054926001820154926002830154916003840154930154938151958652602086015284015260608301526080820152f35b50346106de5760203660031901126106de57612d42614706565b60a85491906001600160a01b03908184163303612da95716928315612d745750506001600160a01b0319161760a85580f35b906020606492519162461bcd60e51b8352820152600f60248201526e496e76616c6964206164647265737360881b6044820152fd5b8451630925c89960e31b81528390fd5b509190346106ca57612dca36614846565b505060609160b354603c8101809111612f8057612de8904211614eca565b8151809160a05480835283602080940160a084527f78fdc8d422c49ced035a9edf18d00d3c6a8d81df210f3e5e448e045e77b41e8892845b86828210612f6157505050612e37925003846149f6565b612e41835161519a565b938193825b8151811015612ecc576001600160a01b03612e618284614a72565b5116808552609c865260ff8486205416612e7f575b50600101612e46565b609d8652838520546203f4808101809111612eb9574210612e765786612eb291612eac600194998b614a72565b52614a86565b9590612e76565b634e487b7160e01b865260118b52602486fd5b5084905085878215612f555750612ee28261519a565b935b828110612f2d5750505061106d90612f08612f166001948351928391888301614784565b03601f1981018352826149f6565b905b808051958695151586528501528301906148b0565b6001906001600160a01b03612f428285614a72565b5116612f4e8288614a72565b5201612ee4565b91505061106d91612f18565b85546001600160a01b0316845260019586019589955093019201612e20565b634e487b7160e01b825260118552602482fd5b5050346106ca5760203660031901126106ca57602090610bf9612fb4614706565b615111565b5050346106ca57816003193601126106ca5760209060ff60a95460a01c1690519015158152f35b5050346106ca5760203660031901126106ca5760209181906001600160a01b03613008614706565b16815260ae845220549051908152f35b5050346106ca5760203660031901126106ca57606091613036614706565b918060018060a01b03841692838152609a6020526130578282205495615111565b938152609b60205220549181519384526020840152820152f35b5050346106ca57816003193601126106ca5760209051600a8152f35b5050346106ca57816003193601126106ca5760209051603c8152f35b5050346106ca5760203660031901126106ca576020916001600160a01b03908290826130d3614706565b16808252609886526130ea60ff84842054166150c5565b8152609e85522054169051908152f35b5050346106ca57816003193601126106ca57602090516103848152f35b5050346106ca57816003193601126106ca57602090516276a7008152f35b5050346106ca57816003193601126106ca5751600a47048152602090f35b5090346106de57806003193601126106de5761316d614706565b906024359182151592838103610b415760a8546001600160a01b039290831633036132a55782169485875260986020526131b5828589209060ff801983541691151516179055565b609f549187805b84811061327b575b5081613272575b50613201575b5050507f15f5cc64ca777db85f6c05fdba671568758b38329616d4d4b43bb8b092fe9a8d9160209151908152a280f35b600160401b82101561325f5750917f15f5cc64ca777db85f6c05fdba671568758b38329616d4d4b43bb8b092fe9a8d939161324484600160209601609f55614811565b819291549060031b9188831b921b19161790559181936131d1565b604190634e487b7160e01b5f525260245ffd5b9050155f6131cb565b888661328683614811565b90549060031b1c161461329b576001016131bc565b505060015f6131c4565b8351630925c89960e31b81528690fd5b5050346106ca57806003193601126106ca576020916132d2614706565b906001600160a01b03908390826132e761471c565b168152609786522091165f528252805f20549051908152f35b5050346106ca5760203660031901126106ca57606090613326613321614706565b614fc8565b919290815193151584526020840152820152f35b5050346106ca5760203660031901126106ca5760209061336a613361610e18610c21614706565b91518092614748565bf35b5050346106ca57816003193601126106ca57602090610bf9614f20565b5050346106ca57816003193601126106ca57602090517f430b074324c1d9f1ce97c9e9efd8cc6b779c8a501b53808a5cafe19682f95dd58152f35b50346106de576133d336614846565b60b393919354603c8101809111613569576133ef904211614eca565b4260b35583019260209081818603126107df578035906001600160401b0382116123e457019380601f860112156107df57843561342b81614f09565b95613438855197886149f6565b818752838088019260051b820101928311613565578301905b82821061354657505050845b8451811015613542576001600160a01b03806134798388614a72565b511690818852609c845260ff8589205416613499575b505060010161345d565b609d8452848820546203f480810180911161352f57908892914210156134c0575b5061348f565b60a55416803b156106de57855163bcebb1d760e01b8152308882019081526001600160a01b039093166020840152918391839182908490829060400103925af1801561352557613511575b806134ba565b61351a906149e3565b6107df57855f61350b565b85513d84823e3d90fd5b634e487b7160e01b895260118752602489fd5b8580f35b81356001600160a01b0381168103610b41578152908301908301613451565b8780fd5b634e487b7160e01b865260118452602486fd5b5050346106ca57816003193601126106ca5780602092338152609a845220549051908152f35b5050346106ca57816003193601126106ca57602090517f5fef09193e4e8110de1cc5ba269e889a5fb9093ba33c4df4b67dc2eaa1ca1fff8152f35b5050346106ca57816003193601126106ca5760a354905160109190911c6001600160a01b03168152602090f35b505f366003190112610b415760a3549161362a60ff8460081c1615614a31565b61363760ff841615614e8e565b600160ff198094161760a355335f52602090609a8252805f205480156138055734156137d3578086913411805f146137cc5781955b335f52609a8652845f2061368188825461498c565b905561368f8760ad54614a24565b60ad556136a16129d6610e1833615b50565b6136ac88825461498c565b9055335f52609c8652845f2088815460ff81166137b8575b505060a7546001600160a01b0316905080613744575b5050613717575b5050907f0516911bcc3a0a7412a44601057c0a0a1ec628bde049a84284bc42886653448891519283523392a260a3541660a35580f35b818061372481933461498c565b81811561373b575b3390f1156106d557845f6136e1565b506108fc61372c565b8091929394503b15610b415784516340c10f1960e01b815233928101928352662386f26fc1000088046020840152915f91839182908490829060400103925af180156137ae57613799575b90818893926136da565b6137a5919297506149e3565b5f95905f61378f565b84513d5f823e3d90fd5b169055609d86525f858120555f88816136c4565b349561366c565b505162461bcd60e51b815291820152600d60248201526c09aeae6e840e6cadcc8408aa89609b1b604482015260649150fd5b505162461bcd60e51b815291820152601060248201526f4e6f206465627420746f20726570617960801b604482015260649150fd5b8234610b41575f366003190112610b415760209060b3549051908152f35b8234610b41576020366003190112610b415760609061387e61245a610e18610c21614706565b91929081519384526020840152820152f35b5034610b41576020366003190112610b4157359060a054821015610b4157611f206020926147c8565b5034610b415781600319360112610b41576138d261471c565b90336001600160a01b038316036138f0576138ee925035615a77565b005b608490602084519162461bcd60e51b8352820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152fd5b509034610b41576020366003190112610b415760a8546001600160a01b03163303610ff357503560af55005b8234610b41575f366003190112610b4157602090517ffed613f2d4bec2209ff904769fa3c094c155ec5048c0bb2e17f16e523671ca2c8152f35b509034610b415780600319360112610b41576139cb614706565b6024359160018060a01b039384831694855f526020936098855260ff845f20541615613c1f57865f5260978552835f20335f52855285845f205410613be757335f52609c855260ff845f205416613bc657613a4b90670de0b6b3a7640000613a44613a3e613a3833615111565b9361549d565b89614947565b049061498c565b90606482029180830460641490151715613bb357602490335f52609a865285855f20549160a45416865193848092631ee1b90b60e21b82528c898301525afa908115613ba9575f91613b78575b613aa29250614947565b11613b4157908284613acc9493875f5260978352835f20335f528352835f2061234d83825461498c565b03815f895af18015613b3757613af6575b5f80516020615e8f8339815191529250519283523392a3005b8183813d8311613b30575b613b0b81836149f6565b81010312610b4157613b2a5f80516020615e8f83398151915293614a17565b50613add565b503d613b01565b50513d5f823e3d90fd5b816107cc92515f80516020615eaf833981519152339180613b6181614e3b565b0390a25162461bcd60e51b81529182918201614e3b565b90508582813d8311613ba2575b613b8f81836149f6565b81010312610b4157613aa2915190613a98565b503d613b85565b85513d5f823e3d90fd5b601183634e487b7160e01b5f525260245ffd5b6107cc838580515f80516020615eaf83398151915233918061221581614e03565b6107cc838580515f80516020615eaf833981519152339180613c0881614dd4565b0390a25162461bcd60e51b81529182918201614dd4565b6107cc838580515f80516020615eaf83398151915233918061228581614da8565b5034610b41576020366003190112610b415760e091613c5d614706565b5f60c08351613c6b816149c8565b82815282602082015282858201528260608201528260808201528260a0820152015260018060a01b03165f5260b2602052805f20815191613cab836149c8565b81549384845260018301549160208501928352600284015481860190815260038501549260608701938452850154936080870194855260c060ff600660058901549860a08b01998a5201541697019615158752825197885251602088015251908601525160608501525160808401525160a083015251151560c0820152f35b509034610b415760c0366003190112610b415760a854823592906001600160a01b03163303611da25750613d9d6138ee92613d6860aa548210614d26565b825192613d7484614999565b6024358452604435602085015260643590840152608435606084015260a43560808401526148d5565b90614d61565b5034610b415781600319360112610b41573590613dbe61471c565b90825f526065602052613dd66001825f200154615804565b825f526065602052805f209160018060a01b031691825f5260205260ff815f20541615613dff57005b825f526065602052805f20825f526020525f20600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d5f80a4005b5034610b41576020366003190112610b415735906001600160401b0382168203610b4157610bf9602092614cd6565b8234610b41575f366003190112610b41578051609f80548083525f918252602080840194927f0bc14066c33013fe88f66e314e4cf150b0b2d4d6451a1a51dbbd1c27cd11de2892915b828210613ed55761106d8686611063828b03836149f6565b83546001600160a01b031687529586019560019384019390910190613ebd565b509034610b41576020366003190112610b4157602091355f52606582526001815f2001549051908152f35b34610b41575f366003190112610b41576138ee614a94565b50905f366003190112610b4157613f5760ff60a35460081c1615614a31565b335f52602060b28152815f20600681019360ff855416156141b5578082019182549283341061417257600382019182548042106141435762093a8081018091116141305780421161406b575b50906001613fda920194613fb881875461498c565b8655335f52609a8752613fcf885f2091825461498c565b90555460ad54614a24565b60ad5580549162278d0083018093116140585750907fd3cf6d8c55fed98c7b9f9d18d95a51dbdb316503bb854fc1f676c8974cb10f4f9291555492838151933485528401523392a21561402957005b805460ff19169055337f59bd56f70adeefb0cd83dca0f34f066bed6ee442068f3d07b5fc974b944d5aa65f80a2005b601190634e487b7160e01b5f525260245ffd5b614077610e1833615b50565b600581101561411d5791600191613fda94935f5260b18952620151806140a3848c5f200154924261498c565b0480151580614114575b6140bc575b5050919250613fa3565b6140e161271061016d6140d887870194610e7c86549788614947565b04048093614a24565b905589519081527fce0d6b567089a0bce35e0693cdb625006f0cf915f9f3686bb0343bc2c667c1b2893392a28a806140b2565b508115156140ad565b602186634e487b7160e01b5f525260245ffd5b601185634e487b7160e01b5f525260245ffd5b875162461bcd60e51b81528086018890526009602482015268546f6f206561726c7960b81b6044820152606490fd5b855162461bcd60e51b8152808401869052601860248201527f496e73756666696369656e7420696e7374616c6c6d656e7400000000000000006044820152606490fd5b835162461bcd60e51b8152908101839052600e60248201526d27379030b1ba34bb32903637b0b760911b6044820152606490fd5b8234610b41576020366003190112610b41576020906001600160a01b038061420f614706565b165f52609e8352815f2054169051908152f35b8234610b41575f366003190112610b4157602090517f8b473ac3e35dc431c1dba0191b7615ccaca6bfeb14f9573dcaae9e614fbe8b208152f35b5034610b41576020366003190112610b4157614276614706565b60a8546001600160a01b039190821633036116c057169182156142cc5760b080546001600160a01b03191684179055827f279ea638680bba6a87fddd8bcdbc37d94eee92841e1dfec2ab0f79662c7093115f80a2005b906020606492519162461bcd60e51b8352820152601760248201527f496e76616c6964207265736572766520616464726573730000000000000000006044820152fd5b509034610b41576020366003190112610b4157813591821515809303610b415760a8546001600160a01b03163303611da25760a9805460ff60a01b191660a085901b60ff60a01b1617905581518381527fb01450010edba5be11857fe89630b2ff764d237a9f9f77ab651643effd86998890602090a1005b8234610b41575f366003190112610b415760209051600a8152f35b8234610b41575f366003190112610b415760209051610e108152f35b8234610b41576020366003190112610b4157602090610bf9612fb4614706565b509034610b415780600319360112610b41576143f8614706565b9160243590335f52602093609c855260ff845f205416156144da5783516323b872dd60e01b815233928101928352306020840152604083018490526001600160a01b039091169185908290819060600103815f865af180156137ae576144a6575b505f5260978352815f20335f528352614476825f20918254614a24565b90556144813361521e565b5061448857005b335f908152609c8352818120805460ff19169055609d909252812055005b8481813d83116144d3575b6144bb81836149f6565b81010312610b41576144cc90614a17565b5084614459565b503d6144b1565b835162461bcd60e51b8152808301869052601a60248201527f4163636f756e74206e6f7420696e206c69717569646174696f6e0000000000006044820152606490fd5b509034610b41576020366003190112610b4157614538614706565b91614545610e1884615b50565b9161455561245a610e1886615b50565b50506001600160a01b0385165f908152609a602052829020549490929085156145e05761458990856064612468878a614947565b9060648202918083046064149015171561405857506080946145aa9161496e565b90818311156145da576145bd828461498c565b925b6145cb82518096614748565b60208501528301526060820152f35b5f6145bd565b50506080935081905f926145bf565b8234610b41576020366003190112610b41576020906001600160a01b03614614614706565b165f52609c825260ff815f20541690519015158152f35b8234610b41575f366003190112610b415760a95490516001600160a01b039091168152602090f35b5034610b41576020366003190112610b41573563ffffffff60e01b8116809103610b4157602091637965db0b60e01b8214918215614695575b50519015158152f35b6301ffc9a760e01b1491508361468c565b8234610b41576020366003190112610b41576146c0614706565b60a8549092906001600160a01b031633036146fa5760a3805462010000600160b01b031916601085901b62010000600160b01b0316179055005b630925c89960e31b8152fd5b600435906001600160a01b0382168203610b4157565b602435906001600160a01b0382168203610b4157565b604435906001600160a01b0382168203610b4157565b9060058210156147555752565b634e487b7160e01b5f52602160045260245ffd5b34610b41575f366003190112610b4157602047604051908152f35b60209060206040818301928281528551809452019301915f5b8281106147ab575050505090565b83516001600160a01b03168552938101939281019260010161479d565b60a0548110156147fd5760a05f527f78fdc8d422c49ced035a9edf18d00d3c6a8d81df210f3e5e448e045e77b41e8801905f90565b634e487b7160e01b5f52603260045260245ffd5b609f548110156147fd57609f5f527f0bc14066c33013fe88f66e314e4cf150b0b2d4d6451a1a51dbbd1c27cd11de2801905f90565b906020600319830112610b41576004356001600160401b0392838211610b415780602383011215610b41578160040135938411610b415760248483010111610b41576024019190565b5f5b8381106148a05750505f910152565b8181015183820152602001614891565b906020916148c98151809281855285808601910161488f565b601f01601f1916010190565b60aa548110156147fd5760059060aa5f52027f550d3de95be0bd28a79c3eb4ea7f05692c60b0602e48b49461e703379b08a71a01905f90565b34610b41575f366003190112610b41576020604051670de0b6b3a76400008152f35b6005811015614755575f5260ab60205260405f2090565b8181029291811591840414171561495a57565b634e487b7160e01b5f52601160045260245ffd5b8115614978570490565b634e487b7160e01b5f52601260045260245ffd5b9190820391821161495a57565b60a081019081106001600160401b038211176149b457604052565b634e487b7160e01b5f52604160045260245ffd5b60e081019081106001600160401b038211176149b457604052565b6001600160401b0381116149b457604052565b90601f801991011681019081106001600160401b038211176149b457604052565b51908115158203610b4157565b9190820180921161495a57565b15614a3857565b60405162461bcd60e51b815260206004820152601260248201527110dbdb9d1c9858dd081a5cc81c185d5cd95960721b6044820152606490fd5b80518210156147fd5760209160051b010190565b5f19811461495a5760010190565b614a9c6153da565b5f5b8151811015614b3e576001600160a01b0380614aba8385614a72565b511690815f52602091609e8352604091825f205416614adf575b505050600101614a9e565b614af6614aee610e109261568b565b90504261498c565b11614b015780614ad4565b60a3805461ff00191661010017905551600181527f228f455d7bc3d0b24a3a08d7847f391c3e78fc8aeb83acf226b7a96ee162b8ac9350909150a1565b505060a2548015159081614c9f575b50614b845760a05460a5545f91906001600160a01b03908116835b838110614bea575050508015159182614bc0575b5050614b8457565b61010061ff001960a354161760a3557f228f455d7bc3d0b24a3a08d7847f391c3e78fc8aeb83acf226b7a96ee162b8ac602060405160018152a1565b90915060648102908082046064149015171561495a57600591614be29161496e565b115f80614b7c565b614bf3816147c8565b905460408051632cf5889360e01b815230600482015260039390931b9190911c85166001600160a01b031660248301529060208082604481885afa928315614c9657505f92614c60575b5050614c4c575b600101614b68565b93614c58600191614a86565b949050614c44565b90809250813d8311614c8f575b614c7781836149f6565b81010312610b4157614c8890614a17565b5f80614c3d565b503d614c6d565b513d5f823e3d90fd5b9050614cb060ac5460ad549061498c565b60648102908082046064149015171561495a57605f91614ccf9161496e565b115f614b4d565b6001600160401b0380911661012c811115614d2057610352811015614d195761012b190181811161495a57811660640280821690810361495a5761022690041690565b5050606490565b50505f90565b15614d2d57565b60405162461bcd60e51b815260206004820152600c60248201526b24b73b30b634b2103a34b2b960a11b6044820152606490fd5b9190614d95576080816004925184556020810151600185015560408101516002850155606081015160038501550151910155565b634e487b7160e01b5f525f60045260245ffd5b606090602081526011602082015270151bdad95b881b9bdd08185b1b1bddd959607a1b60408201520190565b606090602081526014602082015273496e73756666696369656e742062616c616e636560601b60408201520190565b60609060208152601960208201527f4163636f756e7420697320696e206c69717569646174696f6e0000000000000060408201520190565b60809060208152603260208201527f5769746864726177616c20776f756c64206d616b6520706f736974696f6e20756040820152711b99195c98dbdb1b185d195c985b1a5e995960721b60608201520190565b15614e9557565b60405162461bcd60e51b815260206004820152600d60248201526c4e6f207265656e7472616e637960981b6044820152606490fd5b15614ed157565b60405162461bcd60e51b815260206004820152601060248201526f155c1ad9595c081d1a1c9bdd1d1b195960821b6044820152606490fd5b6001600160401b0381116149b45760051b60200190565b60a2548015614f91575f905f60a0545b808210614f5857505060648202918083046064149015171561495a57614f559161496e565b90565b9092614f89600191614f69866147c8565b848060a01b0391549060031b1c165f52609a60205260405f205490614a24565b930190614f30565b505f90565b90816060910312610b415780516001600160401b0381168103610b4157916040614fc260208401614a17565b92015190565b60a9549060ff8260a01c161580156150b4575b6150aa5760405163d3dd2bdf60e01b81526001600160a01b0391821660048201529160609183916024918391165afa5f918291829181615076575b50615027575b5050505f905f905f90565b80615064575b8061504e575b61503d578061501c565b61504690614cd6565b916001929190565b506276a700820180831161495a57421115615033565b506001600160401b038116151561502d565b9150925061509c915060603d6060116150a3575b61509481836149f6565b810190614f96565b925f615016565b503d61508a565b50505f905f905f90565b506001600160a01b03821615614fdb565b156150cc57565b60405162461bcd60e51b815260206004820152601f60248201527f546f6b656e206e6f7420616c6c6f77656420617320636f6c6c61746572616c006044820152606490fd5b905f9161511c6153da565b925f5b8451811015615194576001600160a01b038061513b8388614a72565b511690815f5260209060978252604091825f209187165f52525f20549081615168575b505060010161511f565b92670de0b6b3a764000061518561518c936124326001969761549d565b0490614a24565b91905f61515e565b50925050565b906151a482614f09565b6151b160405191826149f6565b82815280926151c2601f1991614f09565b0190602036910137565b600160ff1b811461495a575f0390565b156151e357565b60405162461bcd60e51b815260206004820152601360248201527227b7363c902632b73234b733a6b0b730b3b2b960691b6044820152606490fd5b9061522882615111565b6001600160a01b0383165f908152609a602052604090205492831561528857811561527e5761245a610e1861525c92615b50565b5050926064820291820460640361495a576152769161496e565b918210159190565b505090505f905f90565b50600192505f19919050565b91909160018060a01b038084165f52609760205260405f209082165f5260205260405f205492609a60205260405f205490811561535c576152d49061549d565b90615318670de0b6b3a764000093846152ed8589614947565b04926064612468615300610e1885615b50565b9261531061245a610e1887615b50565b505090614947565b9081811115615353579061532b9161498c565b82810292818404149015171561495a576153449161496e565b9180831161534f5750565b9150565b505f9450505050565b505050565b6001600160a01b0381165f908152609a60205260409020549081156153a65761538990615111565b9060648202918083046064149015171561495a57614f559161496e565b50505f1990565b6060906020815260126020820152710416d6f756e74206d757374206265203e20360741b60408201520190565b609f545f805b82811061545557506153f19061519a565b905f805b8281106154025750505090565b61540b81614811565b905460039190911b1c6001600160a01b03165f8181526098602052604090205460ff1661543c575b506001016153f5565b8261544e91612eac6001949588614a72565b9190615433565b61545e81614811565b60018060a01b0391549060031b1c165f52609860205260ff60405f205416615489575b6001016153e0565b90615495600191614a86565b919050615481565b600460206154aa8361568b565b509260018060a01b038091165f52609e825260405f2054166040519283809263313ce56760e01b82525afa8015615548575f9061550b575b60ff91501660120360ff811161495a5760ff1690604d821161495a57614f5591600a0a90614947565b506020813d602011615540575b81615525602093836149f6565b81010312610b41575160ff81168103610b415760ff906154e2565b3d9150615518565b6040513d5f823e3d90fd5b9161555d90615b50565b90600581101561475557615570816148d5565b50508061559d5750605f11156155835790565b605f810290808204605f149015171561495a576064900490565b600181036155d45750605581106155c95750605a810290808204605a149015171561495a576064900490565b605211156155835790565b600281036156215750604b8110615600575060558102908082046055149015171561495a576064900490565b604811614f5557605c810290808204605c149015171561495a576064900490565b60031461562c575090565b6041811061564f575060508102908082046050149015171561495a576064900490565b603e111561565a5790565b605a810290808204605a149015171561495a576064900490565b519069ffffffffffffffffffff82168203610b4157565b9060018060a01b03918281165f52609e602052604092835f20541680156157cb579260a0600494825195868092633fabe5a360e21b82525afa8015613b37575f80935f965f93615771575b506156ea6156e4884261498c565b91615dda565b1061573f5769ffffffffffffffffffff80911691161061570957509190565b5162461bcd60e51b815260206004820152601060248201526f5374616c6520726f756e64206461746160801b6044820152606490fd5b825162461bcd60e51b815260206004820152600b60248201526a5374616c6520707269636560a81b6044820152606490fd5b94509550505060a0823d60a0116157c3575b8161579060a093836149f6565b81010312610b41576157a182615674565b9360208301516157b8608060608601519501615674565b95909395915f6156d6565b3d9150615783565b835162461bcd60e51b8152602060048201526012602482015271141c9a58d94819995959081b9bdd081cd95d60721b6044820152606490fd5b805f52602060658152604091825f20335f52825260ff835f2054161561582957505050565b3383519160608301906001600160401b0391848110838211176149b4578652602a845284840190863683378451156147fd5760308253845193600194600110156147fd576078602187015360295b858111615a3657506159f45786519260808401908111848210176149b4578752604283528583019360603686378351156147fd57603085538351600110156147fd57607860218501536041905b8082116159b157505061596f576107cc9386936159539361594460489461591b9a519a8b957f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008c880152518092603788019061488f565b8401917001034b99036b4b9b9b4b733903937b6329607d1b60378401525180938684019061488f565b010360288101875201856149f6565b5192839262461bcd60e51b8452600484015260248301906148b0565b60648587519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f811660108110156147fd576f181899199a1a9b1b9c1cb0b131b232b360811b901a6159e08487615e7d565b5360041c91801561495a575f1901906158c4565b60648688519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b90600f811660108110156147fd576f181899199a1a9b1b9c1cb0b131b232b360811b901a615a648389615e7d565b5360041c90801561495a575f1901615877565b90815f52606560205260405f209060018060a01b031690815f5260205260ff60405f205416615aa4575050565b815f52606560205260405f20815f5260205260405f2060ff19815416905533917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b5f80a4565b600581101561475557615afc906148d5565b509060405190615b0b82614999565b82548252600183015460208301526064615b49608060028601549485604082015260046003880154978860608401520154918291015260a254614947565b0491929190565b60a95460ff8160a01c1680615c31575b615b80575b506001600160a01b03165f9081526099602052604090205490565b60405163d3dd2bdf60e01b81526001600160a01b038381166004830152909160609183916024918391165afa5f91815f915f93615c0c575b50615bc5575b5050615b65565b80615bfa575b615bd6575b80615bbe565b6276a700810180911161495a57421115615bf05780615bd0565b614f559150614cd6565b506001600160401b0382161515615bcb565b91509250615c29915060603d6060116150a35761509481836149f6565b91925f615bb8565b506001600160a01b0381161515615b60565b60aa54905f5b828110615c695750505f19810190811161495a5760058110156147555790565b615c72816148d5565b505482101580615c98575b615c8957600101615c49565b91505060058110156147555790565b506001615ca4826148d5565b500154821115615c7d565b60a95460ff8160a01c1680615da3575b615ce3575b506001600160a01b03165f908152609960205260409020549081151590565b60405163d3dd2bdf60e01b81526001600160a01b038381166004830152909160609183916024918391165afa5f918291829181615d7b575b50615d28575b5050615cc4565b81615d68575b81615d50575b50615d40578080615d21565b615d4a9150614cd6565b90600190565b90506276a700810180911161495a574211155f615d34565b6001600160401b03831615159150615d2e565b91509250615d98915060603d6060116150a35761509481836149f6565b91929091905f615d1b565b506001600160a01b0381161515615cbf565b60aa5490600160401b8210156149b457613d9d826001615dd8940160aa556148d5565b565b6001600160a01b039081165f81815260ae602052604090205490919080615e77575060209060a4541691602460405180948193631a650cc760e01b835260048301525afa908115615548575f91615e3d575b50615e375761038490565b610e1090565b90506020813d602011615e6f575b81615e58602093836149f6565b81010312610b4157615e6990614a17565b5f615e2c565b3d9150615e4b565b91505090565b9081518110156147fd57016020019056fe45892a46e6cef329bb642da6d69846d324db43d19008edc141ed82382eda1bee3c364b9decdac59fbe037e99687219ac0feed46572bfbcbd5284b6b8e67f402da2646970667358221220fb6dea78874217152c57d1c31f54a936dad18370b222418bb219961391b0eea664736f6c63430008180033",
+  "deployedBytecode": "0x6080604081815260048036101561002f575b505050361561001e575f80fd5b61002a3460a254614a24565b60a255005b5f925f3560e01c90816301c76f81146146a65750806301ffc9a71461465357806303a42b6f1461462b578063042e02cf146145ef57806305510b911461451d578063080d9c2b146143de5780630835e145146143be5780630b044c79146143a25780630ef7fb67146143875780630f61b8101461430f57806312065fe0146125c157806314673d311461425c5780631bfe4261146142225780631fd48b9a146141e957806320dfcae114613f3857806323fe5a3314613f20578063248a9ca314613ef55780632a28ec4414613e745780632a7beafe14613e455780632f2ff15d14613da357806330332f9f14613d2a57806333481fc914613c40578063350c35e9146139b1578063357619a91461397757806335f679811461394b57806336568abe146138b9578063365b98b21461389057806338053ef3146138585780633d7c5d3e1461383a578063402d88831461360a5780634046ebae146135dd578063418eea31146135a2578063450a375a1461357c5780634585e33b146133c4578063488683cd146133895780634a417a531461336c5780634c8f35ab14611e415780634c95da661461333a5780635141df411461330057806352226ef0146132b557806355f4d9e214613153578063594ad93f1461313557806359705bb3146131175780635a70348f14612af25780635b66e7fc146130fa5780635b6cca80146130a95780635c44f10d1461308d5780635c975abb14611f675780635f558e5314613071578063613cf420146130185780636579b73e14612fe057806369ff0a0d14612fb95780636c648fc414612f935780636e04ff0d14612db95780636e9960c314611428578063704b6c0214612d2857806370ed11bc14612cca57806372ed9f7b14612b305780637346f48614612af257806373b4086b14612a7757806376e11286146129f657806378974cbb1461295f5780637a8ce68b14612924578063802937ac1461290557806383475f0c146128ca57806383ae734514611ebe57806384bdc9a8146128a85780638e6b53bc1461287657806391d148541461283357806393a517a2146127b45780639490a51e1461277657806395eb0d1514612748578063962a0da51461270d578063968ed60014611d0e57806397ed81cf146125c65780639b745aec146125c15780639b8621d5146125a55780639ce625f71461257f5780639e3b77af14612556578063a217fddf1461253b578063a36e4ad61461229c578063a5d5db0c14612032578063a787572e14611fdd578063a8cf4b5214610fa3578063aca25f9a14611fb7578063b034012314611f8e578063b187bd2614611f67578063b3075fb714611f36578063b3a5a0a214611ef6578063b69e5c7714611ebe578063b8cdf56114611e9f578063ba1c5e8014611e7c578063bc3d5a3e14611e5d578063c129d50414611e41578063c1a287e214611e23578063c23c69d514611deb578063c39537e114611db0578063c4ae316814611d2d578063c4e41b2214611d0e578063c5ebeaec146116d0578063c869d0ed1461162e578063c941f32114611605578063cc484c5c146115a3578063cf1762251461157a578063cf30901214611556578063d1f151c114611489578063d29255f914611451578063d33219b414611428578063d3dd2bdf14611407578063d547741f146113c9578063ddac7f1b14611340578063e19fb8f51461122f578063e1c5010014611128578063e1f7c2c914611091578063e2842d7914611000578063e2d7462814610fa8578063e6aa216c14610fa3578063e6ae357614610f68578063e7602b9d14610f1b578063e84bae4514610eea578063e8a7da8e14610ca5578063e9ffb29114610c6a578063eb8d655114610c2f578063ebdcc16414610c00578063f1c5d6c214610bd3578063f3fdb15a14610baa578063f79ed94b14610b81578063f7e590ee14610b49578063f8c8765e14610857578063fbbff3d1146107e3578063feb50e52146106e25763ffd4aedb0361001157346106de5760803660031901126106de5761068a91610600614706565b61060861471c565b92610611614732565b90606435918760018060a01b03809561062f8260a5541633146151dc565b169283825260209788966097885288842091165f528652865f2061065486825461498c565b9055865163a9059cbb60e01b81526001600160a01b03909316908301908152602081019490945290968793849291839160400190565b03925af19081156106d5575061069e578280f35b81813d83116106ce575b6106b281836149f6565b810103126106ca576106c390614a17565b505f808280f35b5080fd5b503d6106a8565b513d85823e3d90fd5b8280fd5b5090346106de57806003193601126106de5781356024356001600160a01b03818116918290036107df5760a8541633036107d0578147106107b5578480809381935af13d156107b0573d6001600160401b03811161079d57825190610751601f8201601f1916602001836149f6565b81528460203d92013e5b15610764578280f35b906020606492519162461bcd60e51b83528201526013602482015272115512081d1c985b9cd9995c8819985a5b1959606a1b6044820152fd5b604184634e487b7160e01b5f525260245ffd5b61075b565b825162461bcd60e51b8152806107cc818701614dd4565b0390fd5b505051630925c89960e31b8152fd5b8580fd5b508290346106ca5760203660031901126106ca576107ff614706565b6001600160a01b0381168352609a60205283832054929061081f90615111565b9160058402938085046005149015171561084457505060648351920482526020820152f35b634e487b7160e01b825260119052602490fd5b50346106de5760809081600319360112610b4557610873614706565b61087b61471c565b90610884614732565b6064356001600160a01b0381811694909291859003610b415788549560ff8760081c161596878098610b34575b8015610b1d575b15610ac35760ff1981166001178b5587610ab2575b5060ff8a5460081c1615610a5b57508290816001600160601b0360a01b95168560a854161760a855168360a454161760a455168160a554161760a55560a654161760a65560ff60a01b1960a9541660a955610a1183519261092d84614999565b605a8452610956602094606486820152606e878201526018196060820152603283820152615db5565b610987855161096481614999565b60508152605986820152607d878201526009196060820152602883820152615db5565b6109b6855161099581614999565b60468152604f86820152608c87820152876060820152601e83820152615db5565b6109e685516109c481614999565b603c815260458682015260a087820152600f6060820152601483820152615db5565b858551916109f383614999565b818352603b8684015260c887840152601e6060840152820152615db5565b662386f26fc1000060af55610a24578280f35b7f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989161ff001984541684555160018152a15f808280f35b60849060208a519162461bcd60e51b8352820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152fd5b61ffff1916610101178a555f6108cd565b895162461bcd60e51b8152602081840152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156108b85750600160ff8216146108b8565b50600160ff8216106108b1565b5f80fd5b8380fd5b5050346106ca5760203660031901126106ca5760209181906001600160a01b03610b71614706565b1681526099845220549051908152f35b5050346106ca57816003193601126106ca5760b05490516001600160a01b039091168152602090f35b5050346106ca57816003193601126106ca5760a65490516001600160a01b039091168152602090f35b5050346106ca5760203660031901126106ca57602090610bf9610bf4614706565b61549d565b9051908152f35b5050346106ca5760203660031901126106ca57602090610c26610c21614706565b615b50565b15159051908152f35b5050346106ca57816003193601126106ca57602090517f742d8195bebb59905cedb6c02453745e9ef7090c163e7dea727ab0849b3dfc008152f35b5050346106ca57816003193601126106ca57602090517fa22cb6bd33c714cffaf72f196d1ebf87829cac5214f3ad84491fa8669ede7a6a8152f35b509134610ee7576020366003190112610ee757610cc0614706565b6001600160a01b038116825260b26020528282208351610cdf816149c8565b60a08254958683526001840154956020840191878352600286015490818187015260038701549260608701978489528c8101549560c060ff600660808c01948a86528c60058201549c8d9101520154169901981515988981528642105f14610ee05762015180610d4f428961498c565b049a5b849c81519062093a8091828101809111610ec957421180610ebf575b610e0c575b50505051151580610e02575b15610df557518151610d9091614a24565b5f19810192908311610de25750516101409c50610dac9161496e565b985b81519a8b5260208b01528901526060880152608087015260a086015260c085015260e0840152610100830152610120820152f35b634e487b7160e01b815260118e52602490fd5b50506101409b5098610dae565b5080511515610d7f565b610e18610e1d91615b50565b615c43565b6005811015610ea957865260b1602052600187872001549151908101809111610e9457610e4e62015180914261498c565b049081151580610e8b575b610e64575b80610d73565b612710929d5061016d91610e7c610e81928651614947565b614947565b04049a5f80610e5e565b50801515610e59565b508f856011602492634e487b7160e01b835252fd5b50508f856021602492634e487b7160e01b835252fd5b5083511515610d6e565b5050508f856011602492634e487b7160e01b835252fd5b839a610d52565b80fd5b50346106de5760203660031901126106de5735916005831015610ee75750610f13602092614930565b549051908152f35b5050346106ca57806003193601126106ca57602091610f38614706565b82610f4161471c565b6001600160a01b03928316845260978652922091165f908152908352819020549051908152f35b5050346106ca57816003193601126106ca57602090517fb438992c2c4c65322b65fd8e2dacea9efd63443e69e5ed52f4a77ed6c78f7c2a8152f35b61490e565b50346106de5760203660031901126106de57610fc2614706565b60a8546001600160a01b03939192919084163303610ff3575050166001600160601b0360a01b60a754161760a75580f35b51630925c89960e31b8152fd5b828434610ee75780600319360112610ee757815191829160a05480855260208095019460a083527f78fdc8d422c49ced035a9edf18d00d3c6a8d81df210f3e5e448e045e77b41e8892905b8282106110715761106d8686611063828b03836149f6565b5191829182614784565b0390f35b83546001600160a01b03168752958601956001938401939091019061104b565b5090346106de5760203660031901126106de576110ac614706565b60a85490926001600160a01b0392909183163303610ff35750508060a954921691826001600160601b0360a01b82161760a9558261110d575b167f7fc5e57c5215ef3b834df4680694bbed4808bf88ddc971b470cb8ef9365e63868380a380f35b6001600160a81b031981168317600160a01b1760a9556110e5565b5090346106de57602080600319360112610b4557611144614706565b61114d8161521e565b506111f7576001600160a01b0316808552609c82528285205490939060ff166111b65750828452609c8152818420805460ff19166001179055609d905282204290557f7f62ed89ea2c6fb057e4ea77729c1d3f18056339791fce29ac89760197b45b298280a280f35b915162461bcd60e51b815291820152601b60248201527f4c69717569646174696f6e20616c7265616479207374617274656400000000006044820152606490fd5b50905162461bcd60e51b8152918201526013602482015272506f736974696f6e206973206865616c74687960681b6044820152606490fd5b5090346106de5760203660031901126106de57813560a3549261125560ff851615614e8e565b60ff1993841660011760a35560a5546001600160a01b031633036112f2574782116112af575083808080938181156112a6575b3390f11561129b575060a3541660a35580f35b51913d9150823e3d90fd5b506108fc611288565b606490602084519162461bcd60e51b8352820152601d60248201527f496e73756666696369656e7420636f6e74726163742062616c616e63650000006044820152fd5b608490602084519162461bcd60e51b8352820152602260248201527f4f6e6c79206c656e64696e67206d616e616765722063616e2063616c6c207468604482015261697360f01b6064820152fd5b5090346106de57806003193601126106de5761135a614706565b60a854602435936001600160a01b039291831633036113bb5762015180851161138c575016835260ae60205282205580f35b606490602085519162461bcd60e51b83528201526009602482015268546f6f206c6172676560b81b6044820152fd5b8351630925c89960e31b8152fd5b5090346106de57806003193601126106de5761140491356113ff60016113ed61471c565b93838752606560205286200154615804565b615a77565b80f35b5050346106ca5760203660031901126106ca57602090610bf9610c21614706565b5050346106ca57816003193601126106ca5760a85490516001600160a01b039091168152602090f35b5050346106ca5760203660031901126106ca5760209181906001600160a01b03611479614706565b168152609b845220549051908152f35b509190346106ca5760603660031901126106ca5760a8548335919060243590604435906001600160a01b03163303611546576114c860aa548510614d26565b82518381018181106001600160401b03821117611533577f7543d68ffbde1802767cee31f14403e1b914f7249f14f2724e7398aa10de092395969750845282815260016020820183815287895260b1602052858920925183555191015582519182526020820152a280f35b604188634e487b7160e01b5f525260245ffd5b8251630925c89960e31b81528690fd5b5050346106ca57816003193601126106ca5760209060ff60a3541690519015158152f35b5050346106ca57816003193601126106ca5761106d906115986153da565b905191829182614784565b5050346106ca57816003193601126106ca5781908260a0545b8082106115cd576020848451908152f35b90926115fd6001916115de866147c8565b848060a01b0391549060031b1c168752609a6020528487205490614a24565b9301906115bc565b5050346106ca57816003193601126106ca5760a45490516001600160a01b039091168152602090f35b50346106de5760203660031901126106de57611648614706565b60a8546001600160a01b039190821633036116c0571691821561167d5750506001600160601b0360a01b60a554161760a55580f35b906020606492519162461bcd60e51b8352820152601f60248201527f496e76616c6964206c656e64696e67206d616e616765722061646472657373006044820152fd5b8351630925c89960e31b81528390fd5b5090602080600319360112610b455782359160a354936116f660ff8660081c1615614a31565b61170360ff861615614e8e565b60ff1994851660011760a355338652609a835281862054611ccd5761173061172a33615caf565b50615c43565b60058110159081611cba57828114611c805760a25460011c8611611c245761175781615aea565b8892919211611bd35761176933615111565b90606482029180830460641490151715611a02576117879089614947565b11611b825760b0546001600160a01b03908116939091908a9085611b61575b8b6117b1838c61498c565b9683158015611ac9575b50505050508660a254926117d460ac5460ad549061498c565b938c9481611a84575b505060a65416926024885180958193634fd41dad60e11b83528a8301525afa918215611a7a578a92611a4b575b50818a821215611a15575061181e906151cc565b9061271091820390828211611a02579061183791614947565b04925b600c87106119b05762278d00420180421161199d5789936118fa85946118e38960068c898f99819a829a8f875197611871896149c8565b83895286890190848252808a0192835260608a01938452600c60808b019504855260a08a01966101f4885260b260c08c019960018b52338352522098518955516001890155516002880155516003870155519085015551600584015551151591019060ff801983541691151516179055565b609a8a528a89852055609b8a524289852055614930565b6119058a8254614a24565b90556119138960ac54614a24565b60ac55818115611994575b3390f11561198a57907fac59582e5396aca512fa873a2047e7f4c80f8f55d4a06cb34a78a0187f62719f9291815190858252838201527f5660f932172e1664b98577a703dd9484d374b28e3bf8c87b345bee97af612412823392a2519283523392a260a3541660a35580f35b81513d87823e3d90fd5b506108fc61191e565b634e487b7160e01b8a526011825260248afd5b845162461bcd60e51b8152908101869052602660248201527f4c6f616e20616d6f756e7420746f6f20736d616c6c20666f7220616d6f7274696044820152653d30ba34b7b760d11b6064820152608490fd5b634e487b7160e01b8b526011865260248bfd5b94918a8213611a26575b505061183a565b9091945061271091820190818311611a025790611a4291614947565b04925f80611a1f565b9091508681813d8311611a73575b611a6381836149f6565b81010312610b415751905f61180a565b503d611a59565b86513d8c823e3d90fd5b9194509150670de0b6b3a764000090818102918183041490151715611ab6578891611aae9161496e565b925f806117dd565b634e487b7160e01b8c526011875260248cfd5b8285819382938390611b58575bf115611b4e57611b3b578651908152606088820152600b60608201526a37b934b3b4b730ba34b7b760a91b608082015283878201527f66aecc579aa1ef463c0ed1547c2cb6163370e6311a60cba815252acbb398f21360a03392a25f808b81806117bb565b634e487b7160e01b8b526021865260248bfd5b87513d8d823e3d90fd5b506108fc611ad6565b50505f838b5260b18852612710611b7b888d20548b614947565b04906117a6565b845162461bcd60e51b8152808501879052602560248201527f496e73756666696369656e7420636f6c6c61746572616c20666f722074686973604482015264103637b0b760d91b6064820152608490fd5b855162461bcd60e51b8152808601889052602560248201527f426f72726f7720616d6f756e74206578636565647320796f75722074696572206044820152641b1a5b5a5d60da1b6064820152608490fd5b835162461bcd60e51b8152808401869052603060248201527f426f72726f7720616d6f756e74206578636565647320617661696c61626c652060448201526f6c656e64696e6720636170616369747960801b6064820152608490fd5b835162461bcd60e51b815280840186905260146024820152734372656469742073636f726520746f6f206c6f7760601b6044820152606490fd5b634e487b7160e01b885260218352602488fd5b82606492519162461bcd60e51b8352820152601e60248201527f526570617920796f7572206578697374696e67206465627420666972737400006044820152fd5b5050346106ca57816003193601126106ca5760209060a2549051908152f35b50346106de57826003193601126106de5760a8546001600160a01b03163303611da2575060207f228f455d7bc3d0b24a3a08d7847f391c3e78fc8aeb83acf226b7a96ee162b8ac9160ff60a35461ff00828260081c161560081b169061ff00191617918260a355519160081c1615158152a180f35b9051630925c89960e31b8152fd5b5050346106ca57816003193601126106ca57602090517facd38b7c4e04b2b78fc2ca994eae1a3eb206005ffa4c11fcf4a9d81c94684b2d8152f35b5050346106ca5760203660031901126106ca5760209181906001600160a01b03611e13614706565b168152609d845220549051908152f35b5050346106ca57816003193601126106ca57602090516203f4808152f35b5050346106ca57816003193601126106ca576020905160828152f35b5050346106ca57816003193601126106ca5760209060ad549051908152f35b5050346106ca57816003193601126106ca576020905167011c37937e0800008152f35b5050346106ca57816003193601126106ca5760209060ac549051908152f35b5050346106ca5760203660031901126106ca5760209181906001600160a01b03611ee6614706565b168152609a845220549051908152f35b50346106de5760203660031901126106de573591609f54831015610ee75750611f20602092614811565b905491519160018060a01b039160031b1c168152f35b50346106de5760203660031901126106de5791819235815260b1602052206001815491015482519182526020820152f35b5050346106ca57816003193601126106ca5760209060ff60a35460081c1690519015158152f35b5050346106ca57816003193601126106ca5760a75490516001600160a01b039091168152602090f35b5050346106ca5760203660031901126106ca57602090611fd5614706565b505160508152f35b5050346106ca5760203660031901126106ca57606091906203f480906001600160a01b03612009614706565b168352609c6020528060ff818520541693609d6020522054815193151584526020840152820152f35b5090346106de57806003193601126106de5761204c614706565b6024359160018060a01b03809216938486526020926098845260ff83882054161561226457841561222c57338752609c845260ff83882054166121f45790849133885260a18552838820805460ff81161561218f575b505083516323b872dd60e01b815233928101928352306020840152604083019390935250909291908290849081906060015b038189895af1801561218557612131575b7ff1c0dd7e9b98bbff859029005ef89b127af049cd18df1a8d79f0b7e019911e56925084865260978252808620335f528252805f20612125858254614a24565b9055519283523392a380f35b8183813d831161217e575b61214681836149f6565b810103126107df576121787ff1c0dd7e9b98bbff859029005ef89b127af049cd18df1a8d79f0b7e019911e5693614a17565b506120e5565b503d61213c565b81513d88823e3d90fd5b60ff1916600117905560a05491925090600160401b8110156121e1578493926120d495926121c48360018a950160a0556147c8565b819291549060031b9133831b921b191617905591948193946120a2565b604183634e487b7160e01b5f525260245ffd5b50816107cc92515f80516020615eaf83398151915233918061221581614e03565b0390a25162461bcd60e51b81529182918201614e03565b50816107cc92515f80516020615eaf83398151915233918061224d816153ad565b0390a25162461bcd60e51b815291829182016153ad565b50816107cc92515f80516020615eaf83398151915233918061228581614da8565b0390a25162461bcd60e51b81529182918201614da8565b50346106de57816003193601126106de576122b5614706565b6024359060a354936122cd60ff8660081c1615614a31565b6122da60ff861615614e8e565b60ff1994851660011760a35582156125255760018060a01b0382169384875260209260978452828820335f52845284835f2054106124e357338852609a845282882054859291816123f9575b50509280929161237894878a5260978352838a20335f528352835f2061234d83825461498c565b9055835163a9059cbb60e01b8152339181019182526020820192909252909485918291604090910190565b03818a895af180156123ef576123aa575b5f80516020615e8f8339815191529250519283523392a360a3541660a35580f35b8183813d83116123e8575b6123bf81836149f6565b810103126123e4576123de5f80516020615e8f83398151915293614a17565b50612389565b8680fd5b503d6123b5565b81513d89823e3d90fd5b61246e91929350612438670de0b6b3a764000091898c5260978852868c20335f52885261243261242c8a895f205461498c565b9161549d565b90614947565b0491612446610e1833615b50565b606461246861245f61245a610e1833615b50565b615aea565b50503394614947565b04615553565b1161247c5783905f80612326565b82608492519162461bcd60e51b8352820152603b60248201527f5769746864726177616c20776f756c642076696f6c61746520746965722d626160448201527f73656420636f6c6c61746572616c20726571756972656d656e747300000000006064820152fd5b5082606492519162461bcd60e51b8352820152601760248201527f496e73756666696369656e7420636f6c6c61746572616c0000000000000000006044820152fd5b5162461bcd60e51b8152806107cc8186016153ad565b5050346106ca57816003193601126106ca5751908152602090f35b5050346106ca57816003193601126106ca5760a55490516001600160a01b039091168152602090f35b5050346106ca5760203660031901126106ca57602090610bf96125a0614706565b615361565b5050346106ca57816003193601126106ca576020905160058152f35b614769565b5090346106de57806003193601126106de576125e0614706565b60a85460243592916001600160a01b0391821633036126fd57169283156126bb57308414612681576064831161264a57507f4afae6838a181695abc7978598380d73bc2144eb38580c130f86e4b1e6531e159160209184865260998352818187205551908152a280f35b6020606492519162461bcd60e51b8352820152601260248201527153636f7265206f7574206f662072616e676560701b6044820152fd5b6020606492519162461bcd60e51b8352820152601560248201527424b73b30b634b21030b2323932b9b99d1039b2b63360591b6044820152fd5b6020606492519162461bcd60e51b8352820152601d60248201527f496e76616c696420616464726573733a207a65726f20616464726573730000006044820152fd5b8251630925c89960e31b81528590fd5b5050346106ca57816003193601126106ca57602090517f96737339a958f216173e690d06f324072e6dc3146e04c060bd723906d6b190768152f35b5050346106ca57806003193601126106ca57602090610bf9612768614706565b61277061471c565b90615294565b5050346106ca5760203660031901126106ca5760209160ff9082906001600160a01b036127a1614706565b16815260a1855220541690519015158152f35b509134610ee7576020366003190112610ee7576127cf614706565b6127e761245a610e186127e184615111565b93615b50565b9260508082029350811591840414171590506128205760209450606490049150808210156128185750905b51908152f35b905090612812565b634e487b7160e01b835260118552602483fd5b50346106de57816003193601126106de578160209361285061471c565b9235815260658552209060018060a01b03165f52825260ff815f20541690519015158152f35b828434610ee7576020366003190112610ee7575061289a612895614706565b61521e565b825191151582526020820152f35b5050346106ca57816003193601126106ca576020905166b1a2bc2ec500008152f35b5050346106ca57816003193601126106ca57602090517fce802e42c93d0fbd61dfc706a0e806b78ac046397e07510da2f223464e4788e08152f35b5050346106ca57816003193601126106ca5760209060af549051908152f35b5050346106ca57816003193601126106ca57602090517f0e0e24c52bc4f24612e3f568966757426acd82325205933a9270e1ce7c4d93c28152f35b5050346106ca57806003193601126106ca576129f0906129db6129d6610e18612986614706565b866024359560018060a01b036129a18160a5541633146151dc565b83168252609a6020528181812055609b6020528181812055609c60205280822060ff198154169055609d602052812055615b50565b614930565b6129e682825461498c565b905560ad54614a24565b60ad5580f35b50346106de57816003193601126106de57612a0f614706565b91612a1861471c565b60a85490936001600160a01b0393909184163303612a69575082168085526098602052612a4a60ff83872054166150c5565b8452609e602052832091166001600160601b0360a01b82541617905580f35b8251630925c89960e31b8152fd5b50346106de5760203660031901126106de5760e09282906001600160a01b03612a9e614706565b16815260b26020522080549260018201549260028301546003840154918401549260ff600660058701549601541695815197885260208801528601526060850152608084015260a0830152151560c0820152f35b5050346106ca5760203660031901126106ca5760209160ff9082906001600160a01b03612b1d614706565b1681526098855220541690519015158152f35b5090346106de5760209283600319360112610ee757612b4d614706565b9260a254612b6060ac5460ad549061498c565b8115612cc157670de0b6b3a764000090818102918183041490151715612cae5790612b8a9161496e565b935b60a6548451634fd41dad60e11b8152838101969096528690869060249082906001600160a01b03165afa948515612ca4578395612c73575b50610e18612bd191615b50565b6005811015612c6057612be56003916148d5565b500154849083811215612c2357612c009192939495506151cc565b926127109384039284841161084457505090612c1b91614947565b049051908152f35b92808413612c35575b50505050612812565b9091929394506127109384019283851161084457505090612c5591614947565b04905f808080612c2c565b634e487b7160e01b835260218252602483fd5b9094508581813d8311612c9d575b612c8b81836149f6565b81010312610b41575193610e18612bc4565b503d612c81565b84513d85823e3d90fd5b634e487b7160e01b845260118352602484fd5b50508193612b8c565b5090346106de5760203660031901126106de5781359260aa54841015610ee75750612cf660a0936148d5565b508054926001820154926002830154916003840154930154938151958652602086015284015260608301526080820152f35b50346106de5760203660031901126106de57612d42614706565b60a85491906001600160a01b03908184163303612da95716928315612d745750506001600160a01b0319161760a85580f35b906020606492519162461bcd60e51b8352820152600f60248201526e496e76616c6964206164647265737360881b6044820152fd5b8451630925c89960e31b81528390fd5b509190346106ca57612dca36614846565b505060609160b354603c8101809111612f8057612de8904211614eca565b8151809160a05480835283602080940160a084527f78fdc8d422c49ced035a9edf18d00d3c6a8d81df210f3e5e448e045e77b41e8892845b86828210612f6157505050612e37925003846149f6565b612e41835161519a565b938193825b8151811015612ecc576001600160a01b03612e618284614a72565b5116808552609c865260ff8486205416612e7f575b50600101612e46565b609d8652838520546203f4808101809111612eb9574210612e765786612eb291612eac600194998b614a72565b52614a86565b9590612e76565b634e487b7160e01b865260118b52602486fd5b5084905085878215612f555750612ee28261519a565b935b828110612f2d5750505061106d90612f08612f166001948351928391888301614784565b03601f1981018352826149f6565b905b808051958695151586528501528301906148b0565b6001906001600160a01b03612f428285614a72565b5116612f4e8288614a72565b5201612ee4565b91505061106d91612f18565b85546001600160a01b0316845260019586019589955093019201612e20565b634e487b7160e01b825260118552602482fd5b5050346106ca5760203660031901126106ca57602090610bf9612fb4614706565b615111565b5050346106ca57816003193601126106ca5760209060ff60a95460a01c1690519015158152f35b5050346106ca5760203660031901126106ca5760209181906001600160a01b03613008614706565b16815260ae845220549051908152f35b5050346106ca5760203660031901126106ca57606091613036614706565b918060018060a01b03841692838152609a6020526130578282205495615111565b938152609b60205220549181519384526020840152820152f35b5050346106ca57816003193601126106ca5760209051600a8152f35b5050346106ca57816003193601126106ca5760209051603c8152f35b5050346106ca5760203660031901126106ca576020916001600160a01b03908290826130d3614706565b16808252609886526130ea60ff84842054166150c5565b8152609e85522054169051908152f35b5050346106ca57816003193601126106ca57602090516103848152f35b5050346106ca57816003193601126106ca57602090516276a7008152f35b5050346106ca57816003193601126106ca5751600a47048152602090f35b5090346106de57806003193601126106de5761316d614706565b906024359182151592838103610b415760a8546001600160a01b039290831633036132a55782169485875260986020526131b5828589209060ff801983541691151516179055565b609f549187805b84811061327b575b5081613272575b50613201575b5050507f15f5cc64ca777db85f6c05fdba671568758b38329616d4d4b43bb8b092fe9a8d9160209151908152a280f35b600160401b82101561325f5750917f15f5cc64ca777db85f6c05fdba671568758b38329616d4d4b43bb8b092fe9a8d939161324484600160209601609f55614811565b819291549060031b9188831b921b19161790559181936131d1565b604190634e487b7160e01b5f525260245ffd5b9050155f6131cb565b888661328683614811565b90549060031b1c161461329b576001016131bc565b505060015f6131c4565b8351630925c89960e31b81528690fd5b5050346106ca57806003193601126106ca576020916132d2614706565b906001600160a01b03908390826132e761471c565b168152609786522091165f528252805f20549051908152f35b5050346106ca5760203660031901126106ca57606090613326613321614706565b614fc8565b919290815193151584526020840152820152f35b5050346106ca5760203660031901126106ca5760209061336a613361610e18610c21614706565b91518092614748565bf35b5050346106ca57816003193601126106ca57602090610bf9614f20565b5050346106ca57816003193601126106ca57602090517f430b074324c1d9f1ce97c9e9efd8cc6b779c8a501b53808a5cafe19682f95dd58152f35b50346106de576133d336614846565b60b393919354603c8101809111613569576133ef904211614eca565b4260b35583019260209081818603126107df578035906001600160401b0382116123e457019380601f860112156107df57843561342b81614f09565b95613438855197886149f6565b818752838088019260051b820101928311613565578301905b82821061354657505050845b8451811015613542576001600160a01b03806134798388614a72565b511690818852609c845260ff8589205416613499575b505060010161345d565b609d8452848820546203f480810180911161352f57908892914210156134c0575b5061348f565b60a55416803b156106de57855163bcebb1d760e01b8152308882019081526001600160a01b039093166020840152918391839182908490829060400103925af1801561352557613511575b806134ba565b61351a906149e3565b6107df57855f61350b565b85513d84823e3d90fd5b634e487b7160e01b895260118752602489fd5b8580f35b81356001600160a01b0381168103610b41578152908301908301613451565b8780fd5b634e487b7160e01b865260118452602486fd5b5050346106ca57816003193601126106ca5780602092338152609a845220549051908152f35b5050346106ca57816003193601126106ca57602090517f5fef09193e4e8110de1cc5ba269e889a5fb9093ba33c4df4b67dc2eaa1ca1fff8152f35b5050346106ca57816003193601126106ca5760a354905160109190911c6001600160a01b03168152602090f35b505f366003190112610b415760a3549161362a60ff8460081c1615614a31565b61363760ff841615614e8e565b600160ff198094161760a355335f52602090609a8252805f205480156138055734156137d3578086913411805f146137cc5781955b335f52609a8652845f2061368188825461498c565b905561368f8760ad54614a24565b60ad556136a16129d6610e1833615b50565b6136ac88825461498c565b9055335f52609c8652845f2088815460ff81166137b8575b505060a7546001600160a01b0316905080613744575b5050613717575b5050907f0516911bcc3a0a7412a44601057c0a0a1ec628bde049a84284bc42886653448891519283523392a260a3541660a35580f35b818061372481933461498c565b81811561373b575b3390f1156106d557845f6136e1565b506108fc61372c565b8091929394503b15610b415784516340c10f1960e01b815233928101928352662386f26fc1000088046020840152915f91839182908490829060400103925af180156137ae57613799575b90818893926136da565b6137a5919297506149e3565b5f95905f61378f565b84513d5f823e3d90fd5b169055609d86525f858120555f88816136c4565b349561366c565b505162461bcd60e51b815291820152600d60248201526c09aeae6e840e6cadcc8408aa89609b1b604482015260649150fd5b505162461bcd60e51b815291820152601060248201526f4e6f206465627420746f20726570617960801b604482015260649150fd5b8234610b41575f366003190112610b415760209060b3549051908152f35b8234610b41576020366003190112610b415760609061387e61245a610e18610c21614706565b91929081519384526020840152820152f35b5034610b41576020366003190112610b4157359060a054821015610b4157611f206020926147c8565b5034610b415781600319360112610b41576138d261471c565b90336001600160a01b038316036138f0576138ee925035615a77565b005b608490602084519162461bcd60e51b8352820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152fd5b509034610b41576020366003190112610b415760a8546001600160a01b03163303610ff357503560af55005b8234610b41575f366003190112610b4157602090517ffed613f2d4bec2209ff904769fa3c094c155ec5048c0bb2e17f16e523671ca2c8152f35b509034610b415780600319360112610b41576139cb614706565b6024359160018060a01b039384831694855f526020936098855260ff845f20541615613c1f57865f5260978552835f20335f52855285845f205410613be757335f52609c855260ff845f205416613bc657613a4b90670de0b6b3a7640000613a44613a3e613a3833615111565b9361549d565b89614947565b049061498c565b90606482029180830460641490151715613bb357602490335f52609a865285855f20549160a45416865193848092631ee1b90b60e21b82528c898301525afa908115613ba9575f91613b78575b613aa29250614947565b11613b4157908284613acc9493875f5260978352835f20335f528352835f2061234d83825461498c565b03815f895af18015613b3757613af6575b5f80516020615e8f8339815191529250519283523392a3005b8183813d8311613b30575b613b0b81836149f6565b81010312610b4157613b2a5f80516020615e8f83398151915293614a17565b50613add565b503d613b01565b50513d5f823e3d90fd5b816107cc92515f80516020615eaf833981519152339180613b6181614e3b565b0390a25162461bcd60e51b81529182918201614e3b565b90508582813d8311613ba2575b613b8f81836149f6565b81010312610b4157613aa2915190613a98565b503d613b85565b85513d5f823e3d90fd5b601183634e487b7160e01b5f525260245ffd5b6107cc838580515f80516020615eaf83398151915233918061221581614e03565b6107cc838580515f80516020615eaf833981519152339180613c0881614dd4565b0390a25162461bcd60e51b81529182918201614dd4565b6107cc838580515f80516020615eaf83398151915233918061228581614da8565b5034610b41576020366003190112610b415760e091613c5d614706565b5f60c08351613c6b816149c8565b82815282602082015282858201528260608201528260808201528260a0820152015260018060a01b03165f5260b2602052805f20815191613cab836149c8565b81549384845260018301549160208501928352600284015481860190815260038501549260608701938452850154936080870194855260c060ff600660058901549860a08b01998a5201541697019615158752825197885251602088015251908601525160608501525160808401525160a083015251151560c0820152f35b509034610b415760c0366003190112610b415760a854823592906001600160a01b03163303611da25750613d9d6138ee92613d6860aa548210614d26565b825192613d7484614999565b6024358452604435602085015260643590840152608435606084015260a43560808401526148d5565b90614d61565b5034610b415781600319360112610b41573590613dbe61471c565b90825f526065602052613dd66001825f200154615804565b825f526065602052805f209160018060a01b031691825f5260205260ff815f20541615613dff57005b825f526065602052805f20825f526020525f20600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d5f80a4005b5034610b41576020366003190112610b415735906001600160401b0382168203610b4157610bf9602092614cd6565b8234610b41575f366003190112610b41578051609f80548083525f918252602080840194927f0bc14066c33013fe88f66e314e4cf150b0b2d4d6451a1a51dbbd1c27cd11de2892915b828210613ed55761106d8686611063828b03836149f6565b83546001600160a01b031687529586019560019384019390910190613ebd565b509034610b41576020366003190112610b4157602091355f52606582526001815f2001549051908152f35b34610b41575f366003190112610b41576138ee614a94565b50905f366003190112610b4157613f5760ff60a35460081c1615614a31565b335f52602060b28152815f20600681019360ff855416156141b5578082019182549283341061417257600382019182548042106141435762093a8081018091116141305780421161406b575b50906001613fda920194613fb881875461498c565b8655335f52609a8752613fcf885f2091825461498c565b90555460ad54614a24565b60ad5580549162278d0083018093116140585750907fd3cf6d8c55fed98c7b9f9d18d95a51dbdb316503bb854fc1f676c8974cb10f4f9291555492838151933485528401523392a21561402957005b805460ff19169055337f59bd56f70adeefb0cd83dca0f34f066bed6ee442068f3d07b5fc974b944d5aa65f80a2005b601190634e487b7160e01b5f525260245ffd5b614077610e1833615b50565b600581101561411d5791600191613fda94935f5260b18952620151806140a3848c5f200154924261498c565b0480151580614114575b6140bc575b5050919250613fa3565b6140e161271061016d6140d887870194610e7c86549788614947565b04048093614a24565b905589519081527fce0d6b567089a0bce35e0693cdb625006f0cf915f9f3686bb0343bc2c667c1b2893392a28a806140b2565b508115156140ad565b602186634e487b7160e01b5f525260245ffd5b601185634e487b7160e01b5f525260245ffd5b875162461bcd60e51b81528086018890526009602482015268546f6f206561726c7960b81b6044820152606490fd5b855162461bcd60e51b8152808401869052601860248201527f496e73756666696369656e7420696e7374616c6c6d656e7400000000000000006044820152606490fd5b835162461bcd60e51b8152908101839052600e60248201526d27379030b1ba34bb32903637b0b760911b6044820152606490fd5b8234610b41576020366003190112610b41576020906001600160a01b038061420f614706565b165f52609e8352815f2054169051908152f35b8234610b41575f366003190112610b4157602090517f8b473ac3e35dc431c1dba0191b7615ccaca6bfeb14f9573dcaae9e614fbe8b208152f35b5034610b41576020366003190112610b4157614276614706565b60a8546001600160a01b039190821633036116c057169182156142cc5760b080546001600160a01b03191684179055827f279ea638680bba6a87fddd8bcdbc37d94eee92841e1dfec2ab0f79662c7093115f80a2005b906020606492519162461bcd60e51b8352820152601760248201527f496e76616c6964207265736572766520616464726573730000000000000000006044820152fd5b509034610b41576020366003190112610b4157813591821515809303610b415760a8546001600160a01b03163303611da25760a9805460ff60a01b191660a085901b60ff60a01b1617905581518381527fb01450010edba5be11857fe89630b2ff764d237a9f9f77ab651643effd86998890602090a1005b8234610b41575f366003190112610b415760209051600a8152f35b8234610b41575f366003190112610b415760209051610e108152f35b8234610b41576020366003190112610b4157602090610bf9612fb4614706565b509034610b415780600319360112610b41576143f8614706565b9160243590335f52602093609c855260ff845f205416156144da5783516323b872dd60e01b815233928101928352306020840152604083018490526001600160a01b039091169185908290819060600103815f865af180156137ae576144a6575b505f5260978352815f20335f528352614476825f20918254614a24565b90556144813361521e565b5061448857005b335f908152609c8352818120805460ff19169055609d909252812055005b8481813d83116144d3575b6144bb81836149f6565b81010312610b41576144cc90614a17565b5084614459565b503d6144b1565b835162461bcd60e51b8152808301869052601a60248201527f4163636f756e74206e6f7420696e206c69717569646174696f6e0000000000006044820152606490fd5b509034610b41576020366003190112610b4157614538614706565b91614545610e1884615b50565b9161455561245a610e1886615b50565b50506001600160a01b0385165f908152609a602052829020549490929085156145e05761458990856064612468878a614947565b9060648202918083046064149015171561405857506080946145aa9161496e565b90818311156145da576145bd828461498c565b925b6145cb82518096614748565b60208501528301526060820152f35b5f6145bd565b50506080935081905f926145bf565b8234610b41576020366003190112610b41576020906001600160a01b03614614614706565b165f52609c825260ff815f20541690519015158152f35b8234610b41575f366003190112610b415760a95490516001600160a01b039091168152602090f35b5034610b41576020366003190112610b41573563ffffffff60e01b8116809103610b4157602091637965db0b60e01b8214918215614695575b50519015158152f35b6301ffc9a760e01b1491508361468c565b8234610b41576020366003190112610b41576146c0614706565b60a8549092906001600160a01b031633036146fa5760a3805462010000600160b01b031916601085901b62010000600160b01b0316179055005b630925c89960e31b8152fd5b600435906001600160a01b0382168203610b4157565b602435906001600160a01b0382168203610b4157565b604435906001600160a01b0382168203610b4157565b9060058210156147555752565b634e487b7160e01b5f52602160045260245ffd5b34610b41575f366003190112610b4157602047604051908152f35b60209060206040818301928281528551809452019301915f5b8281106147ab575050505090565b83516001600160a01b03168552938101939281019260010161479d565b60a0548110156147fd5760a05f527f78fdc8d422c49ced035a9edf18d00d3c6a8d81df210f3e5e448e045e77b41e8801905f90565b634e487b7160e01b5f52603260045260245ffd5b609f548110156147fd57609f5f527f0bc14066c33013fe88f66e314e4cf150b0b2d4d6451a1a51dbbd1c27cd11de2801905f90565b906020600319830112610b41576004356001600160401b0392838211610b415780602383011215610b41578160040135938411610b415760248483010111610b41576024019190565b5f5b8381106148a05750505f910152565b8181015183820152602001614891565b906020916148c98151809281855285808601910161488f565b601f01601f1916010190565b60aa548110156147fd5760059060aa5f52027f550d3de95be0bd28a79c3eb4ea7f05692c60b0602e48b49461e703379b08a71a01905f90565b34610b41575f366003190112610b41576020604051670de0b6b3a76400008152f35b6005811015614755575f5260ab60205260405f2090565b8181029291811591840414171561495a57565b634e487b7160e01b5f52601160045260245ffd5b8115614978570490565b634e487b7160e01b5f52601260045260245ffd5b9190820391821161495a57565b60a081019081106001600160401b038211176149b457604052565b634e487b7160e01b5f52604160045260245ffd5b60e081019081106001600160401b038211176149b457604052565b6001600160401b0381116149b457604052565b90601f801991011681019081106001600160401b038211176149b457604052565b51908115158203610b4157565b9190820180921161495a57565b15614a3857565b60405162461bcd60e51b815260206004820152601260248201527110dbdb9d1c9858dd081a5cc81c185d5cd95960721b6044820152606490fd5b80518210156147fd5760209160051b010190565b5f19811461495a5760010190565b614a9c6153da565b5f5b8151811015614b3e576001600160a01b0380614aba8385614a72565b511690815f52602091609e8352604091825f205416614adf575b505050600101614a9e565b614af6614aee610e109261568b565b90504261498c565b11614b015780614ad4565b60a3805461ff00191661010017905551600181527f228f455d7bc3d0b24a3a08d7847f391c3e78fc8aeb83acf226b7a96ee162b8ac9350909150a1565b505060a2548015159081614c9f575b50614b845760a05460a5545f91906001600160a01b03908116835b838110614bea575050508015159182614bc0575b5050614b8457565b61010061ff001960a354161760a3557f228f455d7bc3d0b24a3a08d7847f391c3e78fc8aeb83acf226b7a96ee162b8ac602060405160018152a1565b90915060648102908082046064149015171561495a57600591614be29161496e565b115f80614b7c565b614bf3816147c8565b905460408051632cf5889360e01b815230600482015260039390931b9190911c85166001600160a01b031660248301529060208082604481885afa928315614c9657505f92614c60575b5050614c4c575b600101614b68565b93614c58600191614a86565b949050614c44565b90809250813d8311614c8f575b614c7781836149f6565b81010312610b4157614c8890614a17565b5f80614c3d565b503d614c6d565b513d5f823e3d90fd5b9050614cb060ac5460ad549061498c565b60648102908082046064149015171561495a57605f91614ccf9161496e565b115f614b4d565b6001600160401b0380911661012c811115614d2057610352811015614d195761012b190181811161495a57811660640280821690810361495a5761022690041690565b5050606490565b50505f90565b15614d2d57565b60405162461bcd60e51b815260206004820152600c60248201526b24b73b30b634b2103a34b2b960a11b6044820152606490fd5b9190614d95576080816004925184556020810151600185015560408101516002850155606081015160038501550151910155565b634e487b7160e01b5f525f60045260245ffd5b606090602081526011602082015270151bdad95b881b9bdd08185b1b1bddd959607a1b60408201520190565b606090602081526014602082015273496e73756666696369656e742062616c616e636560601b60408201520190565b60609060208152601960208201527f4163636f756e7420697320696e206c69717569646174696f6e0000000000000060408201520190565b60809060208152603260208201527f5769746864726177616c20776f756c64206d616b6520706f736974696f6e20756040820152711b99195c98dbdb1b185d195c985b1a5e995960721b60608201520190565b15614e9557565b60405162461bcd60e51b815260206004820152600d60248201526c4e6f207265656e7472616e637960981b6044820152606490fd5b15614ed157565b60405162461bcd60e51b815260206004820152601060248201526f155c1ad9595c081d1a1c9bdd1d1b195960821b6044820152606490fd5b6001600160401b0381116149b45760051b60200190565b60a2548015614f91575f905f60a0545b808210614f5857505060648202918083046064149015171561495a57614f559161496e565b90565b9092614f89600191614f69866147c8565b848060a01b0391549060031b1c165f52609a60205260405f205490614a24565b930190614f30565b505f90565b90816060910312610b415780516001600160401b0381168103610b4157916040614fc260208401614a17565b92015190565b60a9549060ff8260a01c161580156150b4575b6150aa5760405163d3dd2bdf60e01b81526001600160a01b0391821660048201529160609183916024918391165afa5f918291829181615076575b50615027575b5050505f905f905f90565b80615064575b8061504e575b61503d578061501c565b61504690614cd6565b916001929190565b506276a700820180831161495a57421115615033565b506001600160401b038116151561502d565b9150925061509c915060603d6060116150a3575b61509481836149f6565b810190614f96565b925f615016565b503d61508a565b50505f905f905f90565b506001600160a01b03821615614fdb565b156150cc57565b60405162461bcd60e51b815260206004820152601f60248201527f546f6b656e206e6f7420616c6c6f77656420617320636f6c6c61746572616c006044820152606490fd5b905f9161511c6153da565b925f5b8451811015615194576001600160a01b038061513b8388614a72565b511690815f5260209060978252604091825f209187165f52525f20549081615168575b505060010161511f565b92670de0b6b3a764000061518561518c936124326001969761549d565b0490614a24565b91905f61515e565b50925050565b906151a482614f09565b6151b160405191826149f6565b82815280926151c2601f1991614f09565b0190602036910137565b600160ff1b811461495a575f0390565b156151e357565b60405162461bcd60e51b815260206004820152601360248201527227b7363c902632b73234b733a6b0b730b3b2b960691b6044820152606490fd5b9061522882615111565b6001600160a01b0383165f908152609a602052604090205492831561528857811561527e5761245a610e1861525c92615b50565b5050926064820291820460640361495a576152769161496e565b918210159190565b505090505f905f90565b50600192505f19919050565b91909160018060a01b038084165f52609760205260405f209082165f5260205260405f205492609a60205260405f205490811561535c576152d49061549d565b90615318670de0b6b3a764000093846152ed8589614947565b04926064612468615300610e1885615b50565b9261531061245a610e1887615b50565b505090614947565b9081811115615353579061532b9161498c565b82810292818404149015171561495a576153449161496e565b9180831161534f5750565b9150565b505f9450505050565b505050565b6001600160a01b0381165f908152609a60205260409020549081156153a65761538990615111565b9060648202918083046064149015171561495a57614f559161496e565b50505f1990565b6060906020815260126020820152710416d6f756e74206d757374206265203e20360741b60408201520190565b609f545f805b82811061545557506153f19061519a565b905f805b8281106154025750505090565b61540b81614811565b905460039190911b1c6001600160a01b03165f8181526098602052604090205460ff1661543c575b506001016153f5565b8261544e91612eac6001949588614a72565b9190615433565b61545e81614811565b60018060a01b0391549060031b1c165f52609860205260ff60405f205416615489575b6001016153e0565b90615495600191614a86565b919050615481565b600460206154aa8361568b565b509260018060a01b038091165f52609e825260405f2054166040519283809263313ce56760e01b82525afa8015615548575f9061550b575b60ff91501660120360ff811161495a5760ff1690604d821161495a57614f5591600a0a90614947565b506020813d602011615540575b81615525602093836149f6565b81010312610b41575160ff81168103610b415760ff906154e2565b3d9150615518565b6040513d5f823e3d90fd5b9161555d90615b50565b90600581101561475557615570816148d5565b50508061559d5750605f11156155835790565b605f810290808204605f149015171561495a576064900490565b600181036155d45750605581106155c95750605a810290808204605a149015171561495a576064900490565b605211156155835790565b600281036156215750604b8110615600575060558102908082046055149015171561495a576064900490565b604811614f5557605c810290808204605c149015171561495a576064900490565b60031461562c575090565b6041811061564f575060508102908082046050149015171561495a576064900490565b603e111561565a5790565b605a810290808204605a149015171561495a576064900490565b519069ffffffffffffffffffff82168203610b4157565b9060018060a01b03918281165f52609e602052604092835f20541680156157cb579260a0600494825195868092633fabe5a360e21b82525afa8015613b37575f80935f965f93615771575b506156ea6156e4884261498c565b91615dda565b1061573f5769ffffffffffffffffffff80911691161061570957509190565b5162461bcd60e51b815260206004820152601060248201526f5374616c6520726f756e64206461746160801b6044820152606490fd5b825162461bcd60e51b815260206004820152600b60248201526a5374616c6520707269636560a81b6044820152606490fd5b94509550505060a0823d60a0116157c3575b8161579060a093836149f6565b81010312610b41576157a182615674565b9360208301516157b8608060608601519501615674565b95909395915f6156d6565b3d9150615783565b835162461bcd60e51b8152602060048201526012602482015271141c9a58d94819995959081b9bdd081cd95d60721b6044820152606490fd5b805f52602060658152604091825f20335f52825260ff835f2054161561582957505050565b3383519160608301906001600160401b0391848110838211176149b4578652602a845284840190863683378451156147fd5760308253845193600194600110156147fd576078602187015360295b858111615a3657506159f45786519260808401908111848210176149b4578752604283528583019360603686378351156147fd57603085538351600110156147fd57607860218501536041905b8082116159b157505061596f576107cc9386936159539361594460489461591b9a519a8b957f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008c880152518092603788019061488f565b8401917001034b99036b4b9b9b4b733903937b6329607d1b60378401525180938684019061488f565b010360288101875201856149f6565b5192839262461bcd60e51b8452600484015260248301906148b0565b60648587519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f811660108110156147fd576f181899199a1a9b1b9c1cb0b131b232b360811b901a6159e08487615e7d565b5360041c91801561495a575f1901906158c4565b60648688519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b90600f811660108110156147fd576f181899199a1a9b1b9c1cb0b131b232b360811b901a615a648389615e7d565b5360041c90801561495a575f1901615877565b90815f52606560205260405f209060018060a01b031690815f5260205260ff60405f205416615aa4575050565b815f52606560205260405f20815f5260205260405f2060ff19815416905533917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b5f80a4565b600581101561475557615afc906148d5565b509060405190615b0b82614999565b82548252600183015460208301526064615b49608060028601549485604082015260046003880154978860608401520154918291015260a254614947565b0491929190565b60a95460ff8160a01c1680615c31575b615b80575b506001600160a01b03165f9081526099602052604090205490565b60405163d3dd2bdf60e01b81526001600160a01b038381166004830152909160609183916024918391165afa5f91815f915f93615c0c575b50615bc5575b5050615b65565b80615bfa575b615bd6575b80615bbe565b6276a700810180911161495a57421115615bf05780615bd0565b614f559150614cd6565b506001600160401b0382161515615bcb565b91509250615c29915060603d6060116150a35761509481836149f6565b91925f615bb8565b506001600160a01b0381161515615b60565b60aa54905f5b828110615c695750505f19810190811161495a5760058110156147555790565b615c72816148d5565b505482101580615c98575b615c8957600101615c49565b91505060058110156147555790565b506001615ca4826148d5565b500154821115615c7d565b60a95460ff8160a01c1680615da3575b615ce3575b506001600160a01b03165f908152609960205260409020549081151590565b60405163d3dd2bdf60e01b81526001600160a01b038381166004830152909160609183916024918391165afa5f918291829181615d7b575b50615d28575b5050615cc4565b81615d68575b81615d50575b50615d40578080615d21565b615d4a9150614cd6565b90600190565b90506276a700810180911161495a574211155f615d34565b6001600160401b03831615159150615d2e565b91509250615d98915060603d6060116150a35761509481836149f6565b91929091905f615d1b565b506001600160a01b0381161515615cbf565b60aa5490600160401b8210156149b457613d9d826001615dd8940160aa556148d5565b565b6001600160a01b039081165f81815260ae602052604090205490919080615e77575060209060a4541691602460405180948193631a650cc760e01b835260048301525afa908115615548575f91615e3d575b50615e375761038490565b610e1090565b90506020813d602011615e6f575b81615e58602093836149f6565b81010312610b4157615e6990614a17565b5f615e2c565b3d9150615e4b565b91505090565b9081518110156147fd57016020019056fe45892a46e6cef329bb642da6d69846d324db43d19008edc141ed82382eda1bee3c364b9decdac59fbe037e99687219ac0feed46572bfbcbd5284b6b8e67f402da2646970667358221220fb6dea78874217152c57d1c31f54a936dad18370b222418bb219961391b0eea664736f6c63430008180033",
   "linkReferences": {},
   "deployedLinkReferences": {}
 }
diff --git a/Lending (BC) + frontend/loan-management/frontend/src/abis/NullifierRegistry.json b/Lending (BC) + frontend/loan-management/frontend/src/abis/NullifierRegistry.json
index 168b6a6..73fa113 100644
--- a/Lending (BC) + frontend/loan-management/frontend/src/abis/NullifierRegistry.json	
+++ b/Lending (BC) + frontend/loan-management/frontend/src/abis/NullifierRegistry.json	
@@ -500,8 +500,8 @@
       "type": "function"
     }
   ],
-  "bytecode": "0x60808060405234610016576112af908161001b8239f35b5f80fdfe6080604081815260049182361015610015575f80fd5b5f3560e01c90816301ffc9a714610d6c575080630a8ee44214610d1e578063206137aa14610cf257806322dc7b4c14610cf2578063248a9ca314610cc85780632f2ff15d14610c25578063305ccc39146108ff57806336568abe1461086e5780633c6663e41461081857806345d92d77146107dc57806391d1485414610798578063a217fddf1461077e578063a691340614610507578063ab2cf9a7146103f9578063ad872a861461034f578063c404e8f714610315578063c4d66de8146101245763d547741f146100e5575f80fd5b3461012057806003193601126101205761011e91356101196001610107610dd4565b93835f5260656020525f200154610f63565b6110ef565b005b5f80fd5b509034610120576020908160031936011261012057610141610dbe565b5f5460ff8160081c161592838094610308575b80156102f1575b156102975760ff198281166001175f559184610285575b5060ff5f5460081c161561022e57505f808052606585528581206001600160a01b039093168082529285528590205460ff16156101e5575b50506101b257005b7f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989161ff00195f54165f555160018152a1005b5f805260658452845f20825f5284526001855f209182541617905533905f7f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8180a45f806101aa565b855162461bcd60e51b8152908101859052602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b61ffff1916610101175f908155610172565b855162461bcd60e51b8152908101859052602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b15801561015b5750600160ff83161461015b565b50600160ff831610610154565b5034610120575f36600319011261012057602090517f73b05977f7ae980f06c4acdccf772c9a94862be00025bd3cc9f4cf25ebf226658152f35b50346101205760209081600319360112610120576001600160a01b039182610375610dbe565b165f5260988152815f209082518082845491828152019081945f52835f20905f5b8181106103e357505050816103ac910382610f41565b8351938285019183865251809252840192915f5b8281106103cd5785850386f35b83518716855293810193928101926001016103c0565b8254891684529285019260019283019201610396565b503461012057606036600319011261012057610413610dbe565b60018060a01b03808216805f526020946099865260ff855f205416156104c457505f5260988452825f20908351918291868301946bffffffffffffffffffffffff199060601b16855260348301825490925f52875f20915f905b898383106104a75789898861049d6060828b60243581526044358882015246878201520385810184520182610f41565b5190209051908152f35b84548216865287965090940193600193840193919091019061046d565b845162461bcd60e51b8152908101869052601f60248201527f55736572206d7573742073656c656374206163636f756e7473206669727374006044820152606490fd5b5034610120576020806003193601126101205767ffffffffffffffff8335818111610120576105399036908601610dea565b919094335f526099845260ff855f20541661073b5782151580610730575b156106ed575f5b8381106106815750335f5260988452845f2091831161066e5768010000000000000000831161066e57508054828255808310610649575b5084905f52825f20905f5b83811061062f57505050335f5260998252825f2090600191600160ff198254161790558351938184860185875252840194925f5b82811061060457337fbebeb42e8fef07a2e247ef86e166d436d7a23221dd22e91e26eaba870c0115c087890388a2005b909192939586359060018060a01b0382168092036101205790815282019582019392919083016105d4565b6001908561063c84610e54565b93019281850155016105a0565b815f5282845f2091820191015b8181106106635750610595565b5f8155600101610656565b604190634e487b7160e01b5f525260245ffd5b6001600160a01b0361069c61069783878b610e44565b610e54565b16156106aa5760010161055e565b855162461bcd60e51b8152808301869052601760248201527f496e76616c6964206163636f756e7420616464726573730000000000000000006044820152606490fd5b845162461bcd60e51b8152908101849052601a60248201527f496e76616c6964206e756d626572206f66206163636f756e74730000000000006044820152606490fd5b50600a831115610557565b845162461bcd60e51b8152908101849052601960248201527f4163636f756e747320616c72656164792073656c6563746564000000000000006044820152606490fd5b5034610120575f36600319011261012057602090515f8152f35b50346101205780600319360112610120576020916107b4610dd4565b90355f5260658352815f209060018060a01b03165f52825260ff815f20541690519015158152f35b5034610120576020366003190112610120576020906001600160a01b03610801610dbe565b165f526099825260ff815f20541690519015158152f35b5034610120578060031936011261012057610831610dbe565b906024359160018060a01b038091165f526098602052815f2080548410156101205760209361085f91610e1b565b92905490519260031b1c168152f35b509034610120578160031936011261012057610888610dd4565b90336001600160a01b038316036108a45761011e9250356110ef565b608490602084519162461bcd60e51b8352820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152fd5b503461012057806003193601126101205781359061091b610dd4565b907f73b05977f7ae980f06c4acdccf772c9a94862be00025bd3cc9f4cf25ebf2266591825f5260209260658452825f20335f52845260ff835f20541615610a4c5750835f526097835260ff825f205416610a10576001600160a01b03165f818152609984528290205490949060ff16156109cf5750907fc8b7c9b2394d9099ac656f1e2845a7f53881c1deeb04adf87cb4babb794fc35091835f5260978252805f20600160ff1982541617905551428152a3005b82606492519162461bcd60e51b8352820152601d60248201527f5573657220686173206e6f2073656c6563746564206163636f756e74730000006044820152fd5b815162461bcd60e51b81528086018490526016602482015275139d5b1b1a599a595c88185b1c9958591e481d5cd95960521b6044820152606490fd5b85929150610a5933611194565b908251610a6581610f11565b60428152858101916060368437815115610c125760308353815160019060011015610bff57607860218401536041905b808211610b97575050610b565783610b2660488895610b4895610b179560449a9951968793610aee8b86019b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8d528251928391603789019101611162565b8401917001034b99036b4b9b9b4b733903937b6329607d1b603784015251809386840190611162565b01036028810185520183610f41565b5195869462461bcd60e51b865285015251809281602486015285850190611162565b601f01601f19168101030190fd5b606485878087519262461bcd60e51b845283015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81166010811015610bec576f181899199a1a9b1b9c1cb0b131b232b360811b901a610bc68486611183565b53871c918015610bd9575f190190610a95565b601188634e487b7160e01b5f525260245ffd5b603289634e487b7160e01b5f525260245ffd5b603287634e487b7160e01b5f525260245ffd5b603286634e487b7160e01b5f525260245ffd5b5090346101205781600319360112610120573590610c41610dd4565b90825f526065602052610c596001825f200154610f63565b825f526065602052805f209160018060a01b031691825f5260205260ff815f20541615610c8257005b825f526065602052805f20825f526020525f20600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d5f80a4005b503461012057602036600319011261012057602091355f52606582526001815f2001549051908152f35b503461012057602036600319011261012057602091355f526097825260ff815f20541690519015158152f35b5034610120578060031936011261012057610d37610dbe565b916024359267ffffffffffffffff841161012057610d5d610d6392602095369101610dea565b91610e68565b90519015158152f35b833461012057602036600319011261012057359063ffffffff60e01b821680920361012057602091637965db0b60e01b8114908115610dad575b5015158152f35b6301ffc9a760e01b14905083610da6565b600435906001600160a01b038216820361012057565b602435906001600160a01b038216820361012057565b9181601f840112156101205782359167ffffffffffffffff8311610120576020808501948460051b01011161012057565b8054821015610e30575f5260205f2001905f90565b634e487b7160e01b5f52603260045260245ffd5b9190811015610e305760051b0190565b356001600160a01b03811681036101205790565b60018060a01b0380911691825f52602090609960205260409460ff60405f20541615610f0757609895609860205260405f20548203610efc575f5b828110610eb7575050505050505050600190565b610ec5610697828587610e44565b875f528886528680610ed984865f20610e1b565b90549060031b1c16911603610ef057600101610ea3565b50505050505050505f90565b505050505050505f90565b5050505050505f90565b6080810190811067ffffffffffffffff821117610f2d57604052565b634e487b7160e01b5f52604160045260245ffd5b90601f8019910116810190811067ffffffffffffffff821117610f2d57604052565b805f5260209060658252604091825f20335f52815260ff835f20541615610f8957505050565b610f9233611194565b8351610f9d81610f11565b60428152828101936060368637815115610e305760308553815160019060011015610e3057607860218401536041905b80821161109857505061105657846110326048610b489360449798519889916110238984019876020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a52610aee815180928d603789019101611162565b01036028810189520187610f41565b5194859362461bcd60e51b8552600485015251809281602486015285850190611162565b60648386519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81166010811015610e30576f181899199a1a9b1b9c1cb0b131b232b360811b901a6110c78486611183565b5360041c9180156110db575f190190610fcd565b634e487b7160e01b5f52601160045260245ffd5b90815f52606560205260405f209060018060a01b031690815f5260205260ff60405f20541661111c575050565b815f52606560205260405f20815f5260205260405f2060ff19815416905533917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b5f80a4565b5f5b8381106111735750505f910152565b8181015183820152602001611164565b908151811015610e30570160200190565b604051906060820182811067ffffffffffffffff821117610f2d57604052602a8252602082016040368237825115610e305760309053815160019060011015610e3057607860218401536029905b8082116112365750506111f25790565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81166010811015610e30576f181899199a1a9b1b9c1cb0b131b232b360811b901a6112658486611183565b5360041c9180156110db575f1901906111e256fea26469706673582212209dfde566ba6d5bf56c4d1ea7edd162d65cc8a64341524ebb587efb7eed8e993464736f6c63430008180033",
-  "deployedBytecode": "0x6080604081815260049182361015610015575f80fd5b5f3560e01c90816301ffc9a714610d6c575080630a8ee44214610d1e578063206137aa14610cf257806322dc7b4c14610cf2578063248a9ca314610cc85780632f2ff15d14610c25578063305ccc39146108ff57806336568abe1461086e5780633c6663e41461081857806345d92d77146107dc57806391d1485414610798578063a217fddf1461077e578063a691340614610507578063ab2cf9a7146103f9578063ad872a861461034f578063c404e8f714610315578063c4d66de8146101245763d547741f146100e5575f80fd5b3461012057806003193601126101205761011e91356101196001610107610dd4565b93835f5260656020525f200154610f63565b6110ef565b005b5f80fd5b509034610120576020908160031936011261012057610141610dbe565b5f5460ff8160081c161592838094610308575b80156102f1575b156102975760ff198281166001175f559184610285575b5060ff5f5460081c161561022e57505f808052606585528581206001600160a01b039093168082529285528590205460ff16156101e5575b50506101b257005b7f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989161ff00195f54165f555160018152a1005b5f805260658452845f20825f5284526001855f209182541617905533905f7f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8180a45f806101aa565b855162461bcd60e51b8152908101859052602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b61ffff1916610101175f908155610172565b855162461bcd60e51b8152908101859052602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b15801561015b5750600160ff83161461015b565b50600160ff831610610154565b5034610120575f36600319011261012057602090517f73b05977f7ae980f06c4acdccf772c9a94862be00025bd3cc9f4cf25ebf226658152f35b50346101205760209081600319360112610120576001600160a01b039182610375610dbe565b165f5260988152815f209082518082845491828152019081945f52835f20905f5b8181106103e357505050816103ac910382610f41565b8351938285019183865251809252840192915f5b8281106103cd5785850386f35b83518716855293810193928101926001016103c0565b8254891684529285019260019283019201610396565b503461012057606036600319011261012057610413610dbe565b60018060a01b03808216805f526020946099865260ff855f205416156104c457505f5260988452825f20908351918291868301946bffffffffffffffffffffffff199060601b16855260348301825490925f52875f20915f905b898383106104a75789898861049d6060828b60243581526044358882015246878201520385810184520182610f41565b5190209051908152f35b84548216865287965090940193600193840193919091019061046d565b845162461bcd60e51b8152908101869052601f60248201527f55736572206d7573742073656c656374206163636f756e7473206669727374006044820152606490fd5b5034610120576020806003193601126101205767ffffffffffffffff8335818111610120576105399036908601610dea565b919094335f526099845260ff855f20541661073b5782151580610730575b156106ed575f5b8381106106815750335f5260988452845f2091831161066e5768010000000000000000831161066e57508054828255808310610649575b5084905f52825f20905f5b83811061062f57505050335f5260998252825f2090600191600160ff198254161790558351938184860185875252840194925f5b82811061060457337fbebeb42e8fef07a2e247ef86e166d436d7a23221dd22e91e26eaba870c0115c087890388a2005b909192939586359060018060a01b0382168092036101205790815282019582019392919083016105d4565b6001908561063c84610e54565b93019281850155016105a0565b815f5282845f2091820191015b8181106106635750610595565b5f8155600101610656565b604190634e487b7160e01b5f525260245ffd5b6001600160a01b0361069c61069783878b610e44565b610e54565b16156106aa5760010161055e565b855162461bcd60e51b8152808301869052601760248201527f496e76616c6964206163636f756e7420616464726573730000000000000000006044820152606490fd5b845162461bcd60e51b8152908101849052601a60248201527f496e76616c6964206e756d626572206f66206163636f756e74730000000000006044820152606490fd5b50600a831115610557565b845162461bcd60e51b8152908101849052601960248201527f4163636f756e747320616c72656164792073656c6563746564000000000000006044820152606490fd5b5034610120575f36600319011261012057602090515f8152f35b50346101205780600319360112610120576020916107b4610dd4565b90355f5260658352815f209060018060a01b03165f52825260ff815f20541690519015158152f35b5034610120576020366003190112610120576020906001600160a01b03610801610dbe565b165f526099825260ff815f20541690519015158152f35b5034610120578060031936011261012057610831610dbe565b906024359160018060a01b038091165f526098602052815f2080548410156101205760209361085f91610e1b565b92905490519260031b1c168152f35b509034610120578160031936011261012057610888610dd4565b90336001600160a01b038316036108a45761011e9250356110ef565b608490602084519162461bcd60e51b8352820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152fd5b503461012057806003193601126101205781359061091b610dd4565b907f73b05977f7ae980f06c4acdccf772c9a94862be00025bd3cc9f4cf25ebf2266591825f5260209260658452825f20335f52845260ff835f20541615610a4c5750835f526097835260ff825f205416610a10576001600160a01b03165f818152609984528290205490949060ff16156109cf5750907fc8b7c9b2394d9099ac656f1e2845a7f53881c1deeb04adf87cb4babb794fc35091835f5260978252805f20600160ff1982541617905551428152a3005b82606492519162461bcd60e51b8352820152601d60248201527f5573657220686173206e6f2073656c6563746564206163636f756e74730000006044820152fd5b815162461bcd60e51b81528086018490526016602482015275139d5b1b1a599a595c88185b1c9958591e481d5cd95960521b6044820152606490fd5b85929150610a5933611194565b908251610a6581610f11565b60428152858101916060368437815115610c125760308353815160019060011015610bff57607860218401536041905b808211610b97575050610b565783610b2660488895610b4895610b179560449a9951968793610aee8b86019b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8d528251928391603789019101611162565b8401917001034b99036b4b9b9b4b733903937b6329607d1b603784015251809386840190611162565b01036028810185520183610f41565b5195869462461bcd60e51b865285015251809281602486015285850190611162565b601f01601f19168101030190fd5b606485878087519262461bcd60e51b845283015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81166010811015610bec576f181899199a1a9b1b9c1cb0b131b232b360811b901a610bc68486611183565b53871c918015610bd9575f190190610a95565b601188634e487b7160e01b5f525260245ffd5b603289634e487b7160e01b5f525260245ffd5b603287634e487b7160e01b5f525260245ffd5b603286634e487b7160e01b5f525260245ffd5b5090346101205781600319360112610120573590610c41610dd4565b90825f526065602052610c596001825f200154610f63565b825f526065602052805f209160018060a01b031691825f5260205260ff815f20541615610c8257005b825f526065602052805f20825f526020525f20600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d5f80a4005b503461012057602036600319011261012057602091355f52606582526001815f2001549051908152f35b503461012057602036600319011261012057602091355f526097825260ff815f20541690519015158152f35b5034610120578060031936011261012057610d37610dbe565b916024359267ffffffffffffffff841161012057610d5d610d6392602095369101610dea565b91610e68565b90519015158152f35b833461012057602036600319011261012057359063ffffffff60e01b821680920361012057602091637965db0b60e01b8114908115610dad575b5015158152f35b6301ffc9a760e01b14905083610da6565b600435906001600160a01b038216820361012057565b602435906001600160a01b038216820361012057565b9181601f840112156101205782359167ffffffffffffffff8311610120576020808501948460051b01011161012057565b8054821015610e30575f5260205f2001905f90565b634e487b7160e01b5f52603260045260245ffd5b9190811015610e305760051b0190565b356001600160a01b03811681036101205790565b60018060a01b0380911691825f52602090609960205260409460ff60405f20541615610f0757609895609860205260405f20548203610efc575f5b828110610eb7575050505050505050600190565b610ec5610697828587610e44565b875f528886528680610ed984865f20610e1b565b90549060031b1c16911603610ef057600101610ea3565b50505050505050505f90565b505050505050505f90565b5050505050505f90565b6080810190811067ffffffffffffffff821117610f2d57604052565b634e487b7160e01b5f52604160045260245ffd5b90601f8019910116810190811067ffffffffffffffff821117610f2d57604052565b805f5260209060658252604091825f20335f52815260ff835f20541615610f8957505050565b610f9233611194565b8351610f9d81610f11565b60428152828101936060368637815115610e305760308553815160019060011015610e3057607860218401536041905b80821161109857505061105657846110326048610b489360449798519889916110238984019876020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a52610aee815180928d603789019101611162565b01036028810189520187610f41565b5194859362461bcd60e51b8552600485015251809281602486015285850190611162565b60648386519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81166010811015610e30576f181899199a1a9b1b9c1cb0b131b232b360811b901a6110c78486611183565b5360041c9180156110db575f190190610fcd565b634e487b7160e01b5f52601160045260245ffd5b90815f52606560205260405f209060018060a01b031690815f5260205260ff60405f20541661111c575050565b815f52606560205260405f20815f5260205260405f2060ff19815416905533917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b5f80a4565b5f5b8381106111735750505f910152565b8181015183820152602001611164565b908151811015610e30570160200190565b604051906060820182811067ffffffffffffffff821117610f2d57604052602a8252602082016040368237825115610e305760309053815160019060011015610e3057607860218401536029905b8082116112365750506111f25790565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81166010811015610e30576f181899199a1a9b1b9c1cb0b131b232b360811b901a6112658486611183565b5360041c9180156110db575f1901906111e256fea26469706673582212209dfde566ba6d5bf56c4d1ea7edd162d65cc8a64341524ebb587efb7eed8e993464736f6c63430008180033",
+  "bytecode": "0x60808060405234610016576112af908161001b8239f35b5f80fdfe6080604081815260049182361015610015575f80fd5b5f3560e01c90816301ffc9a714610d6c575080630a8ee44214610d1e578063206137aa14610cf257806322dc7b4c14610cf2578063248a9ca314610cc85780632f2ff15d14610c25578063305ccc39146108ff57806336568abe1461086e5780633c6663e41461081857806345d92d77146107dc57806391d1485414610798578063a217fddf1461077e578063a691340614610507578063ab2cf9a7146103f9578063ad872a861461034f578063c404e8f714610315578063c4d66de8146101245763d547741f146100e5575f80fd5b3461012057806003193601126101205761011e91356101196001610107610dd4565b93835f5260656020525f200154610f63565b6110ef565b005b5f80fd5b509034610120576020908160031936011261012057610141610dbe565b5f5460ff8160081c161592838094610308575b80156102f1575b156102975760ff198281166001175f559184610285575b5060ff5f5460081c161561022e57505f808052606585528581206001600160a01b039093168082529285528590205460ff16156101e5575b50506101b257005b7f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989161ff00195f54165f555160018152a1005b5f805260658452845f20825f5284526001855f209182541617905533905f7f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8180a45f806101aa565b855162461bcd60e51b8152908101859052602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b61ffff1916610101175f908155610172565b855162461bcd60e51b8152908101859052602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b15801561015b5750600160ff83161461015b565b50600160ff831610610154565b5034610120575f36600319011261012057602090517f73b05977f7ae980f06c4acdccf772c9a94862be00025bd3cc9f4cf25ebf226658152f35b50346101205760209081600319360112610120576001600160a01b039182610375610dbe565b165f5260988152815f209082518082845491828152019081945f52835f20905f5b8181106103e357505050816103ac910382610f41565b8351938285019183865251809252840192915f5b8281106103cd5785850386f35b83518716855293810193928101926001016103c0565b8254891684529285019260019283019201610396565b503461012057606036600319011261012057610413610dbe565b60018060a01b03808216805f526020946099865260ff855f205416156104c457505f5260988452825f20908351918291868301946bffffffffffffffffffffffff199060601b16855260348301825490925f52875f20915f905b898383106104a75789898861049d6060828b60243581526044358882015246878201520385810184520182610f41565b5190209051908152f35b84548216865287965090940193600193840193919091019061046d565b845162461bcd60e51b8152908101869052601f60248201527f55736572206d7573742073656c656374206163636f756e7473206669727374006044820152606490fd5b5034610120576020806003193601126101205767ffffffffffffffff8335818111610120576105399036908601610dea565b919094335f526099845260ff855f20541661073b5782151580610730575b156106ed575f5b8381106106815750335f5260988452845f2091831161066e5768010000000000000000831161066e57508054828255808310610649575b5084905f52825f20905f5b83811061062f57505050335f5260998252825f2090600191600160ff198254161790558351938184860185875252840194925f5b82811061060457337fbebeb42e8fef07a2e247ef86e166d436d7a23221dd22e91e26eaba870c0115c087890388a2005b909192939586359060018060a01b0382168092036101205790815282019582019392919083016105d4565b6001908561063c84610e54565b93019281850155016105a0565b815f5282845f2091820191015b8181106106635750610595565b5f8155600101610656565b604190634e487b7160e01b5f525260245ffd5b6001600160a01b0361069c61069783878b610e44565b610e54565b16156106aa5760010161055e565b855162461bcd60e51b8152808301869052601760248201527f496e76616c6964206163636f756e7420616464726573730000000000000000006044820152606490fd5b845162461bcd60e51b8152908101849052601a60248201527f496e76616c6964206e756d626572206f66206163636f756e74730000000000006044820152606490fd5b50600a831115610557565b845162461bcd60e51b8152908101849052601960248201527f4163636f756e747320616c72656164792073656c6563746564000000000000006044820152606490fd5b5034610120575f36600319011261012057602090515f8152f35b50346101205780600319360112610120576020916107b4610dd4565b90355f5260658352815f209060018060a01b03165f52825260ff815f20541690519015158152f35b5034610120576020366003190112610120576020906001600160a01b03610801610dbe565b165f526099825260ff815f20541690519015158152f35b5034610120578060031936011261012057610831610dbe565b906024359160018060a01b038091165f526098602052815f2080548410156101205760209361085f91610e1b565b92905490519260031b1c168152f35b509034610120578160031936011261012057610888610dd4565b90336001600160a01b038316036108a45761011e9250356110ef565b608490602084519162461bcd60e51b8352820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152fd5b503461012057806003193601126101205781359061091b610dd4565b907f73b05977f7ae980f06c4acdccf772c9a94862be00025bd3cc9f4cf25ebf2266591825f5260209260658452825f20335f52845260ff835f20541615610a4c5750835f526097835260ff825f205416610a10576001600160a01b03165f818152609984528290205490949060ff16156109cf5750907fc8b7c9b2394d9099ac656f1e2845a7f53881c1deeb04adf87cb4babb794fc35091835f5260978252805f20600160ff1982541617905551428152a3005b82606492519162461bcd60e51b8352820152601d60248201527f5573657220686173206e6f2073656c6563746564206163636f756e74730000006044820152fd5b815162461bcd60e51b81528086018490526016602482015275139d5b1b1a599a595c88185b1c9958591e481d5cd95960521b6044820152606490fd5b85929150610a5933611194565b908251610a6581610f11565b60428152858101916060368437815115610c125760308353815160019060011015610bff57607860218401536041905b808211610b97575050610b565783610b2660488895610b4895610b179560449a9951968793610aee8b86019b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8d528251928391603789019101611162565b8401917001034b99036b4b9b9b4b733903937b6329607d1b603784015251809386840190611162565b01036028810185520183610f41565b5195869462461bcd60e51b865285015251809281602486015285850190611162565b601f01601f19168101030190fd5b606485878087519262461bcd60e51b845283015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81166010811015610bec576f181899199a1a9b1b9c1cb0b131b232b360811b901a610bc68486611183565b53871c918015610bd9575f190190610a95565b601188634e487b7160e01b5f525260245ffd5b603289634e487b7160e01b5f525260245ffd5b603287634e487b7160e01b5f525260245ffd5b603286634e487b7160e01b5f525260245ffd5b5090346101205781600319360112610120573590610c41610dd4565b90825f526065602052610c596001825f200154610f63565b825f526065602052805f209160018060a01b031691825f5260205260ff815f20541615610c8257005b825f526065602052805f20825f526020525f20600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d5f80a4005b503461012057602036600319011261012057602091355f52606582526001815f2001549051908152f35b503461012057602036600319011261012057602091355f526097825260ff815f20541690519015158152f35b5034610120578060031936011261012057610d37610dbe565b916024359267ffffffffffffffff841161012057610d5d610d6392602095369101610dea565b91610e68565b90519015158152f35b833461012057602036600319011261012057359063ffffffff60e01b821680920361012057602091637965db0b60e01b8114908115610dad575b5015158152f35b6301ffc9a760e01b14905083610da6565b600435906001600160a01b038216820361012057565b602435906001600160a01b038216820361012057565b9181601f840112156101205782359167ffffffffffffffff8311610120576020808501948460051b01011161012057565b8054821015610e30575f5260205f2001905f90565b634e487b7160e01b5f52603260045260245ffd5b9190811015610e305760051b0190565b356001600160a01b03811681036101205790565b60018060a01b0380911691825f52602090609960205260409460ff60405f20541615610f0757609895609860205260405f20548203610efc575f5b828110610eb7575050505050505050600190565b610ec5610697828587610e44565b875f528886528680610ed984865f20610e1b565b90549060031b1c16911603610ef057600101610ea3565b50505050505050505f90565b505050505050505f90565b5050505050505f90565b6080810190811067ffffffffffffffff821117610f2d57604052565b634e487b7160e01b5f52604160045260245ffd5b90601f8019910116810190811067ffffffffffffffff821117610f2d57604052565b805f5260209060658252604091825f20335f52815260ff835f20541615610f8957505050565b610f9233611194565b8351610f9d81610f11565b60428152828101936060368637815115610e305760308553815160019060011015610e3057607860218401536041905b80821161109857505061105657846110326048610b489360449798519889916110238984019876020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a52610aee815180928d603789019101611162565b01036028810189520187610f41565b5194859362461bcd60e51b8552600485015251809281602486015285850190611162565b60648386519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81166010811015610e30576f181899199a1a9b1b9c1cb0b131b232b360811b901a6110c78486611183565b5360041c9180156110db575f190190610fcd565b634e487b7160e01b5f52601160045260245ffd5b90815f52606560205260405f209060018060a01b031690815f5260205260ff60405f20541661111c575050565b815f52606560205260405f20815f5260205260405f2060ff19815416905533917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b5f80a4565b5f5b8381106111735750505f910152565b8181015183820152602001611164565b908151811015610e30570160200190565b604051906060820182811067ffffffffffffffff821117610f2d57604052602a8252602082016040368237825115610e305760309053815160019060011015610e3057607860218401536029905b8082116112365750506111f25790565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81166010811015610e30576f181899199a1a9b1b9c1cb0b131b232b360811b901a6112658486611183565b5360041c9180156110db575f1901906111e256fea2646970667358221220abd12b92ec944e132529ca12d8eee032520339aa6f09e5bef6ad20f4c13afa8664736f6c63430008180033",
+  "deployedBytecode": "0x6080604081815260049182361015610015575f80fd5b5f3560e01c90816301ffc9a714610d6c575080630a8ee44214610d1e578063206137aa14610cf257806322dc7b4c14610cf2578063248a9ca314610cc85780632f2ff15d14610c25578063305ccc39146108ff57806336568abe1461086e5780633c6663e41461081857806345d92d77146107dc57806391d1485414610798578063a217fddf1461077e578063a691340614610507578063ab2cf9a7146103f9578063ad872a861461034f578063c404e8f714610315578063c4d66de8146101245763d547741f146100e5575f80fd5b3461012057806003193601126101205761011e91356101196001610107610dd4565b93835f5260656020525f200154610f63565b6110ef565b005b5f80fd5b509034610120576020908160031936011261012057610141610dbe565b5f5460ff8160081c161592838094610308575b80156102f1575b156102975760ff198281166001175f559184610285575b5060ff5f5460081c161561022e57505f808052606585528581206001600160a01b039093168082529285528590205460ff16156101e5575b50506101b257005b7f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989161ff00195f54165f555160018152a1005b5f805260658452845f20825f5284526001855f209182541617905533905f7f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8180a45f806101aa565b855162461bcd60e51b8152908101859052602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b61ffff1916610101175f908155610172565b855162461bcd60e51b8152908101859052602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b15801561015b5750600160ff83161461015b565b50600160ff831610610154565b5034610120575f36600319011261012057602090517f73b05977f7ae980f06c4acdccf772c9a94862be00025bd3cc9f4cf25ebf226658152f35b50346101205760209081600319360112610120576001600160a01b039182610375610dbe565b165f5260988152815f209082518082845491828152019081945f52835f20905f5b8181106103e357505050816103ac910382610f41565b8351938285019183865251809252840192915f5b8281106103cd5785850386f35b83518716855293810193928101926001016103c0565b8254891684529285019260019283019201610396565b503461012057606036600319011261012057610413610dbe565b60018060a01b03808216805f526020946099865260ff855f205416156104c457505f5260988452825f20908351918291868301946bffffffffffffffffffffffff199060601b16855260348301825490925f52875f20915f905b898383106104a75789898861049d6060828b60243581526044358882015246878201520385810184520182610f41565b5190209051908152f35b84548216865287965090940193600193840193919091019061046d565b845162461bcd60e51b8152908101869052601f60248201527f55736572206d7573742073656c656374206163636f756e7473206669727374006044820152606490fd5b5034610120576020806003193601126101205767ffffffffffffffff8335818111610120576105399036908601610dea565b919094335f526099845260ff855f20541661073b5782151580610730575b156106ed575f5b8381106106815750335f5260988452845f2091831161066e5768010000000000000000831161066e57508054828255808310610649575b5084905f52825f20905f5b83811061062f57505050335f5260998252825f2090600191600160ff198254161790558351938184860185875252840194925f5b82811061060457337fbebeb42e8fef07a2e247ef86e166d436d7a23221dd22e91e26eaba870c0115c087890388a2005b909192939586359060018060a01b0382168092036101205790815282019582019392919083016105d4565b6001908561063c84610e54565b93019281850155016105a0565b815f5282845f2091820191015b8181106106635750610595565b5f8155600101610656565b604190634e487b7160e01b5f525260245ffd5b6001600160a01b0361069c61069783878b610e44565b610e54565b16156106aa5760010161055e565b855162461bcd60e51b8152808301869052601760248201527f496e76616c6964206163636f756e7420616464726573730000000000000000006044820152606490fd5b845162461bcd60e51b8152908101849052601a60248201527f496e76616c6964206e756d626572206f66206163636f756e74730000000000006044820152606490fd5b50600a831115610557565b845162461bcd60e51b8152908101849052601960248201527f4163636f756e747320616c72656164792073656c6563746564000000000000006044820152606490fd5b5034610120575f36600319011261012057602090515f8152f35b50346101205780600319360112610120576020916107b4610dd4565b90355f5260658352815f209060018060a01b03165f52825260ff815f20541690519015158152f35b5034610120576020366003190112610120576020906001600160a01b03610801610dbe565b165f526099825260ff815f20541690519015158152f35b5034610120578060031936011261012057610831610dbe565b906024359160018060a01b038091165f526098602052815f2080548410156101205760209361085f91610e1b565b92905490519260031b1c168152f35b509034610120578160031936011261012057610888610dd4565b90336001600160a01b038316036108a45761011e9250356110ef565b608490602084519162461bcd60e51b8352820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152fd5b503461012057806003193601126101205781359061091b610dd4565b907f73b05977f7ae980f06c4acdccf772c9a94862be00025bd3cc9f4cf25ebf2266591825f5260209260658452825f20335f52845260ff835f20541615610a4c5750835f526097835260ff825f205416610a10576001600160a01b03165f818152609984528290205490949060ff16156109cf5750907fc8b7c9b2394d9099ac656f1e2845a7f53881c1deeb04adf87cb4babb794fc35091835f5260978252805f20600160ff1982541617905551428152a3005b82606492519162461bcd60e51b8352820152601d60248201527f5573657220686173206e6f2073656c6563746564206163636f756e74730000006044820152fd5b815162461bcd60e51b81528086018490526016602482015275139d5b1b1a599a595c88185b1c9958591e481d5cd95960521b6044820152606490fd5b85929150610a5933611194565b908251610a6581610f11565b60428152858101916060368437815115610c125760308353815160019060011015610bff57607860218401536041905b808211610b97575050610b565783610b2660488895610b4895610b179560449a9951968793610aee8b86019b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8d528251928391603789019101611162565b8401917001034b99036b4b9b9b4b733903937b6329607d1b603784015251809386840190611162565b01036028810185520183610f41565b5195869462461bcd60e51b865285015251809281602486015285850190611162565b601f01601f19168101030190fd5b606485878087519262461bcd60e51b845283015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81166010811015610bec576f181899199a1a9b1b9c1cb0b131b232b360811b901a610bc68486611183565b53871c918015610bd9575f190190610a95565b601188634e487b7160e01b5f525260245ffd5b603289634e487b7160e01b5f525260245ffd5b603287634e487b7160e01b5f525260245ffd5b603286634e487b7160e01b5f525260245ffd5b5090346101205781600319360112610120573590610c41610dd4565b90825f526065602052610c596001825f200154610f63565b825f526065602052805f209160018060a01b031691825f5260205260ff815f20541615610c8257005b825f526065602052805f20825f526020525f20600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d5f80a4005b503461012057602036600319011261012057602091355f52606582526001815f2001549051908152f35b503461012057602036600319011261012057602091355f526097825260ff815f20541690519015158152f35b5034610120578060031936011261012057610d37610dbe565b916024359267ffffffffffffffff841161012057610d5d610d6392602095369101610dea565b91610e68565b90519015158152f35b833461012057602036600319011261012057359063ffffffff60e01b821680920361012057602091637965db0b60e01b8114908115610dad575b5015158152f35b6301ffc9a760e01b14905083610da6565b600435906001600160a01b038216820361012057565b602435906001600160a01b038216820361012057565b9181601f840112156101205782359167ffffffffffffffff8311610120576020808501948460051b01011161012057565b8054821015610e30575f5260205f2001905f90565b634e487b7160e01b5f52603260045260245ffd5b9190811015610e305760051b0190565b356001600160a01b03811681036101205790565b60018060a01b0380911691825f52602090609960205260409460ff60405f20541615610f0757609895609860205260405f20548203610efc575f5b828110610eb7575050505050505050600190565b610ec5610697828587610e44565b875f528886528680610ed984865f20610e1b565b90549060031b1c16911603610ef057600101610ea3565b50505050505050505f90565b505050505050505f90565b5050505050505f90565b6080810190811067ffffffffffffffff821117610f2d57604052565b634e487b7160e01b5f52604160045260245ffd5b90601f8019910116810190811067ffffffffffffffff821117610f2d57604052565b805f5260209060658252604091825f20335f52815260ff835f20541615610f8957505050565b610f9233611194565b8351610f9d81610f11565b60428152828101936060368637815115610e305760308553815160019060011015610e3057607860218401536041905b80821161109857505061105657846110326048610b489360449798519889916110238984019876020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a52610aee815180928d603789019101611162565b01036028810189520187610f41565b5194859362461bcd60e51b8552600485015251809281602486015285850190611162565b60648386519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81166010811015610e30576f181899199a1a9b1b9c1cb0b131b232b360811b901a6110c78486611183565b5360041c9180156110db575f190190610fcd565b634e487b7160e01b5f52601160045260245ffd5b90815f52606560205260405f209060018060a01b031690815f5260205260ff60405f20541661111c575050565b815f52606560205260405f20815f5260205260405f2060ff19815416905533917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b5f80a4565b5f5b8381106111735750505f910152565b8181015183820152602001611164565b908151811015610e30570160200190565b604051906060820182811067ffffffffffffffff821117610f2d57604052602a8252602082016040368237825115610e305760309053815160019060011015610e3057607860218401536029905b8082116112365750506111f25790565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81166010811015610e30576f181899199a1a9b1b9c1cb0b131b232b360811b901a6112658486611183565b5360041c9180156110db575f1901906111e256fea2646970667358221220abd12b92ec944e132529ca12d8eee032520339aa6f09e5bef6ad20f4c13afa8664736f6c63430008180033",
   "linkReferences": {},
   "deployedLinkReferences": {}
 }
diff --git a/Lending (BC) + frontend/loan-management/frontend/src/abis/TimelockController.json b/Lending (BC) + frontend/loan-management/frontend/src/abis/TimelockController.json
deleted file mode 100644
index 61a9911..0000000
--- a/Lending (BC) + frontend/loan-management/frontend/src/abis/TimelockController.json	
+++ /dev/null
@@ -1,900 +0,0 @@
-{
-  "_format": "hh-sol-artifact-1",
-  "contractName": "TimelockController",
-  "sourceName": "@openzeppelin/contracts/governance/TimelockController.sol",
-  "abi": [
-    {
-      "inputs": [
-        {
-          "internalType": "uint256",
-          "name": "minDelay",
-          "type": "uint256"
-        },
-        {
-          "internalType": "address[]",
-          "name": "proposers",
-          "type": "address[]"
-        },
-        {
-          "internalType": "address[]",
-          "name": "executors",
-          "type": "address[]"
-        },
-        {
-          "internalType": "address",
-          "name": "admin",
-          "type": "address"
-        }
-      ],
-      "stateMutability": "nonpayable",
-      "type": "constructor"
-    },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": true,
-          "internalType": "bytes32",
-          "name": "id",
-          "type": "bytes32"
-        },
-        {
-          "indexed": true,
-          "internalType": "uint256",
-          "name": "index",
-          "type": "uint256"
-        },
-        {
-          "indexed": false,
-          "internalType": "address",
-          "name": "target",
-          "type": "address"
-        },
-        {
-          "indexed": false,
-          "internalType": "uint256",
-          "name": "value",
-          "type": "uint256"
-        },
-        {
-          "indexed": false,
-          "internalType": "bytes",
-          "name": "data",
-          "type": "bytes"
-        }
-      ],
-      "name": "CallExecuted",
-      "type": "event"
-    },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": true,
-          "internalType": "bytes32",
-          "name": "id",
-          "type": "bytes32"
-        },
-        {
-          "indexed": false,
-          "internalType": "bytes32",
-          "name": "salt",
-          "type": "bytes32"
-        }
-      ],
-      "name": "CallSalt",
-      "type": "event"
-    },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": true,
-          "internalType": "bytes32",
-          "name": "id",
-          "type": "bytes32"
-        },
-        {
-          "indexed": true,
-          "internalType": "uint256",
-          "name": "index",
-          "type": "uint256"
-        },
-        {
-          "indexed": false,
-          "internalType": "address",
-          "name": "target",
-          "type": "address"
-        },
-        {
-          "indexed": false,
-          "internalType": "uint256",
-          "name": "value",
-          "type": "uint256"
-        },
-        {
-          "indexed": false,
-          "internalType": "bytes",
-          "name": "data",
-          "type": "bytes"
-        },
-        {
-          "indexed": false,
-          "internalType": "bytes32",
-          "name": "predecessor",
-          "type": "bytes32"
-        },
-        {
-          "indexed": false,
-          "internalType": "uint256",
-          "name": "delay",
-          "type": "uint256"
-        }
-      ],
-      "name": "CallScheduled",
-      "type": "event"
-    },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": true,
-          "internalType": "bytes32",
-          "name": "id",
-          "type": "bytes32"
-        }
-      ],
-      "name": "Cancelled",
-      "type": "event"
-    },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": false,
-          "internalType": "uint256",
-          "name": "oldDuration",
-          "type": "uint256"
-        },
-        {
-          "indexed": false,
-          "internalType": "uint256",
-          "name": "newDuration",
-          "type": "uint256"
-        }
-      ],
-      "name": "MinDelayChange",
-      "type": "event"
-    },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": true,
-          "internalType": "bytes32",
-          "name": "role",
-          "type": "bytes32"
-        },
-        {
-          "indexed": true,
-          "internalType": "bytes32",
-          "name": "previousAdminRole",
-          "type": "bytes32"
-        },
-        {
-          "indexed": true,
-          "internalType": "bytes32",
-          "name": "newAdminRole",
-          "type": "bytes32"
-        }
-      ],
-      "name": "RoleAdminChanged",
-      "type": "event"
-    },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": true,
-          "internalType": "bytes32",
-          "name": "role",
-          "type": "bytes32"
-        },
-        {
-          "indexed": true,
-          "internalType": "address",
-          "name": "account",
-          "type": "address"
-        },
-        {
-          "indexed": true,
-          "internalType": "address",
-          "name": "sender",
-          "type": "address"
-        }
-      ],
-      "name": "RoleGranted",
-      "type": "event"
-    },
-    {
-      "anonymous": false,
-      "inputs": [
-        {
-          "indexed": true,
-          "internalType": "bytes32",
-          "name": "role",
-          "type": "bytes32"
-        },
-        {
-          "indexed": true,
-          "internalType": "address",
-          "name": "account",
-          "type": "address"
-        },
-        {
-          "indexed": true,
-          "internalType": "address",
-          "name": "sender",
-          "type": "address"
-        }
-      ],
-      "name": "RoleRevoked",
-      "type": "event"
-    },
-    {
-      "inputs": [],
-      "name": "CANCELLER_ROLE",
-      "outputs": [
-        {
-          "internalType": "bytes32",
-          "name": "",
-          "type": "bytes32"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [],
-      "name": "DEFAULT_ADMIN_ROLE",
-      "outputs": [
-        {
-          "internalType": "bytes32",
-          "name": "",
-          "type": "bytes32"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [],
-      "name": "EXECUTOR_ROLE",
-      "outputs": [
-        {
-          "internalType": "bytes32",
-          "name": "",
-          "type": "bytes32"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [],
-      "name": "PROPOSER_ROLE",
-      "outputs": [
-        {
-          "internalType": "bytes32",
-          "name": "",
-          "type": "bytes32"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [],
-      "name": "TIMELOCK_ADMIN_ROLE",
-      "outputs": [
-        {
-          "internalType": "bytes32",
-          "name": "",
-          "type": "bytes32"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "bytes32",
-          "name": "id",
-          "type": "bytes32"
-        }
-      ],
-      "name": "cancel",
-      "outputs": [],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "address",
-          "name": "target",
-          "type": "address"
-        },
-        {
-          "internalType": "uint256",
-          "name": "value",
-          "type": "uint256"
-        },
-        {
-          "internalType": "bytes",
-          "name": "payload",
-          "type": "bytes"
-        },
-        {
-          "internalType": "bytes32",
-          "name": "predecessor",
-          "type": "bytes32"
-        },
-        {
-          "internalType": "bytes32",
-          "name": "salt",
-          "type": "bytes32"
-        }
-      ],
-      "name": "execute",
-      "outputs": [],
-      "stateMutability": "payable",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "address[]",
-          "name": "targets",
-          "type": "address[]"
-        },
-        {
-          "internalType": "uint256[]",
-          "name": "values",
-          "type": "uint256[]"
-        },
-        {
-          "internalType": "bytes[]",
-          "name": "payloads",
-          "type": "bytes[]"
-        },
-        {
-          "internalType": "bytes32",
-          "name": "predecessor",
-          "type": "bytes32"
-        },
-        {
-          "internalType": "bytes32",
-          "name": "salt",
-          "type": "bytes32"
-        }
-      ],
-      "name": "executeBatch",
-      "outputs": [],
-      "stateMutability": "payable",
-      "type": "function"
-    },
-    {
-      "inputs": [],
-      "name": "getMinDelay",
-      "outputs": [
-        {
-          "internalType": "uint256",
-          "name": "",
-          "type": "uint256"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "bytes32",
-          "name": "role",
-          "type": "bytes32"
-        }
-      ],
-      "name": "getRoleAdmin",
-      "outputs": [
-        {
-          "internalType": "bytes32",
-          "name": "",
-          "type": "bytes32"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "bytes32",
-          "name": "id",
-          "type": "bytes32"
-        }
-      ],
-      "name": "getTimestamp",
-      "outputs": [
-        {
-          "internalType": "uint256",
-          "name": "",
-          "type": "uint256"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "bytes32",
-          "name": "role",
-          "type": "bytes32"
-        },
-        {
-          "internalType": "address",
-          "name": "account",
-          "type": "address"
-        }
-      ],
-      "name": "grantRole",
-      "outputs": [],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "bytes32",
-          "name": "role",
-          "type": "bytes32"
-        },
-        {
-          "internalType": "address",
-          "name": "account",
-          "type": "address"
-        }
-      ],
-      "name": "hasRole",
-      "outputs": [
-        {
-          "internalType": "bool",
-          "name": "",
-          "type": "bool"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "address",
-          "name": "target",
-          "type": "address"
-        },
-        {
-          "internalType": "uint256",
-          "name": "value",
-          "type": "uint256"
-        },
-        {
-          "internalType": "bytes",
-          "name": "data",
-          "type": "bytes"
-        },
-        {
-          "internalType": "bytes32",
-          "name": "predecessor",
-          "type": "bytes32"
-        },
-        {
-          "internalType": "bytes32",
-          "name": "salt",
-          "type": "bytes32"
-        }
-      ],
-      "name": "hashOperation",
-      "outputs": [
-        {
-          "internalType": "bytes32",
-          "name": "",
-          "type": "bytes32"
-        }
-      ],
-      "stateMutability": "pure",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "address[]",
-          "name": "targets",
-          "type": "address[]"
-        },
-        {
-          "internalType": "uint256[]",
-          "name": "values",
-          "type": "uint256[]"
-        },
-        {
-          "internalType": "bytes[]",
-          "name": "payloads",
-          "type": "bytes[]"
-        },
-        {
-          "internalType": "bytes32",
-          "name": "predecessor",
-          "type": "bytes32"
-        },
-        {
-          "internalType": "bytes32",
-          "name": "salt",
-          "type": "bytes32"
-        }
-      ],
-      "name": "hashOperationBatch",
-      "outputs": [
-        {
-          "internalType": "bytes32",
-          "name": "",
-          "type": "bytes32"
-        }
-      ],
-      "stateMutability": "pure",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "bytes32",
-          "name": "id",
-          "type": "bytes32"
-        }
-      ],
-      "name": "isOperation",
-      "outputs": [
-        {
-          "internalType": "bool",
-          "name": "",
-          "type": "bool"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "bytes32",
-          "name": "id",
-          "type": "bytes32"
-        }
-      ],
-      "name": "isOperationDone",
-      "outputs": [
-        {
-          "internalType": "bool",
-          "name": "",
-          "type": "bool"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "bytes32",
-          "name": "id",
-          "type": "bytes32"
-        }
-      ],
-      "name": "isOperationPending",
-      "outputs": [
-        {
-          "internalType": "bool",
-          "name": "",
-          "type": "bool"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "bytes32",
-          "name": "id",
-          "type": "bytes32"
-        }
-      ],
-      "name": "isOperationReady",
-      "outputs": [
-        {
-          "internalType": "bool",
-          "name": "",
-          "type": "bool"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "address",
-          "name": "",
-          "type": "address"
-        },
-        {
-          "internalType": "address",
-          "name": "",
-          "type": "address"
-        },
-        {
-          "internalType": "uint256[]",
-          "name": "",
-          "type": "uint256[]"
-        },
-        {
-          "internalType": "uint256[]",
-          "name": "",
-          "type": "uint256[]"
-        },
-        {
-          "internalType": "bytes",
-          "name": "",
-          "type": "bytes"
-        }
-      ],
-      "name": "onERC1155BatchReceived",
-      "outputs": [
-        {
-          "internalType": "bytes4",
-          "name": "",
-          "type": "bytes4"
-        }
-      ],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "address",
-          "name": "",
-          "type": "address"
-        },
-        {
-          "internalType": "address",
-          "name": "",
-          "type": "address"
-        },
-        {
-          "internalType": "uint256",
-          "name": "",
-          "type": "uint256"
-        },
-        {
-          "internalType": "uint256",
-          "name": "",
-          "type": "uint256"
-        },
-        {
-          "internalType": "bytes",
-          "name": "",
-          "type": "bytes"
-        }
-      ],
-      "name": "onERC1155Received",
-      "outputs": [
-        {
-          "internalType": "bytes4",
-          "name": "",
-          "type": "bytes4"
-        }
-      ],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "address",
-          "name": "",
-          "type": "address"
-        },
-        {
-          "internalType": "address",
-          "name": "",
-          "type": "address"
-        },
-        {
-          "internalType": "uint256",
-          "name": "",
-          "type": "uint256"
-        },
-        {
-          "internalType": "bytes",
-          "name": "",
-          "type": "bytes"
-        }
-      ],
-      "name": "onERC721Received",
-      "outputs": [
-        {
-          "internalType": "bytes4",
-          "name": "",
-          "type": "bytes4"
-        }
-      ],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "bytes32",
-          "name": "role",
-          "type": "bytes32"
-        },
-        {
-          "internalType": "address",
-          "name": "account",
-          "type": "address"
-        }
-      ],
-      "name": "renounceRole",
-      "outputs": [],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "bytes32",
-          "name": "role",
-          "type": "bytes32"
-        },
-        {
-          "internalType": "address",
-          "name": "account",
-          "type": "address"
-        }
-      ],
-      "name": "revokeRole",
-      "outputs": [],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "address",
-          "name": "target",
-          "type": "address"
-        },
-        {
-          "internalType": "uint256",
-          "name": "value",
-          "type": "uint256"
-        },
-        {
-          "internalType": "bytes",
-          "name": "data",
-          "type": "bytes"
-        },
-        {
-          "internalType": "bytes32",
-          "name": "predecessor",
-          "type": "bytes32"
-        },
-        {
-          "internalType": "bytes32",
-          "name": "salt",
-          "type": "bytes32"
-        },
-        {
-          "internalType": "uint256",
-          "name": "delay",
-          "type": "uint256"
-        }
-      ],
-      "name": "schedule",
-      "outputs": [],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "address[]",
-          "name": "targets",
-          "type": "address[]"
-        },
-        {
-          "internalType": "uint256[]",
-          "name": "values",
-          "type": "uint256[]"
-        },
-        {
-          "internalType": "bytes[]",
-          "name": "payloads",
-          "type": "bytes[]"
-        },
-        {
-          "internalType": "bytes32",
-          "name": "predecessor",
-          "type": "bytes32"
-        },
-        {
-          "internalType": "bytes32",
-          "name": "salt",
-          "type": "bytes32"
-        },
-        {
-          "internalType": "uint256",
-          "name": "delay",
-          "type": "uint256"
-        }
-      ],
-      "name": "scheduleBatch",
-      "outputs": [],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "bytes4",
-          "name": "interfaceId",
-          "type": "bytes4"
-        }
-      ],
-      "name": "supportsInterface",
-      "outputs": [
-        {
-          "internalType": "bool",
-          "name": "",
-          "type": "bool"
-        }
-      ],
-      "stateMutability": "view",
-      "type": "function"
-    },
-    {
-      "inputs": [
-        {
-          "internalType": "uint256",
-          "name": "newDelay",
-          "type": "uint256"
-        }
-      ],
-      "name": "updateDelay",
-      "outputs": [],
-      "stateMutability": "nonpayable",
-      "type": "function"
-    },
-    {
-      "stateMutability": "payable",
-      "type": "receive"
-    }
-  ],
-  "bytecode": "0x604060808152346200043e576200214c803803806200001e8162000442565b9283398101906080818303126200043e578051602080830151909391926001600160401b0392918381116200043e57826200005b91830162000491565b92868201519081116200043e5760606200007d88946200008593850162000491565b92016200047c565b7f5f58e3a2316349923ce3780f8d587db2d72378aed66a8261c916544fa6846ca591825f525f8752600180809681875f20018681549155867fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9181835f80a4867fb09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc191825f5281858b5f2001818154915584835f80a481857fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e639b8c5f525f200181815491558b835f80a48d7ffd643c72710c63c0180259aba6b2d05451e3591a24e58b62239378085726f783958691825f525f20019183835493555f80a4865f528b5f20305f528b5260ff9660ff8d5f2054161562000408575b6001600160a01b039687168c8e82620003ad575b9c9a999897969d509a9150505f905b620002ac575b5050505090879392915f985b6200021a575b877f11c24f4ead16507c69ac467fbd5e4eed5fb5c699626d2cc6d66421df253886d5818989806002558251915f8352820152a151611bfe90816200052e8239f35b909192939495968151891015620002a357508488836200023e83999a9b8562000504565b5116865f525f8b528b5f20815f528b52858c5f205416156200026c575b5001979593929190899795620001d3565b865f525f8b528b5f20815f528b528b5f208360ff198254161790553390875f805160206200212c8339815191525f80a45f6200025b565b969594620001d9565b898c9a9c95969798999b84518310156200039c5790829189620002d189958862000504565b5116855f525f8352815f20815f5283528b825f2054161562000365575b5089620002fc848862000504565b511691875f525f8152815f20835f5281528b825f205416156200032d575b505050018c9a98979695949b99620001c1565b875f525f8152815f2090835f52525f208360ff198254161790553390865f805160206200212c8339815191525f80a45f8e8e6200031a565b855f525f8352815f20815f528352815f208560ff198254161790553390865f805160206200212c8339815191525f80a45f620002ee565b9b999897969550509a989a620001c7565b60ff91845f525f8152815f2090845f52525f20541615620003d1575b8c8e620001b2565b815f525f8d528d5f20815f528d528d5f208660ff1982541617905533915f805160206200212c8339815191525f80a45f80620003c9565b805f525f8c528c5f20305f528c528c5f208560ff198254161790553330825f805160206200212c8339815191525f80a46200019e565b5f80fd5b6040519190601f01601f191682016001600160401b038111838210176200046857604052565b634e487b7160e01b5f52604160045260245ffd5b51906001600160a01b03821682036200043e57565b81601f820112156200043e578051916020916001600160401b03841162000468578360051b908380620004c681850162000442565b8097815201928201019283116200043e578301905b828210620004ea575050505090565b838091620004f8846200047c565b815201910190620004db565b8051821015620005195760209160051b010190565b634e487b7160e01b5f52603260045260245ffdfe60406080815260048036101561001e575b5050361561001c575f80fd5b005b5f3560e01c90816301d5062a14610d6857816301ffc9a714610cf757816307bd026514610cd05781630d3cf6fc14610c96578163134008d314610bed57816313bc9f2014610bcf578163150b7a0214610b7d578163248a9ca314610b545781632ab0f52914610b295781632f2ff15d14610a8457816331d5075014610a5a57816336568abe146109c9578163584b153e1461099557816364d62353146108ec5781638065657f146108cb5781638f2a0bb01461078b5781638f61f4f51461075157816391d148541461070e578163a217fddf146106f4578163b08e51c0146106ba578163b1c5f4271461068f578163bc197c811461060c578163c4d252f51461033a578163d45c443514610313578163d547741f146102d8578163e38335e5146101d1578163f23a6e611461017f575063f27a0c921461015e5780610010565b3461017b575f36600319011261017b576020906002549051908152f35b5f80fd5b823461017b5760a036600319011261017b57610199610e13565b506101a2610e29565b506084356001600160401b03811161017b576020926101c391369101610f25565b505163f23a6e6160e01b8152f35b61023f61023860ff85806101e436610f9b565b91838587849f97998b9f979e9b859c829b9f5f80516020611ba98339815191525f525f602052805f205f80526020525f205416156102ca575b610228848314611158565b610233868314611158565b611229565b98896118e5565b5f5b8181106102515761001c89611a26565b80808a7fc2617efa69bab66782fa219543714338489c4e9e178271560a91b82c3f612b588a8a6102c16102a98f988c6102a2828e61029c8f60019f6102979185916111b0565b6111d4565b976111b0565b35956111e8565b906102b682828787611979565b8d51948594856110ba565b0390a301610241565b6102d333611644565b61021d565b823461017b578060031936011261017b5761001c913561030e60016102fb610e29565b93835f525f6020525f200154339061177a565b611a42565b823461017b57602036600319011261017b57602091355f5260018252805f20549051908152f35b823461017b5760208060031936011261017b578235927ffd643c72710c63c0180259aba6b2d05451e3591a24e58b62239378085726f783805f525f8352835f20335f52835260ff845f2054161561043557506103a2845f526001602052600160405f20541190565b156103da57509060015f92848452528120557fbaa1eb22f2a492ba1a5fea61b8df4d27c6c8b5f3971e63bb58fa14ff72eedb705f80a2005b915162461bcd60e51b815291820152603160248201527f54696d656c6f636b436f6e74726f6c6c65723a206f7065726174696f6e2063616044820152701b9b9bdd0818994818d85b98d95b1b1959607a1b6064820152608490fd5b839061044033611ac4565b90825161044c81610eba565b604281528581019160603684378151156105f957603083538151600190600110156105e657607860218401536041905b80821161057e57505061053d578361050d6048889561052f956104fe9560449a99519687936104d58b86019b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8d528251928391603789019101611465565b8401917001034b99036b4b9b9b4b733903937b6329607d1b603784015251809386840190611465565b01036028810185520183610ee9565b5195869462461bcd60e51b865285015251809281602486015285850190611465565b601f01601f19168101030190fd5b606485878087519262461bcd60e51b845283015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f811660108110156105d3576f181899199a1a9b1b9c1cb0b131b232b360811b901a6105ad8486611ab3565b53871c9180156105c0575f19019061047c565b601188634e487b7160e01b5f525260245ffd5b603289634e487b7160e01b5f525260245ffd5b603287634e487b7160e01b5f525260245ffd5b603286634e487b7160e01b5f525260245ffd5b823461017b5760a036600319011261017b57610626610e13565b5061062f610e29565b506001600160401b0360443581811161017b5761064f9036908501610ffc565b5060643581811161017b576106679036908501610ffc565b5060843590811161017b5760209261068191369101610f25565b505163bc197c8160e01b8152f35b823461017b576020906106b36106a436610f9b565b96959095949194939293611229565b9051908152f35b823461017b575f36600319011261017b57602090517ffd643c72710c63c0180259aba6b2d05451e3591a24e58b62239378085726f7838152f35b823461017b575f36600319011261017b57602090515f8152f35b823461017b578060031936011261017b5760209161072a610e29565b90355f525f8352815f209060018060a01b03165f52825260ff815f20541690519015158152f35b823461017b575f36600319011261017b57602090517fb09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc18152f35b90503461017b5760c036600319011261017b576001600160401b0391813583811161017b576107bd9036908401610f6b565b9360243581811161017b576107d59036908601610f6b565b91909460443591821161017b576107f184918793369101610f6b565b606494919435916108138a848489856084359e8f9560a4359b61021d33611486565b9961081e858c611365565b8a5f5b8a83821061085f578c80925061083357005b7f20fda5fd27a1ea7bf5b9567f143ac5470bb059374a27e8f67cb44f946f6d03879160209151908152a2005b6001927f4cf4410cc57040e44862ef0f45f3dd5a5e02db8eb8add648d4b0e236f1d07dca8b8b6108c08f8c88978f92898f8f8f6108ae916108a86102978680946108b5996111b0565b9a6111b0565b35986111e8565b915196879687611082565b0390a3018b90610821565b823461017b576020906106b36108e036610e6c565b94939093929192611103565b823461017b57602036600319011261017b5781359130330361093f57507f11c24f4ead16507c69ac467fbd5e4eed5fb5c699626d2cc6d66421df253886d5906002548151908152836020820152a1600255005b6020608492519162461bcd60e51b8352820152602b60248201527f54696d656c6f636b436f6e74726f6c6c65723a2063616c6c6572206d7573742060448201526a62652074696d656c6f636b60a81b6064820152fd5b823461017b57602036600319011261017b576109c0602092355f526001602052600160405f20541190565b90519015158152f35b90503461017b578160031936011261017b576109e3610e29565b90336001600160a01b038316036109ff5761001c925035611a42565b608490602084519162461bcd60e51b8352820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152fd5b823461017b57602036600319011261017b576109c0602092355f52600160205260405f2054151590565b90503461017b578160031936011261017b573590610aa0610e29565b90825f525f602052610ab96001825f200154339061177a565b5f83815260208181528282206001600160a01b039094168083529390528190205460ff1615610ae457005b825f525f602052805f20825f526020525f20600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d5f80a4005b823461017b57602036600319011261017b576109c0602092355f526001602052600160405f20541490565b823461017b57602036600319011261017b57602091355f525f82526001815f2001549051908152f35b823461017b57608036600319011261017b57610b97610e13565b50610ba0610e29565b506064356001600160401b03811161017b57602092610bc191369101610f25565b5051630a85bd0160e11b8152f35b823461017b57602036600319011261017b576109c0602092356110e1565b61001c610c6a5f610c807fc2617efa69bab66782fa219543714338489c4e9e178271560a91b82c3f612b58610c6188610c2536610e6c565b5f80516020611ba98339815191528b9a9697939598929a528a602052828b208b805260205260ff838c20541615610c88575b8985858a8a611103565b998a98896118e5565b610c7683838888611979565b51948594856110ba565b0390a3611a26565b610c9133611644565b610c57565b823461017b575f36600319011261017b57602090517f5f58e3a2316349923ce3780f8d587db2d72378aed66a8261c916544fa6846ca58152f35b823461017b575f36600319011261017b57602090515f80516020611ba98339815191528152f35b90503461017b57602036600319011261017b573563ffffffff60e01b811680910361017b57602091630271189760e51b8214918215610d3a575b50519015158152f35b909150637965db0b60e01b8114908115610d57575b50905f610d31565b6301ffc9a760e01b1490505f610d4f565b823461017b5760c036600319011261017b57610d82610e13565b9060243592604435936001600160401b03851161017b57610dc85f927f4cf4410cc57040e44862ef0f45f3dd5a5e02db8eb8add648d4b0e236f1d07dca96369101610e3f565b95909160643595610e096084359760a43590610de333611486565b610df18a828d8a8989611103565b9a8b97610dfe848a611365565b8a5196879687611082565b0390a38161083357005b600435906001600160a01b038216820361017b57565b602435906001600160a01b038216820361017b57565b9181601f8401121561017b578235916001600160401b03831161017b576020838186019501011161017b57565b60a060031982011261017b576004356001600160a01b038116810361017b579160243591604435906001600160401b03821161017b57610eae91600401610e3f565b90916064359060843590565b608081019081106001600160401b03821117610ed557604052565b634e487b7160e01b5f52604160045260245ffd5b90601f801991011681019081106001600160401b03821117610ed557604052565b6001600160401b038111610ed557601f01601f191660200190565b81601f8201121561017b57803590610f3c82610f0a565b92610f4a6040519485610ee9565b8284526020838301011161017b57815f926020809301838601378301015290565b9181601f8401121561017b578235916001600160401b03831161017b576020808501948460051b01011161017b57565b9060a060031983011261017b576001600160401b0360043581811161017b5783610fc791600401610f6b565b9390939260243583811161017b5782610fe291600401610f6b565b9390939260443591821161017b57610eae91600401610f6b565b81601f8201121561017b578035916020916001600160401b038411610ed5578360051b906040519461103085840187610ee9565b8552838086019282010192831161017b578301905b828210611053575050505090565b81358152908301908301611045565b908060209392818452848401375f828201840152601f01601f1916010190565b9290936110b0926080959897969860018060a01b03168552602085015260a0604085015260a0840191611062565b9460608201520152565b6110de949260609260018060a01b0316825260208201528160408201520191611062565b90565b5f52600160205260405f20546001811190816110fb575090565b905042101590565b9461113961115294959293604051968795602087019960018060a01b03168a52604087015260a0606087015260c0860191611062565b91608084015260a083015203601f198101835282610ee9565b51902090565b1561115f57565b60405162461bcd60e51b815260206004820152602360248201527f54696d656c6f636b436f6e74726f6c6c65723a206c656e677468206d69736d616044820152620e8c6d60eb1b6064820152608490fd5b91908110156111c05760051b0190565b634e487b7160e01b5f52603260045260245ffd5b356001600160a01b038116810361017b5790565b91908110156111c05760051b81013590601e198136030182121561017b5701908135916001600160401b03831161017b57602001823603811361017b579190565b969294909695919560405196602091828901998060c08b0160a08d525260e08a0191905f5b81811061133d57505050601f19898203810160408b0152888252976001600160fb1b03811161017b579089969495939897929160051b80928a830137019380888601878703606089015252604085019460408260051b82010195835f925b8484106112d4575050505050506111529550608084015260a083015203908101835282610ee9565b9193969850919398999496603f198282030184528935601e198436030181121561017b5783018681019190356001600160401b03811161017b57803603831361017b5761132688928392600195611062565b9b0194019401918b98969394919a9997959a6112ac565b90919283359060018060a01b03821680920361017b579081528501928501919060010161124e565b9061137b825f52600160205260405f2054151590565b6114085760025481106113b4574201908142116113a0575f52600160205260405f2055565b634e487b7160e01b5f52601160045260245ffd5b60405162461bcd60e51b815260206004820152602660248201527f54696d656c6f636b436f6e74726f6c6c65723a20696e73756666696369656e746044820152652064656c617960d01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602f60248201527f54696d656c6f636b436f6e74726f6c6c65723a206f7065726174696f6e20616c60448201526e1c9958591e481cd8da19591d5b1959608a1b6064820152608490fd5b5f5b8381106114765750505f910152565b8181015183820152602001611467565b6001600160a01b03165f8181527f3412d5605ac6cd444957cedb533e5dacad6378b4bc819ebe3652188a665066d560209081526040918290205491927fb09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc19260ff16156114f25750505050565b6114fb90611ac4565b835161150681610eba565b604281528281019360603686378151156111c057603085538151600190600110156111c057607860218401536041905b8082116116015750506115bf578461159b604861052f93604497985198899161158c8984019876020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a526104d5815180928d603789019101611465565b01036028810189520187610ee9565b5194859362461bcd60e51b8552600485015251809281602486015285850190611465565b60648386519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f811660108110156111c0576f181899199a1a9b1b9c1cb0b131b232b360811b901a6116308486611ab3565b5360041c9180156113a0575f190190611536565b6001600160a01b03165f8181527fdae2aa361dfd1ca020a396615627d436107c35eff9fe7738a3512819782d706960209081526040918290205491925f80516020611ba98339815191529260ff161561169d5750505050565b6116a690611ac4565b83516116b181610eba565b604281528281019360603686378151156111c057603085538151600190600110156111c057607860218401536041905b8082116117375750506115bf578461159b604861052f93604497985198899161158c8984019876020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a526104d5815180928d603789019101611465565b9091600f811660108110156111c0576f181899199a1a9b1b9c1cb0b131b232b360811b901a6117668486611ab3565b5360041c9180156113a0575f1901906116e1565b805f5260205f8152604092835f209060018060a01b031690815f52825260ff845f205416156117a95750505050565b6117b290611ac4565b83516117bd81610eba565b604281528281019360603686378151156111c057603085538151600190600110156111c057607860218401536041905b8082116118435750506115bf578461159b604861052f93604497985198899161158c8984019876020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a526104d5815180928d603789019101611465565b9091600f811660108110156111c0576f181899199a1a9b1b9c1cb0b131b232b360811b901a6118728486611ab3565b5360041c9180156113a0575f1901906117ed565b1561188d57565b60405162461bcd60e51b815260206004820152602a60248201527f54696d656c6f636b436f6e74726f6c6c65723a206f7065726174696f6e206973604482015269206e6f7420726561647960b01b6064820152608490fd5b6118f16118f6916110e1565b611886565b801590811561195c575b501561190857565b60405162461bcd60e51b815260206004820152602660248201527f54696d656c6f636b436f6e74726f6c6c65723a206d697373696e6720646570656044820152656e64656e637960d01b6064820152608490fd5b61197391505f526001602052600160405f20541490565b5f611900565b90925f938493826040519384928337810185815203925af13d15611a21573d6119a181610f0a565b906119af6040519283610ee9565b81525f60203d92013e5b156119c057565b60405162461bcd60e51b815260206004820152603360248201527f54696d656c6f636b436f6e74726f6c6c65723a20756e6465726c79696e6720746044820152721c985b9cd858dd1a5bdb881c995d995c9d1959606a1b6064820152608490fd5b6119b9565b611a326118f1826110e1565b5f526001602052600160405f2055565b90815f525f60205260405f209060018060a01b031690815f5260205260ff60405f205416611a6e575050565b815f525f60205260405f20815f5260205260405f2060ff19815416905533917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b5f80a4565b9081518110156111c0570160200190565b60405190606082018281106001600160401b03821117610ed557604052602a82526020820160403682378251156111c057603090538151600190600110156111c057607860218401536029905b808211611b65575050611b215790565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f811660108110156111c0576f181899199a1a9b1b9c1cb0b131b232b360811b901a611b948486611ab3565b5360041c9180156113a0575f190190611b1156fed8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63a2646970667358221220f0615e3673ca3e543a83f10540bdefd71a8c63ce7da7f5e736409c73e3c9065164736f6c634300081800332f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
-  "deployedBytecode": "0x60406080815260048036101561001e575b5050361561001c575f80fd5b005b5f3560e01c90816301d5062a14610d6857816301ffc9a714610cf757816307bd026514610cd05781630d3cf6fc14610c96578163134008d314610bed57816313bc9f2014610bcf578163150b7a0214610b7d578163248a9ca314610b545781632ab0f52914610b295781632f2ff15d14610a8457816331d5075014610a5a57816336568abe146109c9578163584b153e1461099557816364d62353146108ec5781638065657f146108cb5781638f2a0bb01461078b5781638f61f4f51461075157816391d148541461070e578163a217fddf146106f4578163b08e51c0146106ba578163b1c5f4271461068f578163bc197c811461060c578163c4d252f51461033a578163d45c443514610313578163d547741f146102d8578163e38335e5146101d1578163f23a6e611461017f575063f27a0c921461015e5780610010565b3461017b575f36600319011261017b576020906002549051908152f35b5f80fd5b823461017b5760a036600319011261017b57610199610e13565b506101a2610e29565b506084356001600160401b03811161017b576020926101c391369101610f25565b505163f23a6e6160e01b8152f35b61023f61023860ff85806101e436610f9b565b91838587849f97998b9f979e9b859c829b9f5f80516020611ba98339815191525f525f602052805f205f80526020525f205416156102ca575b610228848314611158565b610233868314611158565b611229565b98896118e5565b5f5b8181106102515761001c89611a26565b80808a7fc2617efa69bab66782fa219543714338489c4e9e178271560a91b82c3f612b588a8a6102c16102a98f988c6102a2828e61029c8f60019f6102979185916111b0565b6111d4565b976111b0565b35956111e8565b906102b682828787611979565b8d51948594856110ba565b0390a301610241565b6102d333611644565b61021d565b823461017b578060031936011261017b5761001c913561030e60016102fb610e29565b93835f525f6020525f200154339061177a565b611a42565b823461017b57602036600319011261017b57602091355f5260018252805f20549051908152f35b823461017b5760208060031936011261017b578235927ffd643c72710c63c0180259aba6b2d05451e3591a24e58b62239378085726f783805f525f8352835f20335f52835260ff845f2054161561043557506103a2845f526001602052600160405f20541190565b156103da57509060015f92848452528120557fbaa1eb22f2a492ba1a5fea61b8df4d27c6c8b5f3971e63bb58fa14ff72eedb705f80a2005b915162461bcd60e51b815291820152603160248201527f54696d656c6f636b436f6e74726f6c6c65723a206f7065726174696f6e2063616044820152701b9b9bdd0818994818d85b98d95b1b1959607a1b6064820152608490fd5b839061044033611ac4565b90825161044c81610eba565b604281528581019160603684378151156105f957603083538151600190600110156105e657607860218401536041905b80821161057e57505061053d578361050d6048889561052f956104fe9560449a99519687936104d58b86019b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8d528251928391603789019101611465565b8401917001034b99036b4b9b9b4b733903937b6329607d1b603784015251809386840190611465565b01036028810185520183610ee9565b5195869462461bcd60e51b865285015251809281602486015285850190611465565b601f01601f19168101030190fd5b606485878087519262461bcd60e51b845283015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f811660108110156105d3576f181899199a1a9b1b9c1cb0b131b232b360811b901a6105ad8486611ab3565b53871c9180156105c0575f19019061047c565b601188634e487b7160e01b5f525260245ffd5b603289634e487b7160e01b5f525260245ffd5b603287634e487b7160e01b5f525260245ffd5b603286634e487b7160e01b5f525260245ffd5b823461017b5760a036600319011261017b57610626610e13565b5061062f610e29565b506001600160401b0360443581811161017b5761064f9036908501610ffc565b5060643581811161017b576106679036908501610ffc565b5060843590811161017b5760209261068191369101610f25565b505163bc197c8160e01b8152f35b823461017b576020906106b36106a436610f9b565b96959095949194939293611229565b9051908152f35b823461017b575f36600319011261017b57602090517ffd643c72710c63c0180259aba6b2d05451e3591a24e58b62239378085726f7838152f35b823461017b575f36600319011261017b57602090515f8152f35b823461017b578060031936011261017b5760209161072a610e29565b90355f525f8352815f209060018060a01b03165f52825260ff815f20541690519015158152f35b823461017b575f36600319011261017b57602090517fb09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc18152f35b90503461017b5760c036600319011261017b576001600160401b0391813583811161017b576107bd9036908401610f6b565b9360243581811161017b576107d59036908601610f6b565b91909460443591821161017b576107f184918793369101610f6b565b606494919435916108138a848489856084359e8f9560a4359b61021d33611486565b9961081e858c611365565b8a5f5b8a83821061085f578c80925061083357005b7f20fda5fd27a1ea7bf5b9567f143ac5470bb059374a27e8f67cb44f946f6d03879160209151908152a2005b6001927f4cf4410cc57040e44862ef0f45f3dd5a5e02db8eb8add648d4b0e236f1d07dca8b8b6108c08f8c88978f92898f8f8f6108ae916108a86102978680946108b5996111b0565b9a6111b0565b35986111e8565b915196879687611082565b0390a3018b90610821565b823461017b576020906106b36108e036610e6c565b94939093929192611103565b823461017b57602036600319011261017b5781359130330361093f57507f11c24f4ead16507c69ac467fbd5e4eed5fb5c699626d2cc6d66421df253886d5906002548151908152836020820152a1600255005b6020608492519162461bcd60e51b8352820152602b60248201527f54696d656c6f636b436f6e74726f6c6c65723a2063616c6c6572206d7573742060448201526a62652074696d656c6f636b60a81b6064820152fd5b823461017b57602036600319011261017b576109c0602092355f526001602052600160405f20541190565b90519015158152f35b90503461017b578160031936011261017b576109e3610e29565b90336001600160a01b038316036109ff5761001c925035611a42565b608490602084519162461bcd60e51b8352820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152fd5b823461017b57602036600319011261017b576109c0602092355f52600160205260405f2054151590565b90503461017b578160031936011261017b573590610aa0610e29565b90825f525f602052610ab96001825f200154339061177a565b5f83815260208181528282206001600160a01b039094168083529390528190205460ff1615610ae457005b825f525f602052805f20825f526020525f20600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d5f80a4005b823461017b57602036600319011261017b576109c0602092355f526001602052600160405f20541490565b823461017b57602036600319011261017b57602091355f525f82526001815f2001549051908152f35b823461017b57608036600319011261017b57610b97610e13565b50610ba0610e29565b506064356001600160401b03811161017b57602092610bc191369101610f25565b5051630a85bd0160e11b8152f35b823461017b57602036600319011261017b576109c0602092356110e1565b61001c610c6a5f610c807fc2617efa69bab66782fa219543714338489c4e9e178271560a91b82c3f612b58610c6188610c2536610e6c565b5f80516020611ba98339815191528b9a9697939598929a528a602052828b208b805260205260ff838c20541615610c88575b8985858a8a611103565b998a98896118e5565b610c7683838888611979565b51948594856110ba565b0390a3611a26565b610c9133611644565b610c57565b823461017b575f36600319011261017b57602090517f5f58e3a2316349923ce3780f8d587db2d72378aed66a8261c916544fa6846ca58152f35b823461017b575f36600319011261017b57602090515f80516020611ba98339815191528152f35b90503461017b57602036600319011261017b573563ffffffff60e01b811680910361017b57602091630271189760e51b8214918215610d3a575b50519015158152f35b909150637965db0b60e01b8114908115610d57575b50905f610d31565b6301ffc9a760e01b1490505f610d4f565b823461017b5760c036600319011261017b57610d82610e13565b9060243592604435936001600160401b03851161017b57610dc85f927f4cf4410cc57040e44862ef0f45f3dd5a5e02db8eb8add648d4b0e236f1d07dca96369101610e3f565b95909160643595610e096084359760a43590610de333611486565b610df18a828d8a8989611103565b9a8b97610dfe848a611365565b8a5196879687611082565b0390a38161083357005b600435906001600160a01b038216820361017b57565b602435906001600160a01b038216820361017b57565b9181601f8401121561017b578235916001600160401b03831161017b576020838186019501011161017b57565b60a060031982011261017b576004356001600160a01b038116810361017b579160243591604435906001600160401b03821161017b57610eae91600401610e3f565b90916064359060843590565b608081019081106001600160401b03821117610ed557604052565b634e487b7160e01b5f52604160045260245ffd5b90601f801991011681019081106001600160401b03821117610ed557604052565b6001600160401b038111610ed557601f01601f191660200190565b81601f8201121561017b57803590610f3c82610f0a565b92610f4a6040519485610ee9565b8284526020838301011161017b57815f926020809301838601378301015290565b9181601f8401121561017b578235916001600160401b03831161017b576020808501948460051b01011161017b57565b9060a060031983011261017b576001600160401b0360043581811161017b5783610fc791600401610f6b565b9390939260243583811161017b5782610fe291600401610f6b565b9390939260443591821161017b57610eae91600401610f6b565b81601f8201121561017b578035916020916001600160401b038411610ed5578360051b906040519461103085840187610ee9565b8552838086019282010192831161017b578301905b828210611053575050505090565b81358152908301908301611045565b908060209392818452848401375f828201840152601f01601f1916010190565b9290936110b0926080959897969860018060a01b03168552602085015260a0604085015260a0840191611062565b9460608201520152565b6110de949260609260018060a01b0316825260208201528160408201520191611062565b90565b5f52600160205260405f20546001811190816110fb575090565b905042101590565b9461113961115294959293604051968795602087019960018060a01b03168a52604087015260a0606087015260c0860191611062565b91608084015260a083015203601f198101835282610ee9565b51902090565b1561115f57565b60405162461bcd60e51b815260206004820152602360248201527f54696d656c6f636b436f6e74726f6c6c65723a206c656e677468206d69736d616044820152620e8c6d60eb1b6064820152608490fd5b91908110156111c05760051b0190565b634e487b7160e01b5f52603260045260245ffd5b356001600160a01b038116810361017b5790565b91908110156111c05760051b81013590601e198136030182121561017b5701908135916001600160401b03831161017b57602001823603811361017b579190565b969294909695919560405196602091828901998060c08b0160a08d525260e08a0191905f5b81811061133d57505050601f19898203810160408b0152888252976001600160fb1b03811161017b579089969495939897929160051b80928a830137019380888601878703606089015252604085019460408260051b82010195835f925b8484106112d4575050505050506111529550608084015260a083015203908101835282610ee9565b9193969850919398999496603f198282030184528935601e198436030181121561017b5783018681019190356001600160401b03811161017b57803603831361017b5761132688928392600195611062565b9b0194019401918b98969394919a9997959a6112ac565b90919283359060018060a01b03821680920361017b579081528501928501919060010161124e565b9061137b825f52600160205260405f2054151590565b6114085760025481106113b4574201908142116113a0575f52600160205260405f2055565b634e487b7160e01b5f52601160045260245ffd5b60405162461bcd60e51b815260206004820152602660248201527f54696d656c6f636b436f6e74726f6c6c65723a20696e73756666696369656e746044820152652064656c617960d01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602f60248201527f54696d656c6f636b436f6e74726f6c6c65723a206f7065726174696f6e20616c60448201526e1c9958591e481cd8da19591d5b1959608a1b6064820152608490fd5b5f5b8381106114765750505f910152565b8181015183820152602001611467565b6001600160a01b03165f8181527f3412d5605ac6cd444957cedb533e5dacad6378b4bc819ebe3652188a665066d560209081526040918290205491927fb09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc19260ff16156114f25750505050565b6114fb90611ac4565b835161150681610eba565b604281528281019360603686378151156111c057603085538151600190600110156111c057607860218401536041905b8082116116015750506115bf578461159b604861052f93604497985198899161158c8984019876020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a526104d5815180928d603789019101611465565b01036028810189520187610ee9565b5194859362461bcd60e51b8552600485015251809281602486015285850190611465565b60648386519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f811660108110156111c0576f181899199a1a9b1b9c1cb0b131b232b360811b901a6116308486611ab3565b5360041c9180156113a0575f190190611536565b6001600160a01b03165f8181527fdae2aa361dfd1ca020a396615627d436107c35eff9fe7738a3512819782d706960209081526040918290205491925f80516020611ba98339815191529260ff161561169d5750505050565b6116a690611ac4565b83516116b181610eba565b604281528281019360603686378151156111c057603085538151600190600110156111c057607860218401536041905b8082116117375750506115bf578461159b604861052f93604497985198899161158c8984019876020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a526104d5815180928d603789019101611465565b9091600f811660108110156111c0576f181899199a1a9b1b9c1cb0b131b232b360811b901a6117668486611ab3565b5360041c9180156113a0575f1901906116e1565b805f5260205f8152604092835f209060018060a01b031690815f52825260ff845f205416156117a95750505050565b6117b290611ac4565b83516117bd81610eba565b604281528281019360603686378151156111c057603085538151600190600110156111c057607860218401536041905b8082116118435750506115bf578461159b604861052f93604497985198899161158c8984019876020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a526104d5815180928d603789019101611465565b9091600f811660108110156111c0576f181899199a1a9b1b9c1cb0b131b232b360811b901a6118728486611ab3565b5360041c9180156113a0575f1901906117ed565b1561188d57565b60405162461bcd60e51b815260206004820152602a60248201527f54696d656c6f636b436f6e74726f6c6c65723a206f7065726174696f6e206973604482015269206e6f7420726561647960b01b6064820152608490fd5b6118f16118f6916110e1565b611886565b801590811561195c575b501561190857565b60405162461bcd60e51b815260206004820152602660248201527f54696d656c6f636b436f6e74726f6c6c65723a206d697373696e6720646570656044820152656e64656e637960d01b6064820152608490fd5b61197391505f526001602052600160405f20541490565b5f611900565b90925f938493826040519384928337810185815203925af13d15611a21573d6119a181610f0a565b906119af6040519283610ee9565b81525f60203d92013e5b156119c057565b60405162461bcd60e51b815260206004820152603360248201527f54696d656c6f636b436f6e74726f6c6c65723a20756e6465726c79696e6720746044820152721c985b9cd858dd1a5bdb881c995d995c9d1959606a1b6064820152608490fd5b6119b9565b611a326118f1826110e1565b5f526001602052600160405f2055565b90815f525f60205260405f209060018060a01b031690815f5260205260ff60405f205416611a6e575050565b815f525f60205260405f20815f5260205260405f2060ff19815416905533917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b5f80a4565b9081518110156111c0570160200190565b60405190606082018281106001600160401b03821117610ed557604052602a82526020820160403682378251156111c057603090538151600190600110156111c057607860218401536029905b808211611b65575050611b215790565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f811660108110156111c0576f181899199a1a9b1b9c1cb0b131b232b360811b901a611b948486611ab3565b5360041c9180156113a0575f190190611b1156fed8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63a2646970667358221220f0615e3673ca3e543a83f10540bdefd71a8c63ce7da7f5e736409c73e3c9065164736f6c63430008180033",
-  "linkReferences": {},
-  "deployedLinkReferences": {}
-}
diff --git a/Lending (BC) + frontend/loan-management/frontend/src/components/liquidity-pool/Dashboard.tsx b/Lending (BC) + frontend/loan-management/frontend/src/components/liquidity-pool/Dashboard.tsx
index 2da342b..bce7a7e 100644
--- a/Lending (BC) + frontend/loan-management/frontend/src/components/liquidity-pool/Dashboard.tsx	
+++ b/Lending (BC) + frontend/loan-management/frontend/src/components/liquidity-pool/Dashboard.tsx	
@@ -6,7 +6,6 @@ import BorrowerPanel from "./borrower/BorrowerPanel"
 import { LenderPanel } from "./lender/LenderPanel"
 import { TransactionHistory } from "./shared/TransactionHistory"
 import { UserPanel } from "./user/UserPanel"
-import { UserHistoryPanel } from "./user/UserHistoryPanel"
 import { CreditScorePanel } from "./borrower/CreditScorePanel"
 import { useState, useEffect } from "react"
 import { Button } from "@/components/ui/button"
@@ -24,10 +23,9 @@ interface DashboardProps {
     isLiquidator: boolean;
     provider?: ethers.Provider;
     contracts?: any;
-    fetchUserHistory?: (userAddress: string) => Promise<any>;
 }
 
-export function Dashboard({ contract, lendingManagerContract, account, isAdmin, isLiquidator, provider, contracts, fetchUserHistory }: DashboardProps) {
+export function Dashboard({ contract, lendingManagerContract, account, isAdmin, isLiquidator, provider, contracts }: DashboardProps) {
     const [showAdminControls, setShowAdminControls] = useState(false)
     const [activeTab, setActiveTab] = useState('user')
     const [tlsnStatus, setTlsnStatus] = useState('')
@@ -128,12 +126,11 @@ export function Dashboard({ contract, lendingManagerContract, account, isAdmin,
             )}
 
             <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
-                <TabsList className="grid w-full grid-cols-8">
+                <TabsList className="grid w-full grid-cols-7">
                     <TabsTrigger value="user">User Dashboard</TabsTrigger>
                     <TabsTrigger value="lend">Lend</TabsTrigger>
                     <TabsTrigger value="borrow">Borrow</TabsTrigger>
                     <TabsTrigger value="credit-score">Credit Score</TabsTrigger>
-                    <TabsTrigger value="user-history">History</TabsTrigger>
                     <TabsTrigger value="transaction-history">Transactions</TabsTrigger>
                     <TabsTrigger value="signatures">Signatures</TabsTrigger>
 
@@ -167,23 +164,14 @@ export function Dashboard({ contract, lendingManagerContract, account, isAdmin,
 
                 <TabsContent value="credit-score">
                     <Card className="p-6 bg-muted/30 backdrop-blur-sm">
-                        <CreditScorePanel
-                            contracts={contracts}
-                            account={account || ''}
+                        <CreditScorePanel 
+                            contracts={contracts} 
+                            account={account || ''} 
                             provider={provider}
                         />
                     </Card>
                 </TabsContent>
 
-                <TabsContent value="user-history">
-                    <Card className="p-6 bg-muted/30 backdrop-blur-sm">
-                        <UserHistoryPanel
-                            account={account || ''}
-                            fetchUserHistory={fetchUserHistory}
-                        />
-                    </Card>
-                </TabsContent>
-
                 <TabsContent value="transaction-history">
                     <Card className="p-6 bg-muted/30 backdrop-blur-sm">
                         <TransactionHistory
diff --git a/Lending (BC) + frontend/loan-management/frontend/src/components/liquidity-pool/shared/TransactionHistory.tsx b/Lending (BC) + frontend/loan-management/frontend/src/components/liquidity-pool/shared/TransactionHistory.tsx
index 3081acc..ce68a27 100644
--- a/Lending (BC) + frontend/loan-management/frontend/src/components/liquidity-pool/shared/TransactionHistory.tsx	
+++ b/Lending (BC) + frontend/loan-management/frontend/src/components/liquidity-pool/shared/TransactionHistory.tsx	
@@ -14,6 +14,7 @@ import {
     CheckCircle,
     XCircle,
     AlertTriangle,
+    //AlertTriangle,
     RefreshCw,
     Filter,
     ExternalLink,
diff --git a/Lending (BC) + frontend/loan-management/frontend/src/components/liquidity-pool/user/UserHistoryPanel.jsx b/Lending (BC) + frontend/loan-management/frontend/src/components/liquidity-pool/user/UserHistoryPanel.jsx
deleted file mode 100644
index fd7b7bf..0000000
--- a/Lending (BC) + frontend/loan-management/frontend/src/components/liquidity-pool/user/UserHistoryPanel.jsx	
+++ /dev/null
@@ -1,252 +0,0 @@
-import { useState, useEffect } from 'react'
-import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
-import { Button } from '@/components/ui/button'
-import { Alert, AlertDescription } from '@/components/ui/alert'
-import { Badge } from '@/components/ui/badge'
-import { 
-  History, 
-  Calendar, 
-  TrendingUp, 
-  AlertTriangle, 
-  RefreshCw,
-  Clock,
-  CheckCircle,
-  XCircle
-} from 'lucide-react'
-
-export function UserHistoryPanel({ account, fetchUserHistory }) {
-  const [userHistory, setUserHistory] = useState(null)
-  const [loading, setLoading] = useState(false)
-  const [error, setError] = useState('')
-
-  const fetchHistory = async () => {
-    if (!account || !fetchUserHistory) return
-    
-    setLoading(true)
-    setError('')
-    
-    try {
-      const history = await fetchUserHistory(account)
-      setUserHistory(history)
-    } catch (err) {
-      console.error('Error fetching user history:', err)
-      setError('Failed to fetch user history')
-    } finally {
-      setLoading(false)
-    }
-  }
-
-  useEffect(() => {
-    fetchHistory()
-  }, [account, fetchUserHistory])
-
-  const formatTimestamp = (timestamp) => {
-    if (!timestamp || timestamp === 0) return 'Never'
-    return new Date(timestamp * 1000).toLocaleDateString('en-US', {
-      year: 'numeric',
-      month: 'short',
-      day: 'numeric',
-      hour: '2-digit',
-      minute: '2-digit'
-    })
-  }
-
-  const getHistoryScore = () => {
-    if (!userHistory) return 0
-    
-    const { liquidations, successfulPayments } = userHistory
-    const totalInteractions = liquidations + successfulPayments
-    
-    if (totalInteractions === 0) return 0
-    
-    // Calculate score: successful payments are positive, liquidations are negative
-    const score = ((successfulPayments - liquidations * 2) / totalInteractions) * 100
-    return Math.max(0, Math.min(100, score))
-  }
-
-  const getScoreColor = (score) => {
-    if (score >= 80) return 'text-green-600'
-    if (score >= 60) return 'text-yellow-600'
-    if (score >= 40) return 'text-orange-600'
-    return 'text-red-600'
-  }
-
-  const getScoreBadgeVariant = (score) => {
-    if (score >= 80) return 'default'
-    if (score >= 60) return 'secondary'
-    return 'destructive'
-  }
-
-  if (loading) {
-    return (
-      <Card>
-        <CardHeader>
-          <CardTitle className="flex items-center gap-2">
-            <History className="h-5 w-5" />
-            User History
-          </CardTitle>
-        </CardHeader>
-        <CardContent>
-          <div className="flex items-center justify-center py-8">
-            <RefreshCw className="h-6 w-6 animate-spin mr-2" />
-            Loading history...
-          </div>
-        </CardContent>
-      </Card>
-    )
-  }
-
-  if (error) {
-    return (
-      <Card>
-        <CardHeader>
-          <CardTitle className="flex items-center gap-2">
-            <History className="h-5 w-5" />
-            User History
-          </CardTitle>
-        </CardHeader>
-        <CardContent>
-          <Alert variant="destructive">
-            <AlertTriangle className="h-4 w-4" />
-            <AlertDescription>{error}</AlertDescription>
-          </Alert>
-          <Button onClick={fetchHistory} className="mt-4" variant="outline">
-            <RefreshCw className="h-4 w-4 mr-2" />
-            Retry
-          </Button>
-        </CardContent>
-      </Card>
-    )
-  }
-
-  if (!userHistory) {
-    return (
-      <Card>
-        <CardHeader>
-          <CardTitle className="flex items-center gap-2">
-            <History className="h-5 w-5" />
-            User History
-          </CardTitle>
-        </CardHeader>
-        <CardContent>
-          <div className="text-center py-8 text-muted-foreground">
-            <History className="h-12 w-12 mx-auto mb-4 opacity-50" />
-            <p>No history data available</p>
-          </div>
-        </CardContent>
-      </Card>
-    )
-  }
-
-  const historyScore = getHistoryScore()
-  const hasInteracted = userHistory.firstInteractionTimestamp > 0
-
-  return (
-    <Card>
-      <CardHeader>
-        <div className="flex items-center justify-between">
-          <CardTitle className="flex items-center gap-2">
-            <History className="h-5 w-5" />
-            User History
-          </CardTitle>
-          <Button onClick={fetchHistory} variant="outline" size="sm">
-            <RefreshCw className="h-4 w-4" />
-          </Button>
-        </div>
-      </CardHeader>
-      <CardContent className="space-y-6">
-        {/* History Score */}
-        <div className="text-center">
-          <div className="mb-2">
-            <span className="text-sm text-muted-foreground">History Score</span>
-          </div>
-          <div className={`text-3xl font-bold ${getScoreColor(historyScore)}`}>
-            {historyScore.toFixed(0)}%
-          </div>
-          <Badge variant={getScoreBadgeVariant(historyScore)} className="mt-2">
-            {historyScore >= 80 ? 'Excellent' : 
-             historyScore >= 60 ? 'Good' : 
-             historyScore >= 40 ? 'Fair' : 'Poor'}
-          </Badge>
-        </div>
-
-        {/* First Interaction */}
-        <div className="flex items-center justify-between p-3 bg-muted rounded-lg">
-          <div className="flex items-center gap-3">
-            <Calendar className="h-5 w-5 text-blue-500" />
-            <div>
-              <p className="font-medium">First Interaction</p>
-              <p className="text-sm text-muted-foreground">
-                {formatTimestamp(userHistory.firstInteractionTimestamp)}
-              </p>
-            </div>
-          </div>
-          {hasInteracted && (
-            <Badge variant="outline">
-              <Clock className="h-3 w-3 mr-1" />
-              Member
-            </Badge>
-          )}
-        </div>
-
-        {/* Statistics Grid */}
-        <div className="grid grid-cols-2 gap-4">
-          {/* Successful Payments */}
-          <div className="text-center p-4 bg-green-50 rounded-lg border border-green-200">
-            <CheckCircle className="h-8 w-8 text-green-600 mx-auto mb-2" />
-            <div className="text-2xl font-bold text-green-700">
-              {userHistory.successfulPayments}
-            </div>
-            <div className="text-sm text-green-600">
-              Successful Payments
-            </div>
-          </div>
-
-          {/* Liquidations */}
-          <div className="text-center p-4 bg-red-50 rounded-lg border border-red-200">
-            <XCircle className="h-8 w-8 text-red-600 mx-auto mb-2" />
-            <div className="text-2xl font-bold text-red-700">
-              {userHistory.liquidations}
-            </div>
-            <div className="text-sm text-red-600">
-              Liquidations
-            </div>
-          </div>
-        </div>
-
-        {/* Performance Insights */}
-        {hasInteracted && (
-          <div className="p-3 bg-blue-50 rounded-lg border border-blue-200">
-            <div className="flex items-center gap-2 mb-2">
-              <TrendingUp className="h-4 w-4 text-blue-600" />
-              <span className="font-medium text-blue-800">Performance Insights</span>
-            </div>
-            <div className="text-sm text-blue-700">
-              {userHistory.liquidations === 0 && userHistory.successfulPayments > 0 && (
-                <p>‚úÖ Perfect payment record - no liquidations!</p>
-              )}
-              {userHistory.liquidations > 0 && userHistory.successfulPayments > userHistory.liquidations && (
-                <p>‚ö†Ô∏è More successful payments than liquidations - improving trend</p>
-              )}
-              {userHistory.liquidations > userHistory.successfulPayments && (
-                <p>üî¥ Consider improving collateral management to avoid liquidations</p>
-              )}
-              {userHistory.successfulPayments === 0 && userHistory.liquidations === 0 && (
-                <p>üìä New user - no payment history yet</p>
-              )}
-            </div>
-          </div>
-        )}
-
-        {!hasInteracted && (
-          <Alert>
-            <AlertTriangle className="h-4 w-4" />
-            <AlertDescription>
-              This user has not interacted with the protocol yet.
-            </AlertDescription>
-          </Alert>
-        )}
-      </CardContent>
-    </Card>
-  )
-}
