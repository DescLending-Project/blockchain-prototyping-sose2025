{
  "version": "3.4",
  "log": [
    {
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:29",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/GlintToken.sol:GlintToken": {
        "src": "contracts/GlintToken.sol:8",
        "version": {
          "withMetadata": "ccd057a76873cf65c6bf3917bf69d16a30e881db8d5057d67f778fad647a75a1",
          "withoutMetadata": "6d3849bb39839f4f2664ec9a492969a6f3cd00ef16d7363a1816681b8c646582",
          "linkedWithoutMetadata": "6d3849bb39839f4f2664ec9a492969a6f3cd00ef16d7363a1816681b8c646582"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GlintToken",
            "src": "contracts/GlintToken.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol:AggregatorV3Interface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)119_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)59_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)119_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)119_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/LiquidityPool.sol:LiquidityPool": {
        "src": "contracts/LiquidityPool.sol:4",
        "version": {
          "withMetadata": "e334e5ae715606f821f70b11bebeb0285338705a3606b5c1c377bdcc38cf99ae",
          "withoutMetadata": "8b8807106d7483ce9b23210132caa70bfe498168e2b05ae3a14110d7a1f70d38",
          "linkedWithoutMetadata": "8b8807106d7483ce9b23210132caa70bfe498168e2b05ae3a14110d7a1f70d38"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()",
          "extract(uint256)",
          "getBalance()",
          "borrow(uint256)",
          "repay()",
          "getMyDebt()",
          "setCreditScore(address,uint8)",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LiquidityPool",
            "src": "contracts/LiquidityPool.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:5"
            },
            {
              "label": "totalFunds",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:6"
            },
            {
              "label": "locked",
              "offset": 0,
              "slot": "2",
              "type": "t_bool",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:7"
            },
            {
              "label": "userDebt",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:10"
            },
            {
              "label": "creditScore",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint8)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:12"
            },
            {
              "label": "borrowTimestamp",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint8)": {
              "label": "mapping(address => uint8)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/LiquidityPoolV1.sol:LiquidityPoolV1": {
        "src": "contracts/LiquidityPoolV1.sol:6",
        "version": {
          "withMetadata": "26d8e74c070fd2d40ad3db4e62bae5d4885b02a34723f679fe2b1b5a7426dc24",
          "withoutMetadata": "fb98e45ce2ba67a4b565ca8a5c034e35434b2696e492b6839d63fb3abd40b930",
          "linkedWithoutMetadata": "fb98e45ce2ba67a4b565ca8a5c034e35434b2696e492b6839d63fb3abd40b930"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "()",
          "extract(uint256)",
          "getBalance()",
          "borrow(uint256)",
          "repay()",
          "getMyDebt()",
          "setCreditScore(address,uint8)",
          "transferOwnership(address)",
          "togglePause()",
          "isPaused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "LiquidityPoolV1",
              "src": "contracts/LiquidityPoolV1.sol:7"
            },
            {
              "label": "totalFunds",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "LiquidityPoolV1",
              "src": "contracts/LiquidityPoolV1.sol:8"
            },
            {
              "label": "locked",
              "offset": 0,
              "slot": "2",
              "type": "t_bool",
              "contract": "LiquidityPoolV1",
              "src": "contracts/LiquidityPoolV1.sol:9"
            },
            {
              "label": "paused",
              "offset": 1,
              "slot": "2",
              "type": "t_bool",
              "contract": "LiquidityPoolV1",
              "src": "contracts/LiquidityPoolV1.sol:10"
            },
            {
              "label": "userDebt",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPoolV1",
              "src": "contracts/LiquidityPoolV1.sol:12"
            },
            {
              "label": "creditScore",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint8)",
              "contract": "LiquidityPoolV1",
              "src": "contracts/LiquidityPoolV1.sol:13"
            },
            {
              "label": "borrowTimestamp",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPoolV1",
              "src": "contracts/LiquidityPoolV1.sol:14"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)119_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint8)": {
              "label": "mapping(address => uint8)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/LiquidityPoolV3.sol:LiquidityPoolV3": {
        "src": "contracts/LiquidityPoolV3.sol:9",
        "version": {
          "withMetadata": "e883c1e9c12c2125506798842935584028e47f5e48f89d540b0e451467e96d56",
          "withoutMetadata": "e96b13614f6318489232e3ed8285df64da5e7ee7418bab619056e6686a3cc3e4",
          "linkedWithoutMetadata": "e96b13614f6318489232e3ed8285df64da5e7ee7418bab619056e6686a3cc3e4"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "setAllowedCollateral(address,bool)",
          "depositCollateral(address,uint256)",
          "withdrawCollateral(address,uint256)",
          "getCollateral(address,address)",
          "getMyDebt()",
          "borrow(uint256)",
          "repay()",
          "extract(uint256)",
          "setCreditScore(address,uint256)",
          "setPriceFeed(address,address)",
          "setLiquidationThreshold(address,uint256)",
          "checkCollateralization(address)",
          "startLiquidation(address)",
          "executeLiquidation(address)",
          "recoverFromLiquidation(address,uint256)",
          "getTotalCollateralValue(address)",
          "getTokenValue(address)",
          "getMinCollateralRatio()",
          "getLiquidationThreshold(address)",
          "getAllowedCollateralTokens()",
          "()",
          "getBalance()",
          "togglePause()",
          "isPaused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "collateralBalance",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "LiquidityPoolV3",
              "src": "contracts/LiquidityPoolV3.sol:10"
            },
            {
              "label": "isAllowedCollateral",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LiquidityPoolV3",
              "src": "contracts/LiquidityPoolV3.sol:11"
            },
            {
              "label": "creditScore",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPoolV3",
              "src": "contracts/LiquidityPoolV3.sol:12"
            },
            {
              "label": "userDebt",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPoolV3",
              "src": "contracts/LiquidityPoolV3.sol:13"
            },
            {
              "label": "borrowTimestamp",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPoolV3",
              "src": "contracts/LiquidityPoolV3.sol:14"
            },
            {
              "label": "isLiquidatable",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LiquidityPoolV3",
              "src": "contracts/LiquidityPoolV3.sol:15"
            },
            {
              "label": "liquidationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPoolV3",
              "src": "contracts/LiquidityPoolV3.sol:16"
            },
            {
              "label": "liquidationThreshold",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPoolV3",
              "src": "contracts/LiquidityPoolV3.sol:17"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_address)",
              "contract": "LiquidityPoolV3",
              "src": "contracts/LiquidityPoolV3.sol:18"
            },
            {
              "label": "collateralTokenList",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_address)dyn_storage",
              "contract": "LiquidityPoolV3",
              "src": "contracts/LiquidityPoolV3.sol:20"
            },
            {
              "label": "totalFunds",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "LiquidityPoolV3",
              "src": "contracts/LiquidityPoolV3.sol:26"
            },
            {
              "label": "locked",
              "offset": 0,
              "slot": "11",
              "type": "t_bool",
              "contract": "LiquidityPoolV3",
              "src": "contracts/LiquidityPoolV3.sol:27"
            },
            {
              "label": "paused",
              "offset": 1,
              "slot": "11",
              "type": "t_bool",
              "contract": "LiquidityPoolV3",
              "src": "contracts/LiquidityPoolV3.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)119_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)59_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/Lock.sol:Lock": {
        "src": "contracts/Lock.sol:7",
        "version": {
          "withMetadata": "905728a2297ea88b2fd2c1cd2e7cc2cc9eb84f8f1c8909f3ee7a5555eaee3367",
          "withoutMetadata": "58cefd5747baf40b25df55b33379d9ec089fad39f84bf91d803367d328ccdf29",
          "linkedWithoutMetadata": "58cefd5747baf40b25df55b33379d9ec089fad39f84bf91d803367d328ccdf29"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(uint256)",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lock",
            "src": "contracts/Lock.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlockTime",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lock",
              "src": "contracts/Lock.sol:8"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "1",
              "type": "t_address_payable",
              "contract": "Lock",
              "src": "contracts/Lock.sol:9"
            }
          ],
          "types": {
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/MockPriceFeed.sol:MockPriceFeed": {
        "src": "contracts/MockPriceFeed.sol:6",
        "version": {
          "withMetadata": "5d8bde09a77b46c4ca96adebeabe37fdc94e6af77e6a0cbf704b7baffb863a3d",
          "withoutMetadata": "b47e7409b9185450cfe1aaf52955705348d9aa4884f9596f0a3531a8cc442bcd",
          "linkedWithoutMetadata": "b47e7409b9185450cfe1aaf52955705348d9aa4884f9596f0a3531a8cc442bcd"
        },
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol:AggregatorV3Interface"
        ],
        "libraries": [],
        "methods": [
          "(int256,uint8)",
          "decimals()",
          "description()",
          "version()",
          "latestRoundData()",
          "getRoundData(uint80)",
          "setPrice(int256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockPriceFeed",
            "src": "contracts/MockPriceFeed.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_price",
              "offset": 0,
              "slot": "0",
              "type": "t_int256",
              "contract": "MockPriceFeed",
              "src": "contracts/MockPriceFeed.sol:7"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "1",
              "type": "t_uint8",
              "contract": "MockPriceFeed",
              "src": "contracts/MockPriceFeed.sol:8"
            }
          ],
          "types": {
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      }
    }
  ]
}